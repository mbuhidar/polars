Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL Interface", "Testing"], "terms": {"python": [0, 38, 39, 81, 109, 120, 121, 126, 128, 142, 143, 145, 159, 208, 214, 240, 241, 261, 292, 306, 321, 391, 396, 400, 547, 549, 551, 649, 725, 742, 743, 745, 746, 787, 788, 790, 800, 806, 826, 901, 913, 925, 999, 1003, 1015, 1016, 1017, 1023, 1155, 1229, 1288, 1308], "api": [0, 109, 140, 159, 214, 292, 306, 551, 764, 800, 901, 1155, 1308], "refer": [0, 37, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 167, 306, 309, 391, 431, 434, 549, 599, 647, 664, 665, 681, 683, 684, 688, 800, 826, 913, 1038, 1041, 1175, 1244, 1245, 1261, 1263, 1264, 1268, 1308, 1312], "datafram": [0, 1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 79, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 137, 138, 139, 143, 144, 147, 148, 157, 304, 305, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 796, 800, 812, 821, 822, 825, 827, 831, 832, 836, 839, 847, 848, 849, 850, 852, 853, 857, 858, 862, 865, 875, 877, 883, 884, 885, 890, 893, 894, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 993, 994, 1034, 1059, 1077, 1155, 1173, 1234, 1252, 1253, 1277, 1285, 1286, 1296, 1308, 1316, 1317], "lazyfram": [0, 1, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 134, 135, 136, 137, 138, 139, 140, 143, 144, 150, 212, 228, 229, 253, 306, 460, 539, 800, 812, 912, 918, 1316, 1317], "seri": [0, 1, 12, 26, 53, 55, 56, 57, 58, 62, 63, 72, 83, 91, 92, 108, 110, 113, 115, 143, 145, 146, 150, 171, 180, 183, 186, 188, 191, 196, 199, 200, 201, 203, 205, 207, 215, 216, 217, 218, 222, 223, 234, 235, 236, 238, 242, 255, 256, 260, 263, 266, 267, 268, 285, 306, 320, 321, 332, 355, 359, 367, 368, 370, 427, 457, 460, 463, 467, 468, 476, 480, 483, 484, 487, 489, 490, 491, 503, 510, 512, 537, 539, 545, 547, 549, 551, 599, 600, 601, 602, 603, 604, 608, 609, 610, 616, 624, 627, 651, 681, 682, 683, 684, 688, 692, 699, 700, 704, 709, 718, 720, 724, 733, 734, 737, 738, 742, 743, 745, 746, 751, 753, 757, 758, 761, 762, 763, 764, 773, 775, 776, 779, 782, 787, 788, 791, 800, 812, 835, 839, 866, 894, 913, 917, 1300, 1302, 1304, 1307, 1309, 1312, 1313, 1314, 1315, 1317], "express": [0, 9, 43, 44, 45, 46, 60, 61, 147, 150, 152, 162, 176, 178, 180, 190, 193, 214, 225, 229, 239, 244, 245, 248, 252, 268, 269, 279, 280, 282, 284, 292, 306, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 331, 332, 336, 337, 338, 339, 340, 343, 354, 359, 360, 361, 362, 363, 365, 371, 374, 375, 376, 377, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 454, 456, 457, 459, 460, 464, 466, 467, 469, 470, 471, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 493, 496, 497, 501, 502, 504, 505, 506, 509, 510, 516, 518, 538, 539, 545, 546, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 562, 563, 565, 567, 569, 571, 572, 574, 576, 578, 579, 582, 583, 585, 587, 588, 592, 593, 594, 595, 596, 598, 602, 603, 604, 606, 607, 622, 623, 624, 626, 628, 630, 631, 633, 635, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 664, 665, 670, 671, 672, 673, 682, 686, 695, 696, 699, 701, 702, 705, 706, 707, 709, 710, 712, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 771, 773, 775, 776, 777, 778, 779, 780, 782, 784, 786, 787, 788, 790, 791, 796, 799, 812, 816, 821, 822, 830, 831, 832, 835, 838, 841, 862, 868, 869, 872, 873, 874, 876, 882, 888, 889, 890, 892, 893, 901, 913, 917, 918, 942, 977, 992, 999, 1002, 1003, 1020, 1059, 1065, 1081, 1113, 1114, 1117, 1155, 1179, 1199, 1205, 1206, 1219, 1221, 1222, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1244, 1245, 1262, 1266, 1308], "selector": [0, 37, 163, 170, 172, 176, 220, 227, 229, 262, 271, 273, 306, 454, 460, 800, 812, 818, 827, 828, 831, 857, 883, 913], "function": [0, 37, 38, 53, 54, 55, 56, 57, 58, 61, 70, 72, 91, 92, 109, 113, 115, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 143, 144, 145, 146, 148, 155, 157, 159, 160, 167, 175, 183, 214, 220, 228, 229, 233, 253, 264, 265, 270, 273, 274, 286, 292, 306, 317, 321, 355, 388, 389, 391, 428, 450, 452, 453, 474, 539, 547, 548, 549, 551, 562, 572, 573, 588, 592, 596, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 632, 703, 714, 718, 719, 730, 732, 733, 734, 737, 738, 739, 740, 750, 751, 753, 755, 756, 759, 762, 763, 764, 767, 769, 772, 773, 775, 777, 778, 781, 785, 789, 791, 796, 800, 812, 822, 826, 832, 852, 853, 857, 861, 864, 870, 877, 885, 892, 895, 901, 913, 917, 925, 958, 972, 992, 993, 1035, 1057, 1058, 1060, 1061, 1077, 1147, 1155, 1173, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1201, 1208, 1213, 1288, 1290, 1308, 1317], "data": [0, 1, 2, 11, 19, 20, 22, 29, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 53, 54, 55, 57, 60, 61, 62, 67, 68, 69, 71, 80, 81, 83, 84, 92, 97, 98, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 145, 146, 148, 149, 150, 152, 159, 165, 176, 177, 189, 190, 191, 192, 193, 194, 195, 208, 209, 210, 212, 214, 227, 228, 232, 238, 239, 240, 241, 250, 259, 264, 265, 268, 270, 279, 283, 304, 306, 317, 318, 319, 323, 324, 325, 326, 327, 328, 331, 334, 335, 336, 337, 338, 340, 343, 345, 346, 347, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 366, 367, 371, 374, 375, 376, 377, 389, 390, 391, 396, 397, 398, 399, 402, 403, 404, 406, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 428, 429, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 456, 467, 469, 470, 471, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 496, 497, 501, 502, 504, 510, 516, 518, 526, 538, 540, 546, 551, 582, 583, 587, 588, 596, 598, 599, 602, 603, 604, 606, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 630, 631, 632, 638, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 670, 671, 672, 673, 681, 682, 683, 684, 686, 688, 691, 701, 702, 703, 706, 707, 710, 713, 718, 720, 730, 741, 742, 743, 744, 745, 746, 747, 757, 758, 760, 761, 762, 763, 764, 773, 776, 786, 787, 788, 791, 796, 800, 812, 819, 820, 821, 822, 826, 831, 832, 838, 839, 840, 841, 842, 843, 861, 866, 888, 913, 922, 923, 935, 937, 938, 939, 940, 941, 943, 945, 946, 957, 959, 961, 962, 963, 967, 968, 970, 976, 977, 980, 993, 994, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1018, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1059, 1063, 1064, 1077, 1083, 1085, 1086, 1087, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1107, 1108, 1109, 1110, 1112, 1118, 1124, 1126, 1134, 1146, 1148, 1155, 1167, 1173, 1175, 1179, 1180, 1182, 1183, 1195, 1197, 1208, 1213, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1236, 1250, 1251, 1252, 1253, 1261, 1262, 1263, 1264, 1266, 1268, 1271, 1288, 1289, 1290, 1291, 1293, 1298, 1307, 1308, 1316], "type": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 43, 44, 45, 46, 47, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 108, 110, 111, 112, 113, 114, 116, 120, 121, 122, 124, 125, 129, 130, 131, 132, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 149, 150, 160, 176, 183, 189, 191, 192, 194, 195, 196, 209, 210, 214, 238, 259, 264, 267, 268, 271, 282, 306, 317, 319, 323, 324, 325, 326, 327, 328, 331, 336, 337, 338, 340, 343, 354, 355, 359, 360, 361, 362, 363, 366, 367, 368, 371, 374, 375, 376, 377, 389, 390, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 454, 456, 467, 470, 472, 478, 479, 480, 481, 482, 483, 484, 485, 486, 497, 501, 502, 504, 510, 516, 518, 538, 539, 549, 551, 596, 598, 602, 603, 604, 606, 607, 608, 630, 631, 638, 641, 642, 643, 644, 646, 647, 648, 649, 651, 654, 655, 656, 670, 671, 672, 673, 681, 682, 686, 701, 702, 703, 710, 718, 720, 730, 741, 742, 743, 744, 745, 746, 747, 749, 750, 757, 758, 759, 760, 761, 762, 763, 764, 773, 776, 786, 787, 788, 791, 796, 800, 812, 821, 822, 830, 831, 832, 839, 840, 842, 843, 847, 862, 866, 874, 883, 892, 913, 922, 923, 935, 937, 938, 939, 940, 941, 943, 945, 946, 957, 958, 959, 961, 962, 963, 967, 968, 970, 977, 993, 994, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1059, 1063, 1075, 1083, 1085, 1086, 1087, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1107, 1108, 1109, 1110, 1112, 1118, 1124, 1126, 1146, 1147, 1167, 1173, 1179, 1180, 1182, 1183, 1208, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1231, 1234, 1235, 1236, 1250, 1251, 1252, 1253, 1261, 1262, 1266, 1288, 1289, 1291, 1299, 1308, 1316], "input": [0, 54, 60, 111, 113, 120, 121, 162, 170, 190, 193, 214, 218, 227, 233, 244, 245, 248, 252, 256, 269, 279, 280, 284, 306, 314, 365, 371, 451, 454, 466, 478, 543, 549, 550, 551, 560, 588, 603, 635, 651, 670, 677, 678, 679, 680, 682, 705, 713, 715, 717, 718, 720, 723, 726, 727, 728, 736, 740, 747, 749, 750, 757, 758, 759, 761, 762, 763, 764, 766, 768, 771, 779, 782, 784, 790, 800, 812, 816, 827, 838, 841, 864, 868, 869, 870, 872, 876, 882, 888, 889, 893, 913, 917, 977, 1059, 1081, 1151, 1152, 1155, 1179, 1205, 1231, 1250, 1262, 1308], "output": [0, 9, 31, 34, 37, 38, 39, 40, 41, 43, 160, 169, 191, 192, 194, 195, 208, 214, 218, 221, 227, 229, 238, 240, 244, 256, 275, 279, 306, 317, 319, 321, 343, 389, 451, 516, 539, 547, 548, 549, 551, 559, 562, 572, 596, 608, 613, 615, 617, 619, 638, 656, 710, 714, 715, 716, 717, 718, 728, 729, 742, 743, 762, 763, 764, 800, 812, 825, 830, 839, 840, 842, 843, 852, 853, 857, 858, 866, 868, 870, 888, 895, 901, 913, 922, 923, 925, 946, 993, 1059, 1124, 1155, 1173, 1218, 1236, 1296, 1308], "config": [0, 54, 169, 244, 279, 306, 640, 666, 743, 746, 747, 812, 821, 825, 868, 888, 913, 1220, 1246], "extend": [0, 111, 277, 306, 457, 800, 812, 917, 924, 1065, 1308], "plugin": [0, 800, 812], "sql": [0, 35, 47, 51, 122, 123, 210, 248, 306, 350, 531, 625, 760, 780, 800, 812, 872, 913, 953, 1139, 1205, 1308], "interfac": [0, 812], "except": [0, 143, 197, 211, 213, 257, 306, 651, 682, 749, 812, 848, 913, 918, 1076, 1106, 1231, 1262, 1279, 1289, 1298, 1308], "test": [0, 2, 122, 123, 125, 131, 812, 844, 851, 913], "metadata": [0, 136, 191, 192, 194, 195, 238, 306, 812, 839, 840, 842, 843, 866, 913], "These": [1, 37, 117, 122, 123, 157, 270, 306, 442, 799, 800, 917, 1035, 1049], "allow": [1, 9, 36, 37, 43, 44, 45, 46, 53, 92, 97, 109, 122, 125, 134, 137, 138, 139, 140, 150, 152, 159, 208, 211, 212, 239, 240, 242, 264, 265, 268, 271, 283, 306, 424, 431, 434, 526, 549, 551, 601, 622, 681, 683, 684, 800, 847, 848, 852, 853, 857, 883, 890, 913, 917, 918, 1031, 1038, 1041, 1056, 1134, 1155, 1177, 1197, 1200, 1261, 1263, 1264, 1289, 1290, 1308, 1317], "you": [1, 11, 15, 37, 42, 46, 52, 54, 61, 62, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 125, 126, 129, 130, 132, 134, 138, 140, 157, 177, 191, 192, 194, 195, 207, 208, 214, 225, 229, 238, 239, 240, 241, 261, 270, 292, 306, 309, 396, 420, 421, 424, 427, 428, 431, 434, 442, 454, 460, 478, 509, 539, 549, 551, 601, 608, 611, 612, 613, 614, 615, 617, 618, 619, 640, 655, 664, 665, 666, 725, 733, 742, 747, 751, 764, 773, 776, 791, 800, 822, 828, 839, 840, 842, 843, 844, 851, 866, 874, 877, 901, 913, 917, 918, 999, 1027, 1028, 1034, 1035, 1038, 1041, 1049, 1064, 1081, 1117, 1155, 1177, 1220, 1235, 1244, 1245, 1246, 1264, 1298, 1308, 1312, 1317], "regist": [1, 47, 49, 50, 51, 52, 55, 56, 57, 58, 151, 153, 253, 306, 800, 877, 913, 917, 1316], "custom": [1, 28, 36, 37, 55, 56, 57, 58, 151, 152, 153, 160, 169, 214, 286, 292, 306, 321, 355, 396, 431, 434, 539, 547, 549, 551, 609, 610, 718, 725, 762, 763, 764, 800, 825, 852, 853, 895, 901, 913, 925, 958, 999, 1038, 1041, 1147, 1155, 1184, 1185, 1308, 1317], "dedic": [1, 109, 208, 240, 306], "namespac": [1, 122, 305, 306, 799, 812, 912, 1308, 1317], "underli": [1, 53, 68, 69, 71, 84, 92, 95, 101, 108, 110, 111, 112, 114, 122, 123, 125, 129, 130, 132, 138, 147, 150, 152, 176, 177, 208, 209, 240, 259, 264, 306, 360, 398, 399, 400, 404, 408, 410, 411, 412, 414, 415, 417, 419, 422, 425, 426, 427, 429, 443, 444, 445, 446, 601, 620, 639, 643, 650, 800, 831, 913, 918, 962, 971, 1001, 1002, 1003, 1007, 1011, 1013, 1014, 1018, 1020, 1021, 1024, 1026, 1029, 1032, 1033, 1034, 1036, 1050, 1051, 1052, 1053, 1064, 1177, 1195, 1208, 1219, 1223, 1230, 1284, 1289, 1308], "polar": [1, 306, 309, 799, 800, 806, 812, 913, 917, 918, 1308, 1312, 1316], "class": [1, 18, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 147, 148, 241, 306, 787, 796, 800, 806, 812, 913, 1288, 1289, 1308, 1316], "without": [1, 38, 43, 44, 45, 46, 59, 60, 61, 70, 72, 115, 124, 127, 132, 133, 135, 136, 139, 140, 253, 264, 273, 274, 306, 321, 388, 389, 428, 474, 551, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 640, 666, 730, 777, 778, 779, 800, 821, 822, 877, 885, 913, 969, 972, 992, 993, 1035, 1077, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1220, 1246, 1288, 1289, 1308], "requir": [1, 36, 37, 54, 113, 122, 123, 143, 144, 145, 146, 162, 167, 239, 265, 268, 269, 306, 356, 450, 452, 453, 540, 551, 588, 627, 681, 683, 684, 707, 776, 800, 816, 876, 882, 913, 959, 1058, 1060, 1061, 1148, 1207, 1261, 1263, 1264, 1289, 1290, 1293, 1308, 1312], "subclass": [1, 306], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 176, 178, 210, 211, 225, 229, 239, 244, 245, 268, 279, 280, 306, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 800, 801, 802, 805, 806, 807, 808, 809, 831, 833, 847, 848, 863, 868, 869, 873, 888, 889, 913, 917, 992, 999, 1002, 1003, 1020, 1031, 1049, 1059, 1066, 1071, 1113, 1117, 1123, 1140, 1144, 1206, 1219, 1225, 1230, 1254, 1280, 1308], "ar": [1, 11, 12, 18, 21, 31, 34, 36, 37, 43, 44, 45, 46, 52, 53, 54, 61, 62, 91, 92, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 150, 157, 159, 162, 167, 169, 172, 175, 178, 182, 183, 189, 190, 191, 192, 193, 194, 195, 208, 210, 211, 212, 214, 220, 221, 227, 229, 238, 239, 240, 241, 244, 245, 246, 248, 252, 253, 260, 264, 265, 268, 269, 274, 275, 279, 280, 283, 284, 306, 317, 319, 334, 350, 355, 364, 365, 371, 379, 381, 382, 396, 428, 442, 447, 449, 450, 451, 452, 453, 478, 480, 483, 484, 487, 489, 490, 491, 494, 499, 531, 539, 549, 550, 583, 588, 596, 599, 602, 603, 604, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 625, 629, 632, 634, 635, 649, 651, 652, 654, 661, 662, 663, 664, 665, 670, 682, 686, 691, 697, 704, 705, 714, 715, 717, 723, 726, 727, 728, 729, 732, 736, 740, 742, 743, 745, 746, 766, 768, 771, 779, 782, 784, 787, 788, 790, 792, 793, 795, 799, 800, 801, 802, 805, 806, 807, 808, 809, 812, 816, 821, 822, 825, 828, 832, 833, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 853, 857, 858, 862, 864, 866, 868, 869, 871, 872, 876, 877, 882, 885, 888, 889, 890, 893, 913, 917, 918, 922, 923, 937, 953, 958, 969, 977, 986, 987, 999, 1035, 1049, 1055, 1057, 1058, 1059, 1060, 1061, 1069, 1074, 1081, 1085, 1089, 1090, 1094, 1095, 1096, 1097, 1104, 1107, 1139, 1147, 1173, 1175, 1179, 1180, 1191, 1205, 1210, 1213, 1229, 1231, 1232, 1241, 1242, 1243, 1244, 1245, 1250, 1262, 1264, 1266, 1271, 1278, 1289, 1290, 1298, 1300, 1302, 1304, 1308, 1309, 1313, 1314, 1315, 1317], "all": [1, 5, 9, 14, 18, 21, 26, 31, 34, 36, 37, 43, 49, 54, 60, 67, 100, 108, 113, 120, 121, 124, 125, 126, 128, 131, 132, 134, 137, 138, 147, 148, 152, 157, 161, 163, 169, 172, 179, 197, 203, 205, 207, 208, 209, 210, 212, 213, 218, 220, 224, 225, 229, 232, 239, 240, 241, 245, 251, 253, 256, 257, 262, 264, 268, 271, 273, 274, 275, 280, 282, 306, 318, 320, 343, 358, 365, 377, 388, 394, 395, 396, 397, 454, 459, 465, 472, 475, 477, 480, 484, 490, 491, 493, 497, 508, 509, 516, 535, 539, 548, 549, 568, 571, 572, 574, 575, 576, 577, 578, 579, 586, 594, 599, 603, 605, 610, 627, 633, 635, 641, 642, 648, 649, 651, 654, 659, 665, 669, 675, 676, 677, 678, 682, 696, 705, 715, 725, 733, 734, 735, 736, 739, 740, 742, 749, 751, 756, 757, 760, 768, 775, 782, 783, 784, 790, 800, 806, 812, 815, 818, 821, 822, 825, 828, 830, 832, 834, 847, 852, 853, 857, 862, 869, 874, 875, 877, 883, 885, 889, 890, 892, 913, 918, 946, 992, 994, 997, 998, 999, 1000, 1076, 1083, 1101, 1106, 1116, 1117, 1124, 1143, 1147, 1175, 1179, 1185, 1214, 1221, 1222, 1228, 1229, 1231, 1234, 1239, 1249, 1255, 1256, 1257, 1258, 1262, 1279, 1308, 1316, 1317], "support": [1, 36, 37, 42, 62, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 139, 147, 152, 157, 208, 209, 210, 211, 215, 217, 222, 240, 241, 251, 252, 255, 261, 265, 268, 306, 451, 532, 588, 603, 633, 635, 651, 664, 665, 666, 670, 682, 796, 800, 806, 847, 848, 875, 876, 913, 918, 1059, 1140, 1179, 1214, 1231, 1244, 1245, 1246, 1250, 1262, 1290, 1308, 1316], "target": [1, 35, 36, 37, 59, 125, 268, 306, 647, 681, 683, 684, 918, 1227, 1261, 1263, 1264], "thi": [1, 2, 5, 11, 13, 15, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 157, 159, 160, 161, 162, 165, 167, 169, 172, 173, 175, 177, 181, 182, 183, 184, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 224, 225, 227, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 244, 245, 248, 249, 251, 253, 254, 255, 258, 259, 261, 264, 265, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 286, 287, 292, 305, 306, 317, 320, 321, 322, 331, 343, 349, 350, 351, 356, 364, 365, 367, 368, 371, 383, 384, 385, 386, 387, 388, 389, 391, 397, 398, 411, 420, 421, 424, 427, 428, 431, 434, 442, 445, 449, 451, 456, 466, 472, 474, 476, 477, 478, 481, 483, 485, 488, 493, 505, 509, 510, 516, 519, 526, 527, 528, 529, 530, 531, 533, 537, 539, 540, 544, 545, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 562, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 588, 594, 596, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 624, 625, 626, 627, 628, 633, 634, 635, 638, 640, 641, 647, 652, 653, 657, 658, 659, 660, 661, 662, 663, 666, 668, 669, 675, 676, 677, 678, 679, 680, 685, 691, 693, 696, 699, 700, 704, 705, 707, 708, 709, 710, 714, 718, 719, 727, 730, 732, 733, 737, 739, 740, 750, 751, 753, 755, 756, 759, 760, 762, 764, 767, 769, 772, 773, 777, 778, 779, 781, 785, 789, 790, 791, 796, 800, 812, 815, 816, 817, 820, 821, 822, 825, 826, 828, 830, 832, 838, 839, 840, 841, 842, 843, 845, 847, 848, 852, 853, 857, 858, 862, 864, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 881, 882, 883, 885, 888, 889, 890, 891, 892, 895, 896, 901, 912, 913, 917, 918, 924, 925, 934, 946, 952, 953, 954, 959, 966, 968, 970, 971, 972, 977, 980, 988, 989, 990, 991, 992, 993, 1000, 1001, 1003, 1014, 1027, 1028, 1031, 1034, 1035, 1038, 1041, 1049, 1052, 1054, 1057, 1059, 1063, 1064, 1072, 1073, 1075, 1077, 1082, 1086, 1088, 1089, 1091, 1092, 1098, 1100, 1102, 1103, 1113, 1117, 1118, 1124, 1127, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1145, 1148, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1168, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1214, 1215, 1217, 1218, 1220, 1221, 1227, 1232, 1233, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1248, 1249, 1255, 1256, 1257, 1258, 1264, 1265, 1271, 1272, 1274, 1277, 1278, 1280, 1281, 1284, 1286, 1288, 1289, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1308, 1312, 1316, 1317], "featur": [1, 42, 59, 70, 72, 268, 306], "i": [1, 2, 13, 15, 18, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 59, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 94, 96, 97, 99, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 161, 162, 165, 169, 172, 174, 175, 177, 180, 184, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 206, 208, 209, 210, 211, 212, 213, 214, 217, 220, 221, 225, 227, 228, 229, 236, 238, 239, 240, 241, 242, 245, 248, 251, 252, 253, 254, 255, 257, 259, 264, 265, 268, 269, 270, 271, 273, 274, 275, 276, 280, 282, 283, 292, 305, 306, 314, 317, 319, 320, 321, 322, 332, 335, 342, 343, 350, 355, 388, 389, 391, 394, 395, 396, 397, 400, 410, 424, 428, 431, 442, 450, 451, 452, 453, 456, 460, 472, 474, 476, 478, 494, 500, 508, 509, 512, 514, 516, 526, 531, 532, 534, 537, 539, 541, 544, 549, 551, 555, 558, 559, 560, 562, 570, 588, 596, 599, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 628, 629, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 664, 665, 666, 669, 670, 673, 675, 676, 677, 678, 681, 682, 683, 684, 686, 688, 691, 710, 711, 714, 715, 716, 717, 719, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 742, 743, 745, 746, 751, 755, 756, 757, 758, 760, 761, 764, 767, 769, 772, 773, 776, 777, 778, 779, 781, 785, 787, 788, 789, 790, 791, 796, 800, 815, 816, 817, 820, 821, 822, 825, 826, 828, 830, 832, 835, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 852, 853, 857, 858, 862, 866, 869, 870, 872, 874, 875, 876, 877, 878, 882, 883, 885, 886, 889, 892, 895, 901, 913, 917, 918, 922, 923, 924, 925, 938, 945, 946, 953, 958, 969, 972, 977, 980, 992, 993, 994, 997, 998, 999, 1000, 1003, 1013, 1031, 1035, 1038, 1049, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1068, 1074, 1075, 1076, 1077, 1081, 1082, 1084, 1091, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1108, 1116, 1117, 1120, 1122, 1124, 1134, 1139, 1140, 1145, 1147, 1155, 1173, 1175, 1177, 1179, 1180, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1200, 1201, 1203, 1205, 1209, 1210, 1213, 1214, 1217, 1218, 1219, 1220, 1221, 1222, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1249, 1250, 1253, 1255, 1256, 1257, 1258, 1261, 1262, 1263, 1264, 1266, 1268, 1271, 1279, 1284, 1289, 1290, 1296, 1297, 1298, 1308, 1316, 1317], "primarili": 1, "intend": [1, 125, 143, 144, 145, 146, 691, 970, 1271], "us": [1, 8, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 36, 37, 42, 43, 46, 47, 48, 49, 50, 52, 53, 54, 59, 60, 61, 62, 69, 83, 91, 92, 109, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 160, 161, 163, 169, 170, 172, 178, 179, 180, 183, 190, 191, 192, 193, 194, 195, 203, 205, 207, 208, 209, 211, 214, 215, 217, 220, 222, 224, 225, 227, 228, 229, 234, 238, 239, 240, 241, 242, 244, 245, 249, 252, 253, 254, 255, 261, 262, 263, 264, 265, 268, 270, 271, 273, 274, 275, 276, 279, 280, 281, 282, 284, 292, 306, 309, 315, 317, 319, 321, 322, 331, 332, 355, 360, 361, 364, 365, 368, 372, 373, 388, 391, 394, 395, 403, 405, 409, 413, 416, 418, 423, 427, 428, 430, 431, 434, 442, 445, 447, 450, 451, 452, 453, 454, 459, 460, 474, 477, 478, 494, 509, 526, 534, 539, 541, 549, 550, 551, 554, 571, 574, 576, 578, 579, 588, 596, 599, 601, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 617, 618, 619, 622, 624, 626, 627, 632, 634, 635, 637, 639, 640, 643, 644, 645, 647, 648, 650, 655, 656, 664, 665, 666, 670, 672, 674, 677, 678, 679, 680, 681, 683, 684, 688, 691, 704, 705, 711, 712, 714, 715, 716, 717, 719, 723, 728, 729, 730, 731, 732, 733, 735, 736, 739, 740, 742, 743, 744, 745, 746, 747, 751, 753, 757, 758, 760, 761, 764, 765, 766, 768, 770, 771, 773, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 796, 799, 800, 811, 812, 815, 816, 817, 818, 821, 822, 825, 826, 827, 828, 832, 833, 834, 835, 838, 839, 840, 842, 843, 844, 848, 850, 851, 857, 866, 868, 869, 873, 876, 877, 878, 882, 883, 885, 886, 888, 889, 891, 892, 893, 901, 913, 918, 922, 923, 925, 954, 958, 962, 963, 970, 972, 978, 979, 992, 993, 994, 997, 998, 1006, 1008, 1012, 1019, 1022, 1025, 1030, 1034, 1035, 1037, 1038, 1041, 1049, 1052, 1055, 1058, 1059, 1060, 1061, 1066, 1067, 1071, 1074, 1077, 1080, 1081, 1082, 1088, 1091, 1098, 1100, 1102, 1104, 1117, 1134, 1141, 1147, 1154, 1155, 1173, 1175, 1177, 1180, 1182, 1183, 1185, 1197, 1198, 1201, 1203, 1206, 1207, 1213, 1215, 1217, 1219, 1220, 1223, 1224, 1227, 1228, 1230, 1235, 1236, 1244, 1245, 1246, 1250, 1252, 1261, 1263, 1264, 1268, 1271, 1280, 1285, 1287, 1288, 1289, 1290, 1297, 1298, 1308, 1312, 1316, 1317], "librari": [1, 101, 122, 125, 549, 800, 917, 1317], "author": 1, "domain": [1, 648, 1228], "specif": [1, 31, 36, 37, 108, 110, 112, 114, 120, 123, 124, 125, 129, 130, 131, 135, 149, 150, 163, 208, 210, 306, 431, 434, 681, 683, 684, 688, 818, 847, 913, 918, 1038, 1041, 1261, 1263, 1264, 1268, 1308, 1317], "capabl": [1, 37, 306], "which": [1, 7, 11, 21, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 111, 113, 120, 121, 122, 123, 124, 125, 131, 132, 134, 135, 136, 139, 143, 144, 151, 153, 162, 163, 169, 172, 177, 178, 190, 191, 192, 193, 194, 195, 201, 211, 238, 264, 269, 271, 275, 306, 317, 355, 396, 424, 428, 431, 442, 451, 457, 478, 480, 484, 487, 489, 490, 491, 539, 549, 551, 560, 562, 608, 611, 612, 613, 614, 615, 617, 618, 619, 663, 686, 725, 742, 743, 745, 746, 747, 787, 788, 790, 800, 816, 818, 825, 828, 830, 839, 840, 842, 843, 848, 866, 870, 882, 883, 913, 958, 999, 1031, 1035, 1038, 1049, 1059, 1064, 1065, 1081, 1085, 1090, 1094, 1095, 1096, 1097, 1147, 1201, 1243, 1266, 1289, 1308, 1316, 1317], "mai": [1, 36, 38, 43, 44, 45, 46, 60, 61, 62, 70, 72, 108, 110, 111, 112, 114, 120, 121, 122, 124, 126, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 143, 145, 169, 175, 177, 191, 211, 214, 238, 249, 253, 265, 273, 274, 275, 306, 321, 388, 389, 396, 397, 398, 411, 424, 428, 431, 434, 442, 454, 474, 512, 537, 539, 549, 551, 559, 596, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 626, 652, 653, 655, 725, 733, 734, 737, 738, 742, 743, 745, 746, 751, 775, 777, 778, 787, 788, 800, 821, 822, 825, 832, 839, 848, 852, 853, 866, 873, 877, 885, 891, 892, 895, 901, 913, 971, 972, 992, 993, 994, 999, 1000, 1001, 1014, 1031, 1035, 1038, 1041, 1049, 1057, 1064, 1077, 1120, 1155, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1206, 1232, 1233, 1235, 1264, 1289, 1290, 1308, 1317], "exist": [1, 35, 36, 37, 54, 124, 135, 150, 270, 274, 279, 280, 306, 316, 359, 362, 363, 400, 427, 550, 800, 864, 885, 888, 889, 913, 918, 1003, 1034, 1154, 1308], "belong": [1, 191, 306, 839, 913], "core": [1, 306, 1317], "cannot": [1, 98, 120, 121, 125, 126, 128, 131, 132, 154, 214, 241, 242, 282, 292, 306, 360, 454, 526, 551, 622, 643, 672, 694, 764, 800, 874, 892, 901, 913, 962, 1134, 1155, 1197, 1223, 1252, 1289, 1308], "overrid": [1, 37, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 129, 130, 131, 147, 148, 152, 154, 306, 550, 800, 913, 1154, 1308], "str": [1, 3, 4, 6, 7, 10, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 69, 72, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 147, 148, 150, 151, 152, 153, 157, 162, 163, 166, 169, 170, 171, 172, 173, 175, 176, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 194, 195, 197, 199, 203, 205, 206, 208, 210, 211, 215, 217, 219, 220, 221, 222, 224, 225, 227, 229, 231, 233, 234, 236, 237, 238, 239, 240, 242, 243, 246, 249, 251, 252, 253, 254, 255, 257, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 314, 315, 316, 338, 343, 355, 359, 360, 361, 362, 363, 365, 367, 378, 389, 391, 393, 401, 424, 427, 428, 431, 434, 442, 451, 454, 456, 460, 462, 466, 467, 470, 476, 478, 503, 504, 514, 515, 516, 532, 536, 539, 548, 551, 559, 561, 562, 563, 565, 572, 573, 574, 575, 576, 577, 578, 579, 585, 588, 592, 594, 596, 602, 603, 605, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 627, 634, 635, 692, 693, 694, 696, 705, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 796, 800, 807, 816, 818, 821, 822, 823, 825, 826, 827, 828, 830, 831, 832, 835, 838, 839, 840, 842, 843, 845, 847, 848, 857, 858, 862, 864, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 882, 883, 884, 885, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 917, 918, 921, 941, 946, 958, 963, 967, 968, 993, 994, 1004, 1031, 1034, 1035, 1038, 1041, 1049, 1059, 1063, 1067, 1111, 1112, 1113, 1124, 1147, 1164, 1165, 1173, 1178, 1179, 1201, 1202, 1272, 1274, 1275, 1285, 1286, 1287, 1296, 1308, 1313, 1316, 1317], "dt": [1, 54, 125, 131, 238, 275, 306, 608, 747, 800, 809, 866, 913, 918, 1315], "attempt": [1, 391, 800, 826, 913], "do": [1, 37, 43, 44, 45, 46, 54, 60, 61, 110, 111, 114, 120, 134, 143, 144, 145, 146, 169, 177, 191, 192, 194, 195, 207, 211, 229, 238, 259, 270, 273, 306, 388, 396, 509, 549, 608, 676, 677, 678, 773, 776, 791, 800, 817, 821, 822, 825, 830, 839, 840, 842, 843, 848, 852, 853, 862, 866, 874, 913, 918, 992, 999, 1064, 1117, 1256, 1257, 1258, 1298, 1308], "so": [1, 122, 123, 134, 154, 189, 191, 192, 194, 195, 229, 238, 306, 332, 342, 391, 478, 514, 539, 551, 608, 664, 665, 666, 676, 677, 678, 800, 826, 839, 840, 842, 843, 866, 913, 945, 1122, 1244, 1245, 1246, 1256, 1257, 1258], "rais": [1, 16, 17, 21, 36, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 125, 131, 134, 143, 145, 159, 229, 239, 306, 342, 360, 396, 427, 428, 442, 512, 514, 537, 559, 596, 639, 643, 650, 663, 681, 683, 684, 686, 688, 744, 761, 800, 945, 962, 999, 1034, 1035, 1049, 1120, 1122, 1145, 1173, 1219, 1223, 1230, 1243, 1261, 1263, 1264, 1266, 1268, 1289, 1298, 1308], "an": [1, 31, 34, 35, 36, 37, 43, 44, 45, 55, 57, 58, 70, 71, 92, 95, 97, 98, 101, 103, 108, 110, 111, 114, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 136, 137, 148, 150, 152, 163, 164, 165, 175, 178, 183, 191, 192, 194, 195, 207, 208, 209, 211, 214, 225, 229, 235, 236, 238, 239, 253, 259, 268, 270, 273, 274, 279, 282, 292, 306, 316, 339, 342, 354, 360, 366, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 396, 400, 401, 424, 427, 431, 445, 451, 459, 460, 466, 467, 470, 493, 505, 506, 509, 512, 514, 537, 538, 539, 548, 549, 551, 560, 562, 571, 572, 595, 596, 604, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 639, 643, 648, 650, 652, 681, 683, 684, 686, 688, 699, 706, 714, 720, 724, 742, 743, 745, 746, 748, 750, 753, 757, 758, 759, 760, 761, 773, 775, 776, 779, 782, 787, 788, 790, 791, 796, 800, 818, 819, 820, 822, 825, 830, 832, 835, 839, 840, 842, 843, 848, 853, 862, 866, 874, 877, 885, 888, 890, 892, 901, 913, 917, 918, 942, 945, 957, 962, 967, 976, 978, 979, 980, 984, 985, 986, 987, 988, 989, 990, 991, 992, 999, 1003, 1038, 1052, 1057, 1059, 1091, 1103, 1113, 1114, 1117, 1120, 1122, 1145, 1146, 1155, 1184, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1198, 1201, 1219, 1223, 1228, 1230, 1232, 1261, 1263, 1264, 1266, 1268, 1289, 1298, 1308, 1316], "attributeerror": 1, "howev": [1, 111, 122, 175, 214, 264, 306, 1057, 1308], "can": [1, 15, 28, 37, 42, 52, 53, 54, 60, 61, 68, 69, 71, 83, 91, 92, 111, 120, 121, 122, 125, 126, 131, 132, 134, 137, 139, 140, 148, 149, 150, 152, 154, 157, 162, 164, 172, 173, 183, 190, 191, 192, 193, 194, 195, 203, 205, 207, 214, 225, 229, 238, 240, 241, 244, 252, 264, 268, 269, 270, 273, 279, 282, 292, 306, 309, 317, 321, 355, 365, 379, 382, 388, 391, 396, 420, 421, 424, 427, 428, 431, 434, 442, 451, 457, 460, 478, 493, 509, 539, 549, 551, 559, 562, 568, 571, 572, 574, 576, 578, 579, 588, 594, 596, 601, 608, 611, 612, 613, 614, 615, 617, 618, 619, 624, 627, 629, 632, 635, 640, 649, 654, 664, 665, 666, 676, 677, 678, 681, 696, 705, 723, 725, 751, 753, 757, 758, 764, 790, 796, 799, 800, 811, 816, 817, 821, 822, 826, 828, 830, 832, 839, 840, 842, 843, 866, 868, 870, 874, 876, 877, 882, 888, 891, 892, 913, 918, 925, 958, 992, 993, 999, 1027, 1028, 1031, 1034, 1035, 1038, 1041, 1049, 1059, 1065, 1081, 1117, 1147, 1155, 1160, 1173, 1177, 1179, 1198, 1201, 1203, 1207, 1210, 1213, 1220, 1221, 1222, 1229, 1234, 1244, 1245, 1246, 1256, 1257, 1258, 1261, 1264, 1288, 1289, 1308, 1312, 1316], "other": [1, 21, 33, 37, 38, 42, 52, 61, 119, 120, 121, 122, 125, 134, 143, 144, 145, 146, 172, 174, 177, 180, 184, 210, 211, 220, 221, 239, 241, 244, 245, 268, 274, 277, 279, 280, 304, 306, 314, 318, 320, 331, 332, 371, 393, 448, 449, 460, 464, 469, 471, 478, 483, 496, 503, 527, 528, 529, 530, 546, 555, 558, 567, 569, 582, 583, 587, 603, 635, 695, 703, 706, 713, 715, 717, 723, 726, 727, 728, 736, 740, 742, 747, 766, 768, 771, 779, 782, 784, 800, 812, 822, 828, 835, 847, 848, 857, 858, 868, 869, 885, 888, 889, 890, 913, 918, 924, 977, 996, 1056, 1064, 1089, 1111, 1135, 1136, 1137, 1138, 1179, 1200, 1291, 1299, 1307, 1308], "onli": [1, 11, 14, 21, 31, 34, 37, 43, 47, 49, 53, 54, 59, 62, 92, 120, 121, 122, 124, 125, 126, 128, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 152, 157, 160, 172, 177, 191, 194, 196, 208, 211, 214, 215, 217, 222, 229, 238, 240, 241, 255, 261, 263, 264, 274, 275, 292, 306, 315, 317, 319, 321, 332, 370, 371, 391, 396, 424, 432, 454, 463, 472, 493, 549, 551, 571, 572, 573, 574, 575, 576, 577, 578, 579, 588, 594, 601, 611, 612, 613, 614, 615, 617, 618, 619, 640, 666, 696, 708, 725, 742, 743, 764, 800, 821, 826, 828, 839, 840, 842, 843, 844, 848, 851, 866, 885, 901, 913, 917, 922, 923, 924, 974, 977, 993, 999, 1031, 1064, 1070, 1075, 1091, 1155, 1173, 1177, 1220, 1246, 1284, 1287, 1308, 1316, 1317], "gener": [1, 59, 122, 123, 141, 147, 148, 149, 150, 152, 159, 167, 229, 242, 262, 264, 270, 306, 526, 622, 628, 720, 742, 745, 757, 758, 760, 776, 787, 788, 800, 913, 1134, 1197, 1209, 1285, 1308, 1317], "userwarn": 1, "pl": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1241, 1242, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1308, 1312, 1316, 1317], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 53, 55, 56, 57, 58, 122, 148, 149, 150, 152, 157, 228, 270, 306, 314, 592, 648, 678, 713, 763, 800, 822, 861, 913, 918, 1228, 1317], "__init__": [1, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 147, 1316], "self": [1, 48, 49, 50, 52, 55, 56, 57, 58, 60, 61, 164, 165, 177, 197, 199, 200, 201, 213, 215, 217, 219, 220, 222, 226, 227, 229, 231, 232, 234, 235, 236, 242, 250, 251, 253, 254, 255, 257, 262, 270, 272, 275, 276, 277, 281, 282, 283, 306, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 358, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 566, 567, 568, 569, 570, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 796, 800, 815, 816, 817, 818, 820, 821, 822, 824, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 913, 924, 925, 967, 980, 1064, 1068, 1078, 1153, 1154, 1155, 1166, 1170, 1171, 1176, 1179, 1198, 1201, 1203, 1215, 1295, 1299, 1308], "_expr": [1, 56], "hello": [1, 21, 48, 51, 676, 677, 678, 1124, 1256, 1257, 1258], "return": [1, 6, 7, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99, 102, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 149, 154, 155, 160, 162, 164, 167, 168, 171, 173, 175, 176, 177, 178, 179, 182, 183, 185, 186, 189, 190, 191, 193, 194, 197, 199, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 223, 224, 225, 227, 228, 229, 233, 238, 239, 240, 241, 242, 253, 256, 257, 258, 264, 265, 268, 269, 270, 271, 275, 279, 280, 287, 289, 291, 292, 295, 300, 306, 317, 319, 323, 324, 325, 326, 327, 328, 331, 332, 336, 337, 338, 340, 342, 343, 354, 359, 360, 361, 362, 363, 364, 365, 374, 375, 376, 377, 378, 389, 390, 396, 397, 399, 402, 403, 404, 406, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 428, 429, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 451, 456, 467, 468, 470, 473, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 497, 498, 501, 502, 504, 510, 512, 514, 515, 516, 518, 519, 526, 536, 537, 538, 545, 549, 550, 551, 560, 562, 563, 568, 592, 596, 598, 602, 603, 604, 606, 607, 622, 623, 629, 630, 631, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 660, 661, 662, 667, 668, 670, 671, 672, 673, 682, 686, 691, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 713, 714, 718, 720, 721, 722, 723, 724, 725, 730, 732, 741, 742, 743, 744, 745, 746, 747, 750, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 773, 776, 779, 782, 785, 786, 787, 788, 790, 791, 800, 816, 819, 821, 822, 824, 825, 829, 830, 832, 837, 839, 840, 842, 843, 844, 847, 850, 851, 853, 861, 862, 864, 866, 870, 874, 880, 881, 882, 883, 888, 889, 896, 898, 900, 904, 909, 913, 917, 922, 923, 924, 932, 933, 935, 936, 937, 938, 939, 940, 941, 943, 945, 946, 957, 959, 961, 962, 963, 966, 969, 972, 976, 993, 994, 999, 1000, 1002, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1059, 1063, 1064, 1069, 1072, 1074, 1076, 1077, 1083, 1085, 1086, 1087, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1118, 1120, 1122, 1123, 1124, 1126, 1127, 1134, 1144, 1145, 1146, 1153, 1154, 1155, 1160, 1167, 1173, 1179, 1180, 1181, 1182, 1183, 1197, 1199, 1200, 1210, 1218, 1219, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1247, 1248, 1250, 1251, 1252, 1253, 1262, 1266, 1271, 1279, 1281, 1284, 1290, 1292, 1294, 1295, 1296, 1299, 1308, 1316, 1317], "lit": [1, 316, 359, 478, 493, 571, 650, 733, 737, 751, 773, 776, 791, 800, 1067, 1308], "alia": [1, 13, 54, 56, 58, 90, 191, 213, 229, 234, 238, 253, 272, 279, 282, 306, 314, 318, 359, 360, 361, 362, 363, 364, 378, 379, 380, 381, 382, 389, 392, 397, 398, 400, 401, 402, 403, 404, 406, 407, 408, 411, 412, 415, 417, 419, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 439, 441, 442, 443, 444, 445, 448, 449, 462, 464, 469, 471, 476, 478, 482, 486, 493, 496, 498, 522, 534, 541, 546, 551, 555, 556, 557, 558, 560, 564, 567, 569, 571, 582, 583, 587, 589, 593, 596, 599, 601, 621, 623, 639, 640, 642, 643, 645, 647, 648, 650, 651, 655, 656, 666, 667, 670, 671, 672, 673, 674, 679, 680, 682, 692, 693, 694, 695, 703, 704, 706, 712, 713, 720, 721, 722, 726, 727, 728, 742, 745, 747, 748, 751, 752, 757, 760, 763, 764, 775, 782, 787, 790, 800, 839, 845, 851, 866, 877, 884, 888, 892, 913, 993, 1000, 1001, 1004, 1007, 1009, 1010, 1011, 1017, 1018, 1021, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1106, 1173, 1178, 1227, 1228, 1252, 1253, 1308], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 48, 51, 640, 666, 676, 677, 678, 689, 1124, 1220, 1246, 1256, 1257, 1258, 1269], "select": [1, 9, 35, 47, 48, 49, 54, 55, 56, 57, 118, 120, 121, 122, 123, 124, 126, 128, 132, 134, 140, 149, 161, 206, 207, 211, 214, 225, 228, 239, 245, 251, 253, 266, 272, 275, 282, 306, 313, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 340, 345, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 367, 369, 370, 374, 375, 376, 377, 388, 390, 392, 393, 394, 395, 398, 400, 401, 411, 420, 421, 424, 427, 435, 436, 437, 438, 439, 440, 441, 442, 445, 447, 450, 452, 453, 454, 455, 456, 457, 461, 463, 465, 468, 472, 474, 475, 476, 477, 479, 480, 484, 492, 493, 494, 495, 497, 509, 510, 539, 542, 543, 544, 545, 549, 551, 552, 553, 554, 566, 568, 570, 571, 573, 575, 577, 580, 581, 585, 586, 587, 588, 590, 591, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 610, 616, 620, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 649, 650, 681, 692, 694, 697, 701, 702, 704, 705, 707, 708, 709, 710, 711, 714, 716, 719, 721, 722, 723, 724, 727, 729, 730, 731, 732, 735, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 765, 767, 769, 770, 772, 775, 776, 780, 781, 782, 783, 785, 789, 796, 800, 815, 823, 848, 861, 869, 870, 875, 877, 884, 890, 892, 913, 918, 1034, 1071, 1117, 1198, 1201, 1214, 1234, 1261, 1280, 1308, 1316], "shape": [1, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 105, 108, 109, 110, 111, 112, 113, 114, 115, 120, 129, 130, 134, 140, 150, 152, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 183, 185, 186, 188, 190, 191, 196, 197, 199, 201, 202, 203, 205, 206, 207, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 242, 244, 248, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 566, 567, 568, 569, 570, 571, 572, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 815, 816, 818, 819, 821, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 872, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 920, 921, 924, 926, 927, 928, 929, 930, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 973, 974, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1017, 1018, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1085, 1087, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1101, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1160, 1167, 1169, 1170, 1171, 1173, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1205, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1241, 1242, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1277, 1279, 1282, 1283, 1285, 1286, 1287, 1291, 1292, 1293, 1294, 1295, 1296, 1299, 1308, 1316], "3": [1, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 92, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 125, 129, 130, 131, 134, 140, 142, 143, 144, 145, 146, 149, 150, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 183, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 314, 315, 316, 317, 319, 331, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 377, 378, 379, 380, 381, 382, 388, 389, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 407, 408, 410, 411, 412, 414, 415, 417, 419, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 542, 543, 544, 545, 546, 548, 549, 551, 567, 568, 569, 570, 571, 572, 574, 576, 578, 579, 582, 585, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 632, 634, 635, 636, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 655, 656, 659, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 682, 683, 688, 692, 693, 694, 695, 696, 698, 704, 705, 708, 709, 710, 712, 713, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 920, 921, 924, 926, 928, 929, 930, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 973, 974, 975, 980, 981, 982, 983, 984, 985, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1007, 1010, 1011, 1013, 1015, 1016, 1017, 1020, 1023, 1024, 1026, 1032, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1049, 1051, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1105, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1220, 1221, 1223, 1224, 1225, 1227, 1228, 1229, 1231, 1232, 1235, 1236, 1239, 1244, 1245, 1246, 1247, 1249, 1250, 1254, 1255, 1262, 1263, 1268, 1272, 1274, 1275, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1308, 1316, 1317], "1": [1, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 150, 152, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 664, 665, 672, 673, 674, 676, 677, 678, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 796, 800, 815, 816, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 920, 921, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 966, 967, 971, 973, 974, 975, 977, 980, 981, 982, 984, 985, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1109, 1110, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1227, 1229, 1230, 1232, 1234, 1235, 1236, 1244, 1245, 1252, 1253, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1308, 1312, 1316, 1317], "2": [1, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 149, 150, 152, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 313, 314, 315, 316, 318, 320, 322, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 364, 365, 366, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 388, 389, 392, 393, 396, 397, 399, 400, 401, 402, 403, 404, 406, 410, 414, 419, 420, 421, 424, 425, 426, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 563, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 632, 633, 634, 635, 636, 638, 640, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 772, 775, 779, 780, 781, 782, 783, 785, 788, 789, 790, 796, 800, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 845, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 920, 921, 924, 927, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 966, 971, 973, 974, 975, 976, 980, 981, 983, 985, 986, 987, 992, 993, 994, 995, 996, 999, 1000, 1003, 1005, 1006, 1009, 1011, 1015, 1016, 1017, 1020, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1035, 1039, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1104, 1105, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1209, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1222, 1227, 1229, 1230, 1231, 1232, 1234, 1236, 1244, 1245, 1252, 1253, 1256, 1257, 1258, 1261, 1262, 1264, 1265, 1266, 1267, 1269, 1270, 1272, 1274, 1275, 1277, 1278, 1279, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1308, 1312, 1316, 1317], "column_0": [1, 214, 270, 306], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 37, 55, 209, 306, 672, 673, 1252, 1253], "splitfram": [1, 55], "df": [1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 55, 56, 79, 109, 110, 111, 112, 113, 114, 115, 121, 122, 123, 134, 148, 150, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 796, 800, 839, 866, 870, 884, 885, 898, 901, 909, 913, 918, 1034, 1059, 1234, 1252, 1253, 1286, 1308, 1317], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 14, 36, 37, 47, 51, 54, 55, 57, 60, 61, 63, 69, 83, 108, 110, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 148, 149, 150, 152, 166, 170, 173, 175, 176, 180, 188, 190, 191, 199, 208, 224, 227, 239, 240, 241, 244, 252, 260, 261, 268, 270, 271, 272, 273, 279, 284, 285, 306, 315, 343, 354, 355, 356, 389, 396, 456, 462, 467, 475, 483, 547, 549, 551, 560, 561, 588, 596, 602, 604, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 634, 635, 648, 671, 692, 694, 699, 703, 723, 725, 727, 743, 746, 748, 756, 758, 761, 764, 780, 782, 788, 800, 823, 829, 831, 835, 838, 839, 868, 876, 883, 884, 888, 890, 893, 894, 913, 918, 946, 957, 958, 959, 975, 993, 999, 1057, 1063, 1068, 1071, 1073, 1077, 1078, 1089, 1173, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1220, 1228, 1246, 1251, 1280, 1288, 1291, 1308, 1317], "with_row_index": [1, 281, 306, 611, 612, 614, 617, 618, 619, 800, 891, 913, 1198, 1308], "name": [1, 19, 23, 25, 32, 34, 35, 37, 40, 43, 48, 49, 50, 51, 52, 55, 56, 57, 58, 62, 83, 96, 108, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 145, 146, 147, 148, 150, 151, 152, 153, 162, 163, 166, 170, 171, 172, 176, 180, 181, 182, 186, 187, 189, 190, 193, 206, 207, 208, 210, 211, 214, 216, 218, 220, 221, 223, 227, 229, 233, 239, 240, 241, 243, 244, 245, 252, 253, 256, 260, 262, 264, 267, 268, 269, 270, 271, 272, 273, 274, 279, 280, 281, 282, 283, 284, 291, 306, 316, 321, 355, 359, 360, 362, 363, 365, 389, 431, 434, 454, 460, 478, 487, 489, 490, 491, 493, 539, 548, 551, 559, 561, 564, 588, 594, 596, 605, 635, 648, 649, 664, 665, 692, 694, 696, 705, 714, 715, 716, 717, 719, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 735, 736, 739, 740, 749, 750, 755, 756, 759, 765, 766, 767, 768, 769, 770, 771, 772, 774, 777, 778, 779, 781, 782, 783, 784, 785, 789, 790, 796, 800, 816, 818, 823, 827, 828, 831, 835, 838, 841, 847, 848, 857, 858, 864, 867, 868, 869, 870, 876, 877, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 900, 913, 917, 918, 921, 958, 976, 993, 1038, 1041, 1069, 1147, 1173, 1178, 1227, 1228, 1229, 1244, 1245, 1272, 1275, 1285, 1286, 1290, 1308, 1316, 1317], "n": [1, 13, 14, 18, 26, 34, 41, 43, 49, 50, 55, 56, 57, 58, 69, 71, 117, 120, 121, 125, 130, 134, 160, 164, 177, 185, 191, 197, 208, 209, 213, 214, 240, 241, 242, 248, 249, 254, 257, 258, 261, 263, 276, 289, 291, 300, 306, 322, 350, 355, 364, 365, 388, 392, 396, 398, 400, 407, 433, 445, 457, 460, 468, 473, 498, 507, 513, 515, 526, 527, 531, 534, 536, 539, 541, 589, 592, 602, 617, 619, 622, 625, 626, 632, 637, 651, 655, 656, 664, 672, 673, 676, 677, 682, 684, 698, 700, 704, 705, 706, 711, 713, 729, 731, 742, 743, 744, 745, 746, 747, 753, 755, 773, 776, 777, 778, 781, 785, 789, 791, 800, 819, 821, 837, 839, 844, 851, 872, 873, 878, 880, 881, 886, 898, 900, 909, 913, 918, 953, 958, 966, 976, 992, 995, 999, 1001, 1003, 1010, 1040, 1052, 1064, 1065, 1072, 1076, 1106, 1115, 1121, 1123, 1134, 1135, 1139, 1144, 1147, 1169, 1192, 1194, 1197, 1205, 1206, 1213, 1217, 1231, 1235, 1236, 1244, 1245, 1252, 1253, 1262, 1264, 1279, 1281, 1287, 1292, 1297, 1308, 1316, 1317], "filter": [1, 55, 124, 134, 135, 140, 172, 203, 204, 205, 210, 229, 292, 306, 559, 561, 645, 674, 712, 751, 790, 800, 828, 832, 845, 847, 877, 901, 913, 918, 1201, 1308], "col": [1, 13, 34, 37, 43, 54, 55, 56, 57, 112, 114, 134, 148, 150, 180, 190, 191, 204, 206, 214, 225, 228, 229, 238, 239, 244, 252, 268, 272, 273, 279, 284, 306, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 374, 375, 376, 378, 379, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 482, 483, 486, 487, 489, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 573, 575, 577, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 697, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 719, 723, 724, 726, 727, 728, 730, 732, 735, 741, 744, 747, 750, 751, 752, 753, 754, 755, 756, 759, 765, 767, 769, 770, 772, 774, 775, 781, 783, 785, 786, 789, 790, 800, 835, 838, 839, 845, 861, 866, 868, 876, 877, 884, 888, 890, 893, 913, 918, 1031, 1034, 1117, 1180, 1198, 1201, 1234, 1261, 1308, 1317], "0": [1, 8, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 37, 42, 46, 47, 52, 54, 55, 56, 58, 62, 70, 79, 92, 109, 120, 121, 122, 123, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 142, 147, 148, 149, 150, 152, 155, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 173, 174, 178, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 229, 230, 231, 234, 235, 236, 240, 241, 242, 243, 244, 249, 251, 252, 253, 254, 255, 256, 258, 262, 263, 264, 265, 266, 268, 270, 273, 275, 276, 279, 281, 282, 284, 286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 306, 313, 315, 316, 318, 321, 323, 324, 325, 326, 327, 328, 331, 332, 333, 336, 337, 339, 342, 352, 355, 357, 366, 369, 370, 372, 373, 374, 375, 376, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 396, 402, 403, 405, 408, 409, 412, 413, 415, 416, 417, 418, 422, 423, 427, 428, 429, 430, 432, 437, 438, 440, 441, 442, 445, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 463, 464, 466, 468, 469, 471, 472, 474, 477, 480, 481, 484, 485, 487, 488, 489, 490, 491, 493, 494, 496, 501, 502, 505, 506, 509, 512, 513, 514, 519, 521, 522, 534, 537, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 552, 553, 554, 560, 565, 566, 567, 569, 571, 580, 581, 582, 583, 584, 586, 587, 589, 592, 593, 594, 596, 597, 598, 599, 603, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 629, 630, 631, 632, 636, 637, 641, 642, 647, 648, 650, 653, 657, 658, 659, 660, 663, 668, 669, 675, 681, 684, 695, 696, 697, 699, 700, 701, 702, 703, 706, 711, 712, 714, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 733, 737, 739, 740, 742, 744, 748, 751, 757, 758, 760, 762, 764, 767, 768, 769, 774, 775, 786, 787, 788, 789, 790, 791, 796, 800, 815, 818, 819, 820, 824, 825, 827, 829, 833, 834, 837, 838, 839, 840, 841, 842, 843, 846, 847, 850, 852, 853, 856, 860, 862, 863, 867, 868, 873, 874, 876, 877, 878, 881, 886, 888, 890, 891, 892, 893, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 918, 925, 926, 927, 928, 929, 930, 931, 932, 934, 936, 939, 945, 955, 958, 960, 967, 970, 971, 973, 974, 976, 978, 979, 981, 982, 983, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1006, 1008, 1011, 1012, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1025, 1029, 1030, 1034, 1035, 1036, 1037, 1044, 1045, 1047, 1048, 1049, 1052, 1055, 1058, 1059, 1060, 1061, 1066, 1070, 1072, 1075, 1077, 1080, 1082, 1085, 1086, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1100, 1102, 1103, 1104, 1109, 1110, 1113, 1114, 1117, 1120, 1121, 1122, 1127, 1129, 1130, 1142, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1169, 1173, 1174, 1175, 1179, 1183, 1184, 1185, 1187, 1188, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1199, 1200, 1202, 1206, 1210, 1211, 1212, 1213, 1216, 1217, 1221, 1222, 1227, 1228, 1230, 1233, 1234, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1261, 1264, 1280, 1281, 1282, 1283, 1285, 1288, 1289, 1290, 1291, 1295, 1297, 1298, 1308, 1317], "drop": [1, 111, 171, 172, 214, 271, 279, 306, 392, 394, 395, 507, 508, 596, 800, 828, 883, 888, 913, 995, 997, 998, 1115, 1116, 1173, 1308], "aaa": [1, 37, 306, 639, 650, 692, 694, 1219, 1230], "bbb": [1, 37, 306, 692, 694, 918], "ccc": [1, 37, 306, 692, 694], "ddd": [1, 37, 306, 692, 694], "eee": [1, 37, 306, 918], "fff": 1, "schema": [1, 15, 29, 32, 35, 36, 47, 55, 56, 57, 62, 103, 104, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 148, 150, 160, 164, 165, 173, 175, 209, 214, 221, 225, 264, 268, 306, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 403, 538, 539, 559, 573, 575, 577, 652, 653, 713, 782, 800, 819, 820, 829, 852, 853, 858, 870, 895, 901, 913, 918, 980, 1232, 1233, 1308], "txt": [1, 13, 134, 639, 650, 1230], "string": [1, 3, 4, 6, 7, 13, 15, 16, 17, 21, 32, 34, 35, 37, 40, 41, 43, 47, 53, 66, 69, 72, 83, 90, 91, 92, 111, 115, 120, 121, 122, 123, 134, 143, 144, 145, 146, 147, 148, 149, 152, 156, 162, 163, 173, 175, 183, 189, 190, 191, 193, 211, 227, 229, 238, 241, 243, 244, 245, 252, 263, 269, 270, 273, 275, 279, 280, 283, 284, 306, 314, 338, 343, 360, 361, 362, 365, 368, 424, 428, 431, 434, 442, 451, 454, 456, 462, 466, 478, 516, 562, 563, 588, 592, 603, 608, 611, 612, 613, 614, 615, 617, 618, 619, 635, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 693, 705, 713, 715, 717, 723, 726, 727, 728, 736, 740, 742, 743, 745, 746, 752, 766, 768, 771, 779, 782, 784, 787, 788, 790, 800, 812, 816, 818, 829, 830, 838, 839, 841, 848, 866, 867, 868, 869, 870, 876, 882, 888, 889, 893, 913, 918, 946, 962, 963, 964, 969, 970, 1031, 1035, 1038, 1041, 1049, 1059, 1063, 1081, 1102, 1124, 1179, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1287, 1308, 1317], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 893, 894, 897, 899, 902, 903, 904, 905, 906, 907, 908], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 13, 57, 191, 228, 234, 238, 268, 273, 280, 306, 314, 316, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 348, 349, 350, 351, 355, 360, 361, 366, 371, 378, 379, 380, 381, 382, 389, 392, 396, 397, 399, 402, 403, 404, 406, 407, 408, 410, 412, 414, 415, 417, 419, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 443, 444, 446, 448, 449, 451, 458, 459, 464, 469, 471, 472, 477, 478, 482, 483, 486, 487, 489, 490, 491, 493, 496, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 546, 548, 551, 567, 569, 571, 572, 574, 576, 578, 579, 582, 583, 584, 588, 589, 592, 593, 594, 596, 599, 603, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 621, 625, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 685, 686, 687, 689, 690, 691, 693, 695, 696, 703, 706, 713, 715, 717, 725, 726, 728, 733, 734, 736, 741, 743, 744, 748, 758, 763, 766, 768, 771, 780, 784, 786, 788, 790, 796, 800, 839, 845, 861, 866, 889, 913, 918, 993, 1034, 1173, 1308], "tp": [1, 57], "cast": [1, 36, 56, 57, 108, 110, 111, 114, 143, 144, 145, 146, 183, 191, 192, 194, 195, 228, 238, 268, 279, 306, 320, 381, 382, 398, 431, 434, 445, 587, 592, 601, 608, 652, 653, 654, 691, 697, 703, 728, 780, 800, 839, 840, 842, 843, 861, 866, 888, 913, 917, 918, 970, 972, 986, 987, 1001, 1038, 1041, 1052, 1177, 1232, 1233, 1234, 1271, 1278, 1286, 1291, 1308], "int64": [1, 36, 37, 40, 56, 57, 62, 63, 83, 120, 129, 173, 183, 191, 192, 194, 195, 228, 238, 243, 259, 265, 306, 336, 337, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 381, 382, 435, 436, 437, 438, 439, 440, 441, 445, 451, 454, 549, 551, 573, 575, 577, 592, 601, 608, 652, 686, 697, 703, 720, 749, 757, 758, 761, 776, 782, 800, 829, 839, 840, 842, 843, 861, 866, 867, 870, 913, 939, 940, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 986, 987, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1054, 1056, 1059, 1155, 1177, 1200, 1266, 1278, 1289, 1290, 1291, 1308], "int8": [1, 57, 83, 183, 306, 354, 355, 381, 382, 404, 408, 417, 419, 426, 429, 443, 444, 538, 697, 773, 776, 791, 800, 957, 958, 986, 987, 995, 1007, 1011, 1024, 1026, 1033, 1036, 1050, 1051, 1146, 1181, 1278, 1295, 1308], "int16": [1, 57, 268, 306, 381, 382, 425, 697, 800, 918, 986, 987, 1032, 1278, 1287, 1308], "int32": [1, 57, 62, 108, 111, 149, 150, 191, 192, 194, 195, 209, 238, 306, 341, 342, 344, 366, 399, 411, 412, 414, 415, 422, 446, 451, 606, 608, 703, 776, 800, 839, 840, 842, 843, 866, 913, 918, 941, 944, 945, 947, 1002, 1014, 1018, 1020, 1021, 1029, 1053, 1059, 1153, 1182, 1291, 1308], "b": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 57, 62, 83, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 125, 159, 161, 162, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 183, 185, 187, 188, 189, 190, 191, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 210, 212, 215, 217, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 236, 237, 239, 240, 241, 242, 243, 244, 248, 251, 252, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 306, 314, 316, 317, 319, 320, 331, 333, 338, 343, 358, 359, 360, 361, 362, 363, 365, 366, 377, 389, 393, 431, 434, 454, 456, 458, 459, 460, 462, 465, 472, 475, 477, 478, 480, 484, 487, 489, 490, 491, 493, 497, 503, 509, 516, 527, 528, 529, 530, 548, 549, 551, 556, 568, 571, 572, 573, 574, 575, 576, 577, 585, 586, 588, 592, 594, 596, 599, 603, 605, 607, 627, 633, 635, 643, 646, 650, 652, 664, 665, 693, 696, 705, 708, 712, 714, 715, 716, 717, 719, 723, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 777, 778, 781, 782, 783, 784, 785, 789, 800, 815, 816, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 847, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 921, 924, 946, 961, 962, 963, 964, 965, 969, 971, 972, 993, 996, 1038, 1041, 1055, 1056, 1057, 1064, 1067, 1081, 1089, 1102, 1111, 1135, 1136, 1137, 1138, 1173, 1178, 1223, 1226, 1230, 1232, 1244, 1245, 1272, 1274, 1275, 1277, 1290, 1294, 1308, 1316], "4": [1, 9, 14, 18, 26, 32, 34, 36, 37, 38, 39, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 125, 134, 142, 152, 159, 161, 162, 163, 164, 165, 168, 172, 176, 177, 178, 179, 183, 185, 186, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 216, 217, 218, 220, 221, 223, 224, 225, 227, 228, 229, 230, 234, 238, 240, 241, 247, 248, 252, 253, 256, 257, 259, 260, 261, 262, 267, 269, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 284, 285, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 313, 314, 315, 316, 318, 320, 333, 340, 341, 342, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 357, 358, 364, 365, 366, 369, 370, 371, 377, 378, 379, 380, 381, 382, 388, 390, 393, 400, 403, 404, 414, 425, 426, 427, 428, 429, 431, 434, 436, 439, 441, 442, 444, 448, 449, 451, 455, 456, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 490, 491, 493, 496, 497, 498, 506, 507, 508, 509, 510, 512, 513, 515, 524, 526, 527, 528, 529, 530, 531, 532, 536, 538, 543, 546, 548, 549, 551, 567, 569, 571, 572, 574, 576, 578, 579, 582, 583, 584, 587, 588, 590, 591, 592, 593, 594, 597, 599, 603, 604, 605, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 625, 629, 633, 634, 635, 636, 639, 642, 648, 650, 651, 655, 656, 661, 662, 664, 665, 670, 671, 672, 673, 679, 680, 681, 682, 686, 691, 692, 694, 695, 696, 698, 703, 704, 705, 706, 712, 713, 715, 717, 719, 721, 722, 723, 724, 726, 728, 729, 731, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 748, 750, 751, 755, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 796, 800, 815, 816, 818, 819, 820, 821, 822, 824, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 866, 872, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 891, 892, 893, 894, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 924, 927, 934, 941, 943, 944, 945, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 966, 974, 975, 977, 992, 994, 996, 1006, 1011, 1018, 1020, 1021, 1024, 1026, 1027, 1028, 1029, 1033, 1034, 1035, 1038, 1041, 1043, 1046, 1048, 1049, 1050, 1051, 1056, 1059, 1064, 1066, 1067, 1071, 1072, 1076, 1077, 1080, 1081, 1083, 1089, 1094, 1095, 1096, 1097, 1101, 1114, 1115, 1116, 1117, 1118, 1123, 1128, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1146, 1161, 1164, 1165, 1169, 1170, 1171, 1175, 1179, 1180, 1183, 1188, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1205, 1210, 1213, 1214, 1215, 1219, 1222, 1228, 1230, 1231, 1235, 1236, 1241, 1242, 1250, 1252, 1253, 1259, 1260, 1261, 1262, 1266, 1271, 1272, 1275, 1277, 1279, 1287, 1291, 1292, 1299, 1308, 1312, 1317], "c": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 55, 57, 62, 109, 111, 113, 115, 125, 134, 148, 159, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 180, 183, 187, 188, 189, 190, 191, 197, 199, 201, 209, 210, 212, 215, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 233, 236, 237, 239, 242, 243, 244, 251, 252, 253, 254, 255, 257, 259, 262, 263, 264, 265, 266, 269, 273, 274, 276, 277, 279, 284, 288, 289, 290, 293, 294, 296, 299, 300, 306, 314, 316, 317, 319, 321, 338, 358, 365, 389, 460, 478, 493, 503, 516, 548, 551, 571, 572, 586, 588, 592, 596, 627, 672, 681, 705, 708, 715, 717, 719, 723, 726, 728, 729, 730, 731, 733, 734, 736, 750, 751, 752, 755, 756, 759, 760, 763, 765, 766, 767, 768, 769, 770, 771, 772, 781, 783, 784, 785, 789, 796, 800, 816, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 835, 838, 839, 847, 850, 857, 860, 862, 864, 865, 867, 868, 874, 875, 876, 877, 882, 885, 888, 890, 893, 897, 898, 899, 902, 903, 905, 908, 909, 913, 917, 918, 971, 993, 1081, 1102, 1111, 1173, 1252, 1261, 1275, 1294, 1308], "5": [1, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 34, 36, 38, 39, 42, 50, 52, 54, 55, 57, 58, 62, 108, 111, 112, 113, 114, 115, 117, 121, 142, 143, 145, 150, 163, 164, 165, 169, 176, 177, 178, 179, 183, 185, 186, 188, 189, 190, 191, 197, 198, 201, 202, 204, 206, 207, 208, 210, 211, 212, 213, 214, 216, 217, 218, 220, 223, 224, 225, 227, 229, 230, 231, 234, 238, 241, 247, 248, 252, 253, 256, 257, 259, 260, 261, 262, 264, 267, 268, 270, 273, 274, 275, 278, 279, 281, 282, 284, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 306, 309, 314, 315, 318, 334, 335, 340, 341, 342, 344, 346, 350, 355, 357, 364, 365, 366, 370, 371, 388, 389, 390, 392, 393, 396, 399, 400, 401, 402, 403, 408, 412, 414, 415, 417, 422, 427, 429, 431, 432, 434, 435, 441, 445, 449, 451, 453, 454, 457, 459, 463, 464, 468, 469, 471, 473, 475, 477, 478, 482, 486, 487, 489, 490, 491, 493, 496, 498, 506, 509, 510, 512, 513, 515, 518, 521, 522, 526, 527, 528, 529, 530, 531, 535, 536, 541, 567, 569, 571, 583, 587, 588, 589, 590, 591, 592, 596, 597, 599, 603, 604, 605, 607, 608, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 623, 629, 635, 642, 650, 651, 654, 655, 656, 682, 686, 695, 698, 704, 705, 706, 719, 724, 725, 726, 727, 729, 731, 733, 734, 735, 736, 741, 742, 744, 747, 748, 749, 750, 751, 755, 757, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 781, 783, 784, 785, 789, 796, 800, 818, 819, 820, 821, 822, 825, 830, 831, 832, 833, 834, 836, 837, 838, 839, 844, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 866, 872, 874, 875, 876, 877, 878, 879, 880, 885, 887, 888, 891, 892, 893, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 924, 927, 931, 934, 937, 938, 941, 943, 944, 945, 947, 949, 953, 958, 959, 960, 966, 975, 977, 984, 992, 993, 994, 995, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1020, 1034, 1036, 1038, 1039, 1041, 1042, 1048, 1050, 1051, 1052, 1056, 1059, 1061, 1064, 1065, 1076, 1077, 1080, 1081, 1087, 1093, 1114, 1117, 1118, 1123, 1126, 1130, 1134, 1135, 1136, 1137, 1138, 1139, 1143, 1144, 1149, 1153, 1161, 1169, 1170, 1171, 1173, 1174, 1175, 1179, 1180, 1183, 1185, 1186, 1187, 1189, 1190, 1193, 1197, 1199, 1210, 1213, 1216, 1222, 1230, 1231, 1234, 1235, 1262, 1266, 1279, 1292, 1295, 1299, 1308, 1317], "6": [1, 9, 14, 32, 34, 36, 37, 38, 39, 40, 41, 42, 50, 52, 53, 55, 57, 62, 91, 92, 108, 111, 112, 113, 114, 125, 129, 130, 142, 163, 166, 170, 171, 172, 173, 174, 176, 177, 180, 185, 186, 187, 188, 189, 191, 197, 199, 201, 202, 204, 206, 207, 208, 210, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 248, 251, 252, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 270, 272, 273, 275, 276, 277, 279, 281, 282, 289, 299, 300, 306, 309, 314, 318, 340, 341, 342, 344, 350, 358, 365, 366, 381, 382, 393, 396, 400, 404, 419, 424, 425, 426, 437, 438, 440, 443, 444, 447, 449, 458, 459, 465, 468, 473, 475, 477, 498, 499, 500, 510, 513, 527, 528, 529, 530, 534, 551, 583, 587, 595, 598, 599, 600, 604, 606, 608, 611, 612, 613, 614, 615, 617, 618, 619, 623, 635, 642, 646, 655, 656, 686, 695, 698, 705, 713, 715, 717, 725, 733, 734, 735, 741, 744, 748, 751, 757, 763, 764, 768, 783, 796, 800, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 839, 844, 846, 847, 849, 851, 853, 857, 860, 862, 864, 866, 867, 868, 870, 872, 874, 875, 876, 877, 880, 884, 887, 888, 891, 892, 898, 908, 909, 913, 918, 941, 943, 944, 945, 947, 953, 975, 981, 983, 986, 987, 996, 999, 1031, 1051, 1056, 1077, 1107, 1108, 1118, 1121, 1135, 1136, 1137, 1138, 1142, 1161, 1172, 1175, 1180, 1182, 1188, 1190, 1192, 1194, 1199, 1222, 1226, 1235, 1266, 1278, 1308, 1316, 1317], "7": [1, 17, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 52, 55, 57, 62, 129, 130, 142, 155, 163, 166, 167, 169, 170, 171, 173, 174, 176, 180, 185, 187, 191, 197, 199, 202, 210, 215, 217, 219, 221, 222, 226, 229, 231, 233, 236, 238, 239, 241, 242, 243, 244, 248, 251, 254, 255, 256, 257, 263, 264, 265, 266, 273, 275, 276, 277, 306, 314, 318, 341, 342, 344, 353, 382, 399, 400, 404, 414, 425, 427, 428, 442, 444, 455, 468, 473, 477, 498, 513, 527, 528, 529, 530, 587, 599, 604, 608, 618, 635, 650, 685, 698, 725, 733, 734, 745, 751, 756, 763, 764, 783, 800, 818, 823, 825, 827, 829, 831, 835, 837, 839, 844, 846, 847, 851, 858, 860, 863, 864, 866, 867, 868, 872, 877, 880, 913, 918, 931, 944, 945, 947, 956, 1002, 1003, 1007, 1014, 1020, 1034, 1035, 1049, 1051, 1062, 1103, 1121, 1135, 1136, 1137, 1138, 1179, 1180, 1193, 1199, 1230, 1265, 1308, 1317], "float32": [1, 11, 34, 43, 57, 163, 183, 263, 264, 268, 306, 451, 761, 800, 818, 913, 918, 1059, 1084, 1153, 1308], "lazi": [1, 47, 48, 49, 50, 52, 57, 62, 134, 150, 211, 228, 229, 253, 306, 551, 753, 773, 776, 791, 800, 825, 847, 848, 890, 893, 894, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 918, 1316, 1317], "i16": [1, 57, 404, 425, 444, 627, 800, 918, 1032, 1287, 1308, 1317], "i32": [1, 57, 108, 111, 115, 149, 150, 244, 253, 306, 341, 342, 344, 366, 399, 408, 411, 412, 414, 415, 417, 422, 446, 606, 627, 725, 790, 800, 868, 913, 944, 945, 947, 1002, 1014, 1018, 1020, 1021, 1029, 1053, 1153, 1182, 1308, 1317], "f32": [1, 57, 163, 253, 263, 268, 306, 627, 800, 818, 877, 913, 918, 1153, 1308], "i64": [1, 11, 14, 17, 18, 22, 28, 47, 49, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 129, 130, 134, 162, 163, 164, 165, 166, 170, 172, 173, 176, 177, 179, 180, 185, 186, 188, 189, 190, 191, 197, 199, 201, 203, 205, 207, 210, 211, 214, 215, 220, 221, 222, 227, 228, 229, 230, 233, 234, 236, 237, 238, 242, 244, 248, 251, 252, 253, 255, 257, 260, 266, 269, 270, 271, 272, 273, 274, 275, 277, 279, 281, 282, 283, 284, 285, 288, 289, 290, 292, 293, 296, 299, 300, 306, 314, 316, 320, 331, 336, 337, 339, 340, 345, 347, 348, 349, 350, 351, 353, 356, 358, 364, 365, 371, 379, 380, 381, 382, 388, 389, 392, 393, 407, 433, 435, 436, 437, 438, 439, 440, 441, 451, 454, 456, 457, 459, 460, 461, 462, 464, 465, 467, 468, 470, 473, 475, 476, 477, 478, 482, 483, 486, 487, 489, 490, 491, 493, 495, 498, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 545, 548, 549, 551, 567, 568, 569, 571, 572, 574, 576, 578, 579, 584, 588, 589, 592, 593, 594, 595, 596, 599, 600, 601, 603, 604, 605, 606, 607, 608, 622, 624, 625, 627, 628, 629, 633, 634, 635, 651, 664, 665, 682, 686, 691, 692, 694, 695, 696, 697, 698, 704, 705, 706, 707, 709, 712, 720, 723, 726, 728, 733, 734, 735, 736, 741, 744, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 770, 771, 775, 779, 780, 783, 784, 785, 786, 790, 796, 800, 816, 818, 819, 821, 822, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 844, 847, 848, 849, 851, 853, 854, 857, 858, 859, 861, 862, 864, 865, 866, 868, 870, 872, 875, 876, 877, 879, 880, 882, 883, 884, 885, 888, 891, 892, 893, 894, 897, 898, 899, 901, 902, 905, 908, 909, 913, 918, 920, 921, 924, 943, 948, 950, 952, 953, 954, 956, 959, 966, 977, 980, 984, 985, 986, 987, 992, 993, 1010, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1064, 1065, 1067, 1068, 1071, 1072, 1076, 1078, 1089, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1147, 1148, 1155, 1160, 1173, 1178, 1179, 1180, 1182, 1186, 1189, 1193, 1197, 1198, 1201, 1205, 1209, 1210, 1214, 1215, 1266, 1272, 1277, 1279, 1286, 1292, 1293, 1299, 1308, 1316, 1317], "register_series_namespac": [1, 55, 56, 57], "math": [1, 11, 58, 390, 721, 722, 800, 981, 983, 1211, 1282, 1308], "mathshortcut": [1, 58], "": [1, 12, 34, 36, 37, 42, 43, 47, 50, 58, 63, 83, 108, 115, 120, 121, 122, 123, 125, 131, 135, 136, 139, 140, 152, 162, 163, 172, 175, 180, 185, 190, 191, 192, 193, 194, 195, 201, 207, 210, 211, 220, 227, 229, 234, 236, 238, 241, 244, 245, 252, 262, 269, 271, 272, 273, 274, 279, 280, 306, 343, 365, 401, 407, 431, 434, 454, 460, 494, 516, 549, 551, 560, 568, 580, 581, 588, 589, 601, 607, 635, 639, 647, 648, 649, 650, 651, 664, 665, 670, 671, 673, 681, 682, 683, 684, 688, 689, 692, 694, 705, 714, 715, 716, 717, 723, 729, 732, 735, 736, 739, 740, 749, 752, 753, 763, 764, 765, 766, 768, 770, 771, 779, 780, 782, 783, 784, 790, 796, 800, 816, 818, 828, 838, 839, 840, 841, 842, 843, 848, 857, 866, 868, 869, 876, 882, 883, 884, 885, 888, 889, 895, 901, 913, 918, 920, 921, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1007, 1009, 1010, 1013, 1015, 1016, 1020, 1021, 1023, 1027, 1028, 1032, 1035, 1036, 1038, 1041, 1049, 1051, 1052, 1053, 1054, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1236, 1241, 1242, 1244, 1245, 1246, 1247, 1250, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1308, 1312], "_": [1, 54, 58, 229, 262, 265, 306, 343, 516, 640, 648, 655, 656, 666, 671, 672, 874, 913, 971, 1220, 1228, 1235, 1236, 1246, 1252, 1285, 1308], "squar": [1, 58, 292, 494, 636, 800, 901, 1104, 1216, 1308], "cube": [1, 58, 369, 593, 800, 973, 1308], "s2": [1, 53, 91, 92, 145, 146, 183, 306, 958, 975, 996, 1056, 1089, 1103, 1111, 1147, 1161, 1299, 1308], "renam": [1, 111, 120, 121, 155, 160, 181, 184, 190, 192, 193, 194, 195, 200, 235, 244, 245, 258, 279, 280, 284, 286, 287, 306, 316, 321, 383, 384, 385, 386, 387, 466, 481, 485, 488, 493, 505, 519, 537, 547, 548, 550, 564, 565, 571, 572, 573, 574, 576, 578, 579, 594, 609, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 694, 696, 699, 700, 718, 739, 740, 762, 779, 782, 800, 838, 840, 841, 842, 843, 852, 868, 869, 881, 888, 889, 893, 895, 896, 913, 921, 925, 988, 989, 990, 991, 993, 1086, 1092, 1113, 1127, 1145, 1154, 1173, 1184, 1200, 1202, 1221, 1230, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1275, 1280, 1281, 1286, 1308], "n2": [1, 355], "s3": [1, 36, 124, 135, 136, 139, 140, 306, 958, 1147, 1308], "n3": 1, "8": [1, 12, 32, 34, 36, 38, 39, 40, 41, 42, 43, 47, 52, 54, 55, 57, 58, 62, 78, 82, 88, 129, 130, 142, 148, 150, 163, 166, 167, 169, 170, 171, 172, 173, 174, 176, 180, 185, 187, 189, 197, 199, 207, 210, 211, 214, 215, 217, 219, 222, 231, 233, 236, 239, 241, 242, 243, 244, 248, 251, 253, 254, 255, 257, 263, 264, 265, 266, 273, 276, 277, 279, 306, 318, 320, 333, 341, 342, 344, 379, 382, 388, 400, 468, 474, 477, 507, 509, 513, 519, 527, 528, 529, 530, 569, 587, 593, 604, 605, 610, 627, 633, 635, 657, 660, 661, 662, 681, 713, 719, 725, 729, 731, 734, 736, 748, 750, 755, 756, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 781, 784, 785, 789, 800, 818, 823, 825, 827, 828, 829, 831, 835, 837, 844, 847, 851, 853, 862, 864, 867, 868, 872, 877, 880, 888, 913, 918, 944, 945, 947, 983, 992, 1014, 1077, 1103, 1115, 1117, 1121, 1127, 1135, 1136, 1137, 1138, 1169, 1180, 1183, 1185, 1188, 1190, 1192, 1194, 1237, 1240, 1241, 1242, 1261, 1308, 1317], "9": [1, 10, 32, 34, 36, 37, 38, 39, 42, 47, 52, 54, 62, 142, 167, 169, 183, 192, 197, 202, 214, 238, 240, 241, 244, 256, 257, 273, 277, 279, 299, 306, 314, 318, 320, 333, 341, 342, 344, 349, 351, 379, 382, 390, 400, 460, 468, 477, 483, 493, 507, 513, 525, 533, 571, 587, 598, 604, 608, 610, 616, 618, 629, 633, 648, 685, 693, 727, 733, 734, 756, 788, 800, 825, 840, 844, 846, 851, 866, 868, 880, 888, 908, 913, 918, 939, 940, 944, 945, 947, 952, 954, 994, 1007, 1018, 1021, 1029, 1035, 1049, 1050, 1089, 1103, 1115, 1121, 1133, 1141, 1180, 1185, 1191, 1193, 1195, 1210, 1228, 1265, 1274, 1288, 1308], "27": [1, 58, 299, 382, 419, 426, 443, 800, 908, 1308, 1317], "16": [1, 37, 56, 75, 85, 142, 154, 169, 184, 191, 238, 279, 306, 379, 382, 477, 550, 569, 593, 608, 686, 733, 747, 748, 751, 800, 825, 839, 866, 874, 888, 913, 918, 1035, 1049, 1154, 1169, 1200, 1211, 1266, 1282, 1308], "64": [1, 56, 58, 69, 71, 74, 77, 84, 87, 141, 159, 268, 306, 376, 569, 593, 800, 1169, 1308], "25": [1, 28, 37, 58, 115, 150, 169, 191, 211, 238, 268, 275, 279, 306, 392, 404, 406, 425, 428, 442, 444, 451, 596, 608, 611, 612, 613, 614, 615, 617, 618, 619, 706, 742, 743, 745, 746, 747, 753, 764, 787, 788, 800, 825, 839, 848, 855, 866, 886, 888, 913, 918, 994, 995, 1009, 1035, 1049, 1055, 1059, 1077, 1169, 1173, 1308], "125": [1, 37, 58, 253, 306, 314, 800, 877, 913, 1169, 1308], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 391, 466, 800, 826, 913], "activ": [2, 8, 9, 19, 20, 22, 23, 24, 25, 29, 30, 509, 648, 1117, 1228], "bool": [2, 8, 9, 10, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 54, 60, 61, 62, 91, 92, 108, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 159, 162, 163, 164, 165, 169, 174, 179, 180, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 199, 201, 203, 204, 205, 208, 210, 211, 218, 227, 229, 238, 239, 240, 241, 242, 246, 250, 252, 253, 256, 260, 262, 264, 265, 269, 270, 271, 272, 274, 275, 277, 279, 288, 290, 293, 296, 306, 316, 317, 318, 319, 320, 321, 331, 334, 335, 338, 342, 343, 351, 356, 359, 360, 362, 363, 364, 365, 366, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 396, 410, 427, 429, 442, 447, 448, 449, 450, 451, 452, 453, 469, 471, 474, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 494, 496, 499, 500, 504, 509, 512, 514, 516, 526, 533, 537, 540, 546, 547, 549, 551, 555, 556, 557, 558, 559, 563, 582, 583, 585, 587, 590, 591, 596, 599, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 624, 627, 632, 634, 635, 638, 639, 640, 642, 643, 645, 650, 663, 664, 665, 666, 671, 672, 674, 681, 683, 684, 686, 688, 694, 704, 705, 707, 710, 713, 714, 715, 716, 717, 718, 720, 723, 724, 725, 728, 729, 732, 733, 737, 742, 743, 744, 745, 746, 757, 758, 761, 764, 773, 776, 782, 787, 788, 790, 791, 800, 816, 818, 819, 821, 822, 825, 830, 832, 834, 835, 838, 839, 840, 841, 842, 843, 847, 848, 852, 853, 857, 862, 866, 871, 874, 876, 877, 882, 883, 884, 885, 888, 897, 899, 902, 905, 913, 917, 918, 922, 923, 925, 934, 937, 938, 941, 945, 946, 954, 959, 961, 962, 964, 965, 967, 969, 972, 976, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 999, 1013, 1034, 1036, 1049, 1055, 1056, 1058, 1060, 1061, 1068, 1074, 1077, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1107, 1108, 1112, 1113, 1117, 1120, 1122, 1124, 1134, 1141, 1145, 1148, 1155, 1167, 1170, 1171, 1173, 1175, 1176, 1177, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1200, 1201, 1202, 1203, 1208, 1213, 1215, 1218, 1219, 1220, 1222, 1223, 1225, 1230, 1243, 1244, 1245, 1246, 1251, 1252, 1254, 1261, 1263, 1264, 1266, 1268, 1285, 1288, 1289, 1290, 1293, 1296, 1298, 1308, 1316], "none": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 61, 66, 69, 70, 92, 108, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 157, 160, 164, 168, 169, 172, 178, 179, 189, 191, 192, 194, 195, 196, 202, 206, 210, 211, 212, 214, 215, 217, 220, 222, 225, 226, 229, 238, 239, 242, 248, 249, 251, 252, 253, 255, 260, 262, 265, 268, 270, 271, 272, 273, 274, 275, 287, 291, 306, 317, 319, 320, 321, 333, 334, 335, 342, 343, 355, 358, 371, 377, 378, 379, 382, 389, 394, 395, 403, 424, 427, 428, 442, 449, 450, 451, 452, 453, 454, 457, 458, 459, 465, 472, 474, 477, 478, 487, 489, 490, 491, 497, 499, 500, 508, 514, 516, 518, 526, 527, 528, 529, 530, 532, 539, 547, 549, 550, 551, 559, 562, 563, 565, 570, 583, 584, 585, 586, 589, 596, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 622, 625, 626, 627, 628, 629, 633, 634, 638, 639, 642, 644, 645, 648, 650, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 669, 670, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 686, 688, 691, 692, 693, 694, 703, 715, 716, 717, 718, 720, 726, 728, 730, 732, 736, 742, 743, 744, 745, 746, 747, 749, 750, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 771, 776, 777, 778, 782, 784, 786, 787, 788, 790, 800, 819, 820, 822, 824, 825, 828, 833, 834, 839, 840, 842, 843, 846, 847, 848, 850, 852, 853, 857, 860, 866, 870, 872, 873, 874, 875, 876, 877, 883, 884, 885, 890, 895, 896, 900, 901, 913, 917, 918, 922, 923, 925, 932, 933, 937, 938, 945, 946, 958, 976, 977, 993, 994, 996, 997, 998, 1006, 1015, 1016, 1017, 1023, 1034, 1035, 1049, 1055, 1058, 1059, 1060, 1061, 1065, 1066, 1067, 1075, 1077, 1079, 1080, 1081, 1091, 1096, 1097, 1100, 1103, 1104, 1105, 1107, 1108, 1111, 1116, 1122, 1124, 1126, 1134, 1135, 1136, 1137, 1138, 1140, 1147, 1154, 1155, 1156, 1157, 1158, 1159, 1168, 1173, 1174, 1175, 1179, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1197, 1198, 1201, 1202, 1205, 1206, 1209, 1210, 1213, 1214, 1217, 1218, 1219, 1222, 1224, 1225, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1241, 1242, 1243, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1261, 1262, 1263, 1264, 1266, 1268, 1271, 1274, 1286, 1287, 1288, 1289, 1290, 1291, 1297, 1308, 1316], "true": [2, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 60, 61, 62, 108, 109, 110, 111, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 128, 131, 132, 134, 135, 137, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 152, 157, 159, 162, 163, 164, 165, 169, 174, 179, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 201, 203, 204, 205, 208, 210, 211, 212, 217, 218, 224, 225, 227, 229, 230, 238, 239, 240, 241, 242, 244, 252, 253, 256, 260, 262, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 279, 285, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 315, 316, 317, 318, 319, 320, 321, 332, 334, 335, 338, 342, 343, 351, 355, 359, 360, 362, 363, 364, 365, 366, 378, 379, 380, 381, 382, 389, 396, 398, 401, 404, 407, 410, 420, 421, 424, 425, 427, 428, 429, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 467, 469, 470, 471, 474, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 494, 496, 499, 500, 504, 512, 514, 516, 533, 537, 539, 546, 549, 551, 555, 556, 557, 558, 559, 560, 563, 564, 582, 583, 585, 587, 590, 591, 596, 601, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 627, 632, 634, 635, 638, 639, 640, 642, 643, 645, 650, 652, 654, 663, 664, 665, 671, 672, 674, 681, 683, 684, 686, 688, 692, 694, 704, 705, 707, 710, 713, 714, 715, 716, 717, 718, 720, 723, 724, 725, 729, 742, 744, 745, 751, 757, 764, 773, 776, 782, 787, 790, 791, 800, 816, 818, 819, 820, 821, 822, 825, 830, 832, 834, 838, 839, 840, 841, 842, 843, 847, 848, 850, 852, 853, 857, 862, 866, 868, 874, 876, 877, 882, 883, 884, 885, 888, 894, 897, 899, 902, 903, 904, 905, 906, 907, 908, 913, 917, 918, 922, 923, 925, 935, 937, 938, 941, 945, 946, 954, 961, 962, 964, 965, 967, 969, 972, 975, 976, 993, 999, 1000, 1001, 1004, 1007, 1009, 1010, 1011, 1013, 1017, 1018, 1021, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1055, 1056, 1058, 1060, 1061, 1068, 1074, 1077, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1107, 1108, 1112, 1120, 1122, 1124, 1141, 1145, 1155, 1161, 1167, 1170, 1171, 1173, 1177, 1191, 1200, 1213, 1215, 1218, 1219, 1220, 1222, 1223, 1225, 1230, 1232, 1234, 1243, 1244, 1245, 1251, 1252, 1254, 1261, 1263, 1264, 1266, 1268, 1285, 1289, 1290, 1296, 1298, 1299, 1308, 1317], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1308, 1316], "decim": [2, 10, 11, 12, 28, 29, 34, 37, 43, 120, 121, 134, 306, 620, 685, 800, 913, 1195, 1265, 1308], "temporari": 2, "set": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 54, 55, 60, 61, 66, 69, 70, 72, 109, 110, 111, 114, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 157, 159, 166, 172, 182, 190, 191, 192, 193, 194, 195, 196, 208, 211, 215, 217, 218, 220, 222, 238, 240, 242, 244, 251, 253, 255, 256, 262, 264, 268, 270, 271, 273, 274, 279, 306, 317, 319, 321, 342, 343, 355, 371, 389, 427, 445, 451, 472, 483, 512, 514, 516, 526, 527, 528, 529, 530, 532, 537, 539, 549, 550, 551, 562, 592, 596, 603, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 622, 628, 632, 633, 638, 652, 653, 659, 664, 665, 669, 670, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 710, 714, 716, 720, 724, 728, 742, 743, 744, 745, 746, 747, 757, 758, 759, 761, 773, 776, 777, 778, 782, 787, 788, 790, 791, 800, 812, 821, 822, 828, 830, 838, 839, 840, 841, 842, 843, 847, 848, 852, 853, 857, 866, 868, 870, 875, 877, 883, 885, 888, 895, 901, 913, 917, 922, 923, 945, 946, 958, 962, 970, 977, 993, 1034, 1052, 1059, 1069, 1075, 1089, 1120, 1122, 1124, 1134, 1135, 1136, 1137, 1138, 1140, 1145, 1147, 1154, 1155, 1173, 1179, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1197, 1198, 1199, 1202, 1209, 1213, 1214, 1218, 1232, 1233, 1239, 1244, 1245, 1249, 1250, 1255, 1256, 1257, 1258, 1261, 1263, 1264, 1268, 1289, 1296, 1308, 1317], "remov": [2, 5, 93, 120, 121, 134, 159, 170, 215, 217, 222, 255, 262, 275, 306, 321, 428, 442, 454, 548, 572, 659, 669, 675, 676, 677, 678, 679, 680, 749, 800, 827, 913, 970, 993, 1035, 1049, 1173, 1239, 1249, 1255, 1256, 1257, 1258, 1259, 1260, 1264, 1285, 1288, 1298, 1308], "onc": [2, 50, 120, 121, 154, 214, 240, 242, 284, 306, 526, 549, 551, 622, 679, 680, 800, 817, 893, 913, 1134, 1155, 1197, 1259, 1260, 1308], "stabil": [2, 196, 306, 472, 800, 1075, 1308], "current": [2, 3, 4, 6, 7, 31, 49, 115, 122, 123, 125, 132, 139, 164, 165, 210, 211, 253, 306, 406, 450, 452, 453, 539, 589, 800, 819, 820, 847, 848, 877, 913, 918, 976, 980, 1000, 1009, 1058, 1060, 1061, 1169, 1308, 1316], "consid": [2, 38, 43, 44, 45, 46, 60, 61, 70, 72, 91, 92, 120, 121, 122, 132, 134, 139, 140, 143, 144, 145, 146, 172, 174, 184, 207, 214, 220, 240, 253, 271, 273, 274, 306, 321, 365, 371, 388, 389, 428, 474, 549, 551, 570, 571, 574, 576, 578, 579, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 705, 733, 751, 777, 778, 796, 800, 821, 822, 828, 844, 851, 857, 877, 883, 885, 901, 913, 969, 972, 977, 992, 993, 1035, 1056, 1077, 1091, 1155, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1200, 1201, 1308], "beta": 2, "cfg": [3, 5, 18, 157], "previous": [3, 4], "save": [3, 4, 7, 191, 211, 238, 275, 306, 397, 406, 424, 428, 442, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 787, 788, 796, 800, 812, 839, 848, 866, 913, 1009, 1031, 1035, 1049], "option": [3, 4, 5, 6, 7, 31, 36, 37, 54, 70, 120, 122, 123, 124, 125, 126, 128, 132, 135, 136, 137, 139, 140, 142, 147, 148, 149, 150, 151, 152, 153, 191, 206, 211, 220, 253, 260, 264, 270, 274, 306, 396, 494, 562, 609, 611, 612, 613, 614, 615, 617, 618, 619, 632, 640, 666, 670, 710, 782, 790, 800, 812, 839, 847, 848, 857, 877, 885, 913, 918, 999, 1100, 1104, 1184, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1213, 1220, 1246, 1250, 1286, 1296, 1308], "from": [3, 4, 5, 6, 7, 11, 17, 29, 33, 34, 36, 37, 43, 47, 48, 49, 54, 62, 83, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 163, 169, 170, 175, 177, 182, 189, 191, 194, 208, 209, 210, 211, 212, 220, 229, 233, 238, 239, 241, 242, 244, 245, 253, 262, 268, 270, 271, 273, 274, 275, 281, 306, 309, 355, 389, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 451, 454, 466, 477, 494, 513, 526, 539, 551, 562, 580, 581, 583, 588, 589, 592, 596, 598, 608, 610, 611, 612, 614, 617, 618, 619, 622, 635, 647, 648, 651, 652, 653, 663, 670, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 708, 721, 722, 725, 726, 741, 742, 743, 744, 745, 746, 747, 761, 776, 786, 787, 788, 796, 799, 800, 818, 825, 826, 827, 832, 839, 842, 847, 848, 857, 864, 866, 868, 869, 877, 883, 885, 890, 891, 913, 918, 958, 993, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057, 1059, 1064, 1100, 1104, 1121, 1134, 1147, 1164, 1165, 1166, 1169, 1173, 1185, 1197, 1227, 1228, 1231, 1232, 1233, 1243, 1250, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1268, 1285, 1299, 1308, 1316, 1317], "json": [3, 4, 6, 7, 40, 41, 129, 130, 136, 138, 306, 391, 466, 562, 565, 652, 653, 654, 693, 800, 812, 826, 870, 913, 917, 1232, 1233, 1234, 1274], "paramet": [3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 69, 70, 71, 72, 79, 83, 92, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 162, 163, 164, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 206, 208, 209, 210, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 227, 228, 229, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 286, 289, 291, 292, 298, 300, 306, 314, 316, 317, 318, 319, 320, 321, 331, 338, 339, 342, 343, 350, 351, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 372, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 396, 398, 400, 401, 407, 424, 427, 428, 429, 431, 433, 434, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 483, 494, 496, 498, 503, 504, 505, 506, 507, 509, 512, 513, 514, 515, 516, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 546, 547, 548, 549, 550, 551, 562, 563, 567, 569, 572, 573, 574, 575, 576, 577, 582, 583, 587, 588, 589, 592, 593, 594, 596, 597, 599, 601, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 691, 692, 694, 695, 696, 698, 699, 700, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 816, 818, 819, 821, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 853, 857, 858, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 895, 898, 900, 901, 907, 909, 913, 917, 918, 921, 922, 923, 924, 925, 934, 941, 942, 945, 946, 953, 954, 958, 959, 961, 962, 963, 964, 965, 966, 967, 970, 976, 977, 978, 979, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 999, 1001, 1003, 1004, 1010, 1031, 1034, 1035, 1036, 1038, 1040, 1041, 1049, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1075, 1076, 1077, 1080, 1081, 1091, 1099, 1100, 1104, 1106, 1111, 1112, 1113, 1114, 1115, 1117, 1120, 1121, 1122, 1123, 1124, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144, 1145, 1146, 1147, 1148, 1154, 1155, 1169, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1209, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1271, 1272, 1275, 1279, 1280, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1296, 1297, 1298, 1299, 1308, 1316], "produc": [3, 4, 149, 150, 152, 210, 306, 339, 505, 506, 559, 763, 847, 852, 853, 913, 942, 1113, 1114], "load_from_fil": [3, 6, 7], "file": [3, 4, 6, 7, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 177, 306, 391, 466, 562, 565, 575, 577, 800, 826, 870, 913, 917, 1064, 1308], "path": [4, 7, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 306, 391, 562, 565, 624, 654, 800, 826, 870, 874, 913, 917, 1203, 1234, 1308, 1317], "load": [4, 6, 7, 111, 113, 122, 124, 125, 131, 135, 136, 151, 153, 306, 800, 812, 844, 851, 913, 917, 1317], "reset": [5, 157], "default": [5, 8, 10, 11, 15, 28, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 54, 60, 61, 62, 66, 69, 70, 71, 108, 110, 111, 112, 113, 114, 115, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 134, 139, 143, 145, 147, 148, 149, 150, 151, 152, 157, 169, 172, 175, 190, 191, 192, 193, 194, 195, 196, 208, 210, 211, 218, 220, 227, 229, 238, 239, 240, 241, 242, 248, 254, 256, 262, 264, 271, 273, 274, 276, 281, 291, 306, 316, 317, 319, 343, 350, 355, 368, 389, 396, 427, 428, 442, 447, 449, 450, 452, 453, 472, 512, 516, 526, 531, 532, 534, 537, 539, 541, 542, 550, 559, 562, 580, 581, 583, 589, 596, 599, 603, 608, 611, 612, 613, 614, 615, 617, 618, 619, 622, 625, 628, 637, 638, 647, 659, 663, 669, 670, 675, 676, 677, 678, 681, 683, 684, 686, 688, 710, 711, 714, 716, 720, 724, 725, 728, 729, 731, 742, 743, 744, 745, 746, 747, 750, 753, 757, 758, 759, 761, 773, 776, 781, 782, 787, 788, 789, 791, 800, 821, 822, 825, 828, 830, 838, 839, 840, 841, 842, 843, 847, 848, 857, 866, 870, 872, 878, 883, 885, 886, 891, 900, 913, 922, 923, 946, 953, 958, 970, 977, 993, 994, 999, 1034, 1035, 1049, 1055, 1057, 1058, 1060, 1061, 1075, 1120, 1124, 1134, 1139, 1140, 1145, 1147, 1154, 1164, 1165, 1169, 1173, 1175, 1179, 1197, 1205, 1209, 1217, 1218, 1219, 1227, 1230, 1239, 1243, 1249, 1250, 1255, 1256, 1257, 1258, 1261, 1263, 1264, 1266, 1268, 1296, 1297, 1308, 1317], "state": [5, 101, 733, 737, 812, 830, 832, 862, 874, 913], "note": [5, 11, 21, 36, 37, 47, 51, 52, 53, 54, 59, 61, 68, 69, 71, 84, 91, 92, 108, 109, 110, 112, 114, 115, 120, 122, 123, 124, 125, 129, 130, 132, 135, 136, 140, 143, 145, 148, 150, 152, 154, 157, 159, 162, 167, 169, 178, 191, 192, 194, 195, 196, 206, 207, 208, 210, 211, 214, 225, 228, 229, 238, 239, 240, 241, 248, 253, 261, 264, 265, 268, 269, 270, 274, 275, 279, 281, 282, 306, 350, 371, 381, 382, 394, 395, 401, 420, 421, 424, 428, 442, 451, 466, 472, 478, 487, 489, 493, 509, 512, 531, 537, 539, 551, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 594, 603, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 625, 632, 639, 647, 648, 649, 650, 651, 655, 656, 664, 665, 670, 676, 677, 678, 681, 682, 691, 696, 697, 706, 715, 717, 725, 733, 742, 743, 745, 746, 747, 751, 761, 773, 775, 776, 787, 788, 790, 791, 796, 800, 811, 816, 822, 825, 832, 833, 839, 840, 842, 843, 844, 848, 851, 864, 866, 872, 874, 876, 877, 882, 885, 888, 891, 892, 913, 953, 977, 986, 987, 994, 997, 998, 1004, 1027, 1028, 1031, 1035, 1049, 1059, 1074, 1075, 1081, 1117, 1120, 1139, 1145, 1155, 1179, 1183, 1191, 1198, 1201, 1205, 1208, 1213, 1219, 1227, 1228, 1229, 1230, 1231, 1235, 1236, 1244, 1245, 1250, 1256, 1257, 1258, 1261, 1262, 1271, 1278, 1289, 1290, 1308, 1312, 1316], "method": [5, 32, 36, 37, 38, 39, 51, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 109, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 147, 157, 160, 169, 172, 177, 181, 184, 190, 192, 193, 194, 195, 200, 202, 208, 214, 215, 217, 222, 225, 231, 235, 239, 240, 241, 248, 255, 258, 271, 279, 286, 287, 292, 298, 306, 314, 317, 318, 321, 350, 371, 383, 384, 385, 386, 387, 391, 431, 434, 448, 449, 457, 464, 466, 469, 471, 477, 481, 485, 488, 493, 496, 505, 519, 531, 537, 546, 547, 548, 550, 551, 565, 567, 569, 571, 572, 574, 576, 578, 579, 582, 583, 584, 587, 593, 594, 597, 599, 609, 611, 612, 613, 614, 615, 617, 618, 619, 625, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 677, 678, 679, 680, 685, 691, 695, 696, 699, 700, 706, 708, 713, 729, 764, 774, 792, 793, 795, 796, 800, 801, 802, 805, 806, 807, 808, 809, 812, 822, 825, 826, 828, 840, 841, 842, 843, 846, 852, 863, 872, 881, 883, 888, 895, 896, 901, 907, 913, 924, 925, 953, 970, 977, 988, 989, 990, 991, 994, 1038, 1041, 1064, 1065, 1080, 1086, 1092, 1113, 1127, 1139, 1145, 1154, 1155, 1174, 1175, 1184, 1190, 1200, 1202, 1205, 1221, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1265, 1271, 1280, 1281, 1291, 1298, 1300, 1302, 1304, 1308, 1309, 1313, 1314, 1315], "oper": [5, 37, 53, 62, 92, 97, 98, 105, 108, 110, 111, 112, 113, 114, 120, 122, 132, 160, 165, 177, 180, 183, 190, 193, 200, 201, 212, 214, 221, 225, 227, 228, 232, 236, 238, 241, 242, 248, 259, 265, 270, 273, 283, 284, 306, 314, 315, 318, 350, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 448, 449, 464, 466, 469, 471, 493, 496, 526, 527, 528, 529, 530, 531, 539, 546, 564, 567, 569, 570, 571, 572, 574, 576, 578, 579, 582, 583, 584, 587, 588, 593, 594, 601, 622, 625, 695, 696, 706, 713, 714, 716, 727, 728, 732, 748, 790, 800, 812, 820, 825, 832, 838, 841, 844, 847, 851, 857, 858, 872, 877, 893, 913, 917, 953, 980, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1064, 1134, 1135, 1136, 1137, 1138, 1139, 1177, 1197, 1205, 1284, 1288, 1289, 1290, 1298, 1308], "environ": [5, 31, 132, 139, 151, 154], "ani": [5, 33, 34, 36, 37, 38, 42, 43, 44, 45, 46, 59, 60, 61, 69, 70, 72, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 140, 147, 149, 150, 152, 157, 160, 167, 172, 177, 179, 180, 183, 206, 208, 209, 214, 218, 227, 228, 239, 240, 241, 253, 256, 260, 261, 264, 265, 268, 271, 273, 274, 282, 306, 314, 317, 318, 321, 343, 366, 388, 389, 428, 429, 448, 449, 459, 460, 464, 467, 469, 471, 474, 483, 496, 503, 509, 516, 546, 547, 549, 550, 551, 564, 567, 569, 571, 572, 574, 576, 578, 579, 582, 583, 587, 592, 594, 596, 603, 604, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 638, 640, 663, 677, 678, 679, 680, 681, 683, 684, 686, 688, 695, 696, 699, 706, 713, 714, 715, 717, 718, 728, 729, 730, 761, 764, 777, 778, 790, 800, 821, 822, 828, 834, 835, 861, 877, 883, 885, 892, 913, 917, 918, 922, 925, 946, 972, 992, 993, 1035, 1036, 1064, 1067, 1071, 1077, 1089, 1103, 1111, 1117, 1124, 1154, 1155, 1173, 1179, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1199, 1202, 1218, 1220, 1243, 1261, 1263, 1264, 1266, 1268, 1280, 1288, 1289, 1290, 1308, 1316, 1317], "local": [5, 36, 122, 124, 135, 136, 139, 152, 306, 442, 590, 591, 800, 969, 971, 1005, 1006, 1035, 1039, 1049, 1170, 1171, 1308], "non": [5, 34, 36, 37, 43, 54, 69, 70, 113, 141, 168, 192, 195, 209, 220, 238, 244, 245, 248, 270, 274, 279, 280, 306, 371, 377, 378, 396, 427, 478, 539, 549, 550, 551, 589, 603, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 641, 642, 648, 655, 691, 715, 717, 726, 727, 728, 730, 732, 736, 740, 747, 766, 768, 771, 777, 778, 779, 782, 784, 800, 824, 840, 843, 857, 866, 868, 869, 872, 885, 888, 889, 913, 917, 977, 994, 999, 1034, 1081, 1147, 1155, 1169, 1179, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1205, 1221, 1222, 1228, 1235, 1271, 1289, 1308], "env": [5, 153], "back": [5, 54, 177, 191, 194, 265, 306, 562, 588, 689, 800, 839, 842, 870, 913, 1064, 1269, 1290, 1308], "valu": [5, 11, 12, 13, 14, 18, 29, 31, 33, 34, 37, 40, 43, 47, 51, 53, 54, 62, 63, 66, 79, 80, 89, 92, 110, 111, 113, 114, 120, 121, 122, 123, 125, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 161, 162, 169, 172, 174, 177, 178, 179, 180, 184, 189, 191, 194, 196, 197, 202, 206, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 229, 230, 231, 233, 238, 239, 240, 241, 242, 248, 249, 252, 254, 255, 256, 257, 260, 261, 265, 269, 270, 273, 274, 275, 276, 283, 287, 288, 290, 293, 294, 296, 297, 306, 313, 314, 315, 317, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 382, 388, 389, 392, 394, 395, 400, 404, 419, 425, 443, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 495, 496, 497, 499, 500, 501, 502, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 531, 533, 534, 535, 536, 539, 540, 541, 543, 545, 546, 549, 550, 551, 552, 553, 554, 566, 567, 568, 569, 570, 580, 581, 582, 583, 586, 588, 589, 592, 593, 596, 597, 599, 602, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 629, 630, 631, 632, 634, 635, 636, 638, 639, 641, 642, 643, 644, 645, 647, 650, 651, 652, 653, 654, 656, 661, 662, 664, 665, 667, 670, 672, 673, 674, 682, 691, 693, 695, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 719, 723, 726, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 750, 751, 756, 757, 758, 759, 761, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 783, 784, 790, 800, 815, 816, 825, 828, 833, 834, 835, 839, 842, 845, 846, 847, 848, 854, 855, 856, 857, 859, 860, 863, 864, 866, 870, 872, 873, 876, 878, 879, 882, 885, 886, 896, 897, 899, 902, 903, 905, 906, 913, 918, 920, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 959, 960, 962, 963, 964, 965, 970, 974, 977, 978, 979, 981, 982, 983, 992, 993, 994, 995, 997, 998, 1003, 1007, 1026, 1032, 1050, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1085, 1086, 1087, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1134, 1139, 1141, 1142, 1143, 1144, 1148, 1149, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1164, 1165, 1166, 1168, 1169, 1172, 1173, 1174, 1175, 1179, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1198, 1199, 1200, 1201, 1202, 1205, 1206, 1210, 1211, 1212, 1213, 1215, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1241, 1242, 1244, 1245, 1247, 1250, 1252, 1253, 1254, 1262, 1271, 1274, 1278, 1279, 1280, 1281, 1282, 1283, 1289, 1290, 1291, 1294, 1296, 1298, 1299, 1308, 1317], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 917, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1241, 1242, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1299, 1308, 1316], "contain": [6, 34, 35, 36, 37, 43, 54, 59, 110, 113, 115, 122, 123, 124, 135, 136, 143, 144, 149, 162, 172, 191, 194, 209, 225, 229, 268, 269, 274, 287, 306, 317, 319, 321, 343, 362, 363, 391, 483, 516, 550, 551, 638, 645, 647, 649, 650, 654, 673, 674, 691, 714, 715, 716, 717, 728, 732, 764, 800, 816, 826, 828, 839, 842, 862, 882, 885, 896, 913, 917, 918, 922, 923, 946, 993, 1069, 1124, 1154, 1161, 1173, 1218, 1225, 1227, 1229, 1230, 1234, 1253, 1254, 1271, 1284, 1289, 1308], "save_to_fil": 6, "json_str": [6, 129, 130], "written": [7, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 306, 562, 870, 913], "leav": [7, 220, 306, 539, 857, 913], "directli": [7, 31, 49, 61, 122, 150, 152, 157, 241, 306, 450, 452, 453, 603, 776, 800, 822, 913, 970, 1058, 1060, 1061, 1179, 1308, 1317], "ascii": [8, 21, 640, 651, 655, 656, 658, 666, 668, 670, 682, 691, 1220, 1231, 1235, 1236, 1238, 1246, 1248, 1250, 1262, 1271], "charact": [8, 10, 13, 21, 27, 28, 29, 34, 35, 43, 119, 120, 121, 123, 134, 306, 424, 646, 648, 651, 655, 656, 658, 659, 660, 661, 662, 664, 665, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 682, 691, 862, 913, 918, 1031, 1226, 1228, 1231, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1262, 1271], "displai": [8, 11, 12, 13, 14, 18, 20, 24, 26, 37, 169, 189, 306, 825, 913], "tabl": [8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 35, 36, 37, 48, 49, 50, 52, 108, 115, 124, 125, 135, 136, 210, 229, 253, 259, 265, 273, 274, 306, 847, 877, 885, 913, 1316], "outlin": 8, "fals": [8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 54, 60, 61, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 162, 163, 164, 165, 169, 174, 183, 188, 189, 190, 191, 192, 193, 194, 195, 199, 201, 203, 204, 205, 208, 210, 211, 212, 217, 218, 224, 225, 227, 229, 230, 238, 239, 240, 241, 242, 246, 250, 252, 253, 256, 260, 262, 264, 265, 269, 270, 271, 274, 275, 277, 279, 288, 290, 293, 294, 296, 299, 306, 317, 318, 319, 321, 331, 334, 335, 338, 342, 343, 351, 356, 359, 362, 363, 364, 365, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 396, 410, 427, 429, 442, 447, 448, 449, 450, 451, 452, 453, 471, 474, 478, 479, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 494, 496, 499, 500, 504, 509, 512, 514, 516, 526, 533, 537, 540, 546, 547, 549, 551, 555, 558, 560, 563, 582, 583, 585, 587, 590, 591, 596, 599, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 624, 627, 632, 634, 635, 638, 639, 640, 642, 645, 650, 652, 663, 664, 665, 666, 671, 672, 674, 681, 683, 684, 686, 704, 705, 707, 710, 713, 714, 715, 716, 717, 720, 723, 724, 725, 728, 729, 732, 733, 737, 742, 743, 744, 745, 746, 757, 758, 761, 773, 776, 782, 787, 788, 790, 791, 800, 816, 818, 819, 820, 821, 822, 825, 830, 832, 838, 839, 840, 841, 842, 843, 847, 848, 850, 852, 853, 862, 866, 871, 874, 876, 877, 882, 883, 885, 888, 897, 899, 902, 903, 905, 908, 913, 917, 918, 922, 923, 934, 937, 938, 941, 945, 946, 954, 959, 961, 962, 964, 965, 967, 969, 972, 975, 976, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 999, 1013, 1034, 1036, 1049, 1055, 1056, 1058, 1059, 1060, 1061, 1068, 1074, 1081, 1082, 1083, 1085, 1087, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1104, 1107, 1108, 1112, 1117, 1120, 1122, 1124, 1134, 1141, 1145, 1148, 1161, 1167, 1170, 1171, 1173, 1175, 1176, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1200, 1203, 1208, 1213, 1215, 1218, 1219, 1220, 1222, 1225, 1230, 1232, 1243, 1244, 1245, 1246, 1251, 1252, 1254, 1261, 1263, 1264, 1266, 1285, 1289, 1290, 1293, 1296, 1298, 1299, 1308, 1316], "revert": [8, 10, 11], "utf8_full_condens": [8, 21, 115], "format": [8, 12, 16, 17, 21, 33, 34, 37, 38, 39, 43, 118, 120, 121, 122, 126, 128, 134, 140, 176, 189, 208, 220, 240, 241, 261, 304, 306, 428, 431, 434, 562, 563, 681, 683, 684, 688, 747, 830, 831, 857, 870, 913, 1038, 1041, 1261, 1263, 1264, 1268, 1307], "style": [8, 21, 37, 122, 229, 306], "abc": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 314, 648, 664, 677, 800, 918, 1228, 1244, 1245], "xyz": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 314, 642, 648, 800, 1222, 1228, 1286, 1308], "f64": [8, 10, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 47, 54, 56, 58, 62, 79, 109, 111, 129, 140, 150, 163, 164, 165, 167, 169, 170, 173, 178, 179, 183, 188, 189, 190, 191, 201, 202, 210, 211, 216, 217, 218, 219, 223, 229, 230, 231, 251, 252, 254, 256, 268, 276, 279, 284, 288, 290, 293, 294, 295, 296, 298, 299, 306, 313, 316, 323, 324, 325, 326, 327, 328, 346, 352, 357, 366, 369, 370, 374, 375, 376, 389, 390, 394, 395, 429, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 463, 464, 469, 471, 477, 487, 489, 490, 491, 493, 494, 496, 509, 521, 522, 534, 541, 542, 543, 544, 546, 552, 553, 554, 566, 569, 571, 580, 581, 582, 583, 589, 593, 596, 597, 598, 599, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 630, 631, 632, 636, 637, 701, 702, 706, 711, 721, 722, 726, 727, 729, 731, 748, 749, 764, 767, 768, 769, 781, 789, 796, 800, 818, 819, 825, 827, 833, 834, 838, 839, 846, 847, 848, 855, 856, 863, 876, 878, 886, 888, 890, 893, 897, 899, 902, 903, 904, 905, 907, 908, 913, 918, 926, 927, 928, 929, 930, 931, 949, 955, 960, 973, 974, 981, 982, 983, 993, 994, 997, 998, 1036, 1058, 1059, 1060, 1061, 1062, 1066, 1070, 1077, 1080, 1117, 1129, 1130, 1142, 1149, 1150, 1151, 1152, 1169, 1173, 1175, 1179, 1185, 1187, 1188, 1190, 1191, 1192, 1194, 1195, 1196, 1211, 1212, 1216, 1282, 1283, 1295, 1308, 1317], "multi": [9, 37, 120, 121, 268, 306, 454, 647, 800, 1227], "automat": [9, 49, 52, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 134, 138, 150, 152, 154, 244, 253, 279, 306, 428, 442, 549, 550, 603, 676, 677, 678, 800, 868, 877, 888, 913, 917, 1035, 1049, 1154, 1179, 1256, 1257, 1258, 1308, 1316], "turn": [9, 43, 44, 45, 46, 60, 61, 120, 121, 134, 689, 821, 822, 830, 832, 852, 853, 862, 913, 1269], "struct": [9, 106, 115, 225, 244, 267, 272, 279, 306, 355, 389, 474, 539, 573, 575, 577, 596, 606, 607, 649, 652, 672, 673, 710, 733, 734, 736, 737, 738, 763, 800, 868, 884, 888, 901, 913, 958, 993, 1147, 1173, 1182, 1229, 1232, 1252, 1253, 1308], "v": [9, 10, 42, 49, 50, 175, 306, 623, 715, 717, 800, 1199, 1308], "v2": [9, 126, 137], "out": [9, 15, 43, 44, 45, 46, 115, 142, 238, 241, 306, 342, 360, 512, 514, 537, 639, 643, 650, 790, 866, 913, 945, 962, 1120, 1122, 1145, 1219, 1223, 1230], "separ": [10, 11, 25, 28, 33, 34, 43, 117, 119, 120, 121, 125, 134, 227, 229, 262, 270, 272, 306, 321, 340, 343, 510, 516, 551, 646, 728, 733, 734, 737, 738, 800, 884, 913, 943, 946, 1118, 1124, 1226, 1277, 1285, 1308], "set_thousands_separ": 10, "thousand": [10, 28], "group": [10, 28, 37, 42, 46, 47, 121, 163, 190, 191, 192, 193, 194, 195, 209, 225, 227, 229, 238, 241, 273, 275, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306, 315, 365, 388, 456, 462, 467, 470, 509, 549, 551, 559, 561, 588, 599, 607, 608, 634, 635, 639, 647, 648, 649, 650, 664, 665, 705, 710, 764, 800, 818, 838, 839, 840, 841, 842, 843, 866, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 917, 918, 992, 1117, 1183, 1219, 1227, 1228, 1229, 1230, 1244, 1245, 1296, 1308], "9876": 10, "54321": 10, "1010101": 10, "123456": [10, 918], "78": 10, "tbl_cell_numeric_align": [10, 11, 28], "right": [10, 11, 16, 17, 19, 28, 37, 70, 120, 121, 143, 144, 145, 146, 191, 192, 194, 195, 210, 211, 238, 274, 306, 389, 450, 452, 453, 478, 527, 528, 529, 530, 596, 608, 611, 612, 613, 614, 615, 617, 618, 619, 623, 632, 668, 726, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 847, 848, 866, 885, 913, 993, 1058, 1060, 1061, 1081, 1135, 1136, 1137, 1138, 1173, 1199, 1213, 1248, 1308], "thousands_separ": [10, 11, 28], "decimal_separ": [10, 28], "float_precis": [10, 11, 28, 34, 37, 43, 306, 913], "print": [10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 121, 142, 143, 145, 173, 189, 190, 209, 212, 263, 283, 306, 476, 563, 800, 821, 845, 913, 1089, 1287, 1308, 1317], "876": 10, "543": 10, "010": [10, 686, 1266], "101": [10, 28, 400, 686, 1266, 1317], "000": [10, 11, 28, 37, 306, 1317], "123": [10, 642, 648, 665, 691, 790, 918, 1222, 1228, 1271, 1286, 1308], "456": [10, 11, 400, 918, 1003, 1286, 1308], "780": 10, "precis": [11, 12, 34, 37, 43, 70, 122, 208, 240, 241, 261, 268, 306, 398, 685, 913, 918, 1001, 1265], "int": [11, 13, 14, 15, 18, 26, 27, 34, 35, 37, 42, 43, 46, 49, 52, 56, 63, 70, 111, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 160, 162, 164, 169, 175, 178, 179, 181, 185, 187, 189, 196, 197, 198, 200, 201, 206, 208, 209, 211, 213, 214, 215, 217, 222, 224, 225, 235, 236, 239, 242, 247, 248, 249, 251, 254, 255, 257, 258, 263, 266, 269, 273, 276, 278, 281, 282, 289, 300, 306, 314, 338, 342, 350, 352, 355, 357, 358, 364, 365, 388, 392, 396, 450, 452, 453, 457, 458, 459, 465, 467, 468, 470, 472, 473, 474, 498, 504, 507, 512, 513, 514, 515, 526, 531, 532, 534, 536, 537, 538, 539, 541, 587, 589, 592, 593, 596, 599, 602, 604, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 628, 633, 637, 647, 651, 652, 653, 658, 661, 662, 663, 664, 668, 670, 672, 673, 682, 685, 686, 691, 698, 699, 700, 704, 705, 711, 713, 720, 729, 731, 741, 744, 747, 753, 755, 757, 758, 773, 776, 777, 778, 781, 782, 785, 786, 789, 791, 800, 816, 819, 825, 832, 833, 834, 837, 844, 848, 851, 862, 872, 873, 875, 878, 880, 881, 882, 886, 887, 891, 892, 898, 909, 913, 932, 933, 941, 945, 953, 955, 958, 960, 966, 967, 975, 976, 992, 995, 996, 999, 1057, 1058, 1060, 1061, 1065, 1066, 1067, 1071, 1072, 1075, 1076, 1077, 1103, 1105, 1106, 1112, 1113, 1115, 1120, 1121, 1122, 1123, 1134, 1139, 1140, 1142, 1144, 1145, 1146, 1147, 1149, 1161, 1162, 1164, 1165, 1166, 1168, 1169, 1172, 1173, 1175, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1205, 1206, 1209, 1214, 1217, 1227, 1231, 1232, 1233, 1238, 1241, 1242, 1243, 1244, 1248, 1250, 1252, 1253, 1262, 1265, 1266, 1271, 1278, 1279, 1280, 1281, 1287, 1292, 1297, 1308, 1316, 1317], "control": [11, 12, 37, 52, 61, 62, 125, 148, 253, 306, 603, 800, 822, 830, 877, 913, 1179, 1308], "number": [11, 12, 13, 14, 15, 18, 26, 34, 35, 37, 42, 43, 46, 53, 54, 68, 69, 70, 84, 92, 102, 108, 110, 111, 112, 114, 117, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 137, 138, 139, 141, 148, 150, 151, 153, 154, 155, 162, 164, 168, 175, 176, 178, 179, 189, 197, 208, 209, 212, 213, 224, 225, 242, 248, 249, 254, 257, 269, 273, 276, 287, 289, 291, 300, 306, 332, 348, 350, 355, 358, 364, 365, 377, 388, 389, 392, 396, 399, 408, 411, 414, 417, 419, 429, 443, 444, 446, 450, 451, 452, 453, 457, 459, 465, 473, 487, 489, 497, 498, 507, 515, 518, 519, 524, 526, 531, 534, 536, 539, 541, 588, 592, 596, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 625, 626, 628, 637, 651, 652, 653, 655, 656, 657, 660, 664, 670, 672, 673, 682, 685, 698, 704, 705, 711, 725, 729, 730, 731, 747, 755, 760, 777, 778, 781, 785, 789, 800, 816, 819, 824, 831, 832, 833, 834, 844, 851, 862, 872, 873, 878, 880, 882, 886, 896, 898, 900, 909, 913, 951, 953, 958, 966, 976, 992, 993, 995, 999, 1002, 1011, 1014, 1020, 1024, 1026, 1036, 1050, 1051, 1053, 1057, 1058, 1059, 1060, 1061, 1065, 1067, 1076, 1088, 1105, 1106, 1115, 1123, 1126, 1127, 1132, 1134, 1139, 1144, 1147, 1161, 1162, 1173, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1205, 1206, 1209, 1217, 1231, 1232, 1233, 1235, 1236, 1237, 1240, 1244, 1245, 1250, 1252, 1253, 1262, 1265, 1279, 1292, 1297, 1308, 1317], "place": [11, 12, 34, 43, 162, 171, 177, 199, 200, 201, 229, 234, 236, 241, 249, 252, 269, 277, 306, 331, 343, 351, 364, 365, 516, 533, 626, 634, 635, 704, 705, 723, 800, 816, 873, 876, 882, 913, 924, 934, 946, 954, 1064, 1124, 1141, 1176, 1206, 1215, 1308], "float": [11, 12, 34, 37, 43, 73, 74, 120, 121, 125, 134, 140, 143, 144, 145, 146, 147, 150, 152, 159, 169, 175, 178, 211, 231, 242, 249, 298, 306, 338, 370, 389, 394, 395, 429, 447, 448, 449, 450, 452, 453, 458, 463, 469, 471, 477, 480, 484, 487, 489, 490, 491, 496, 504, 526, 542, 546, 552, 566, 580, 581, 582, 583, 593, 596, 597, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 706, 774, 776, 800, 825, 833, 848, 863, 873, 874, 907, 913, 918, 941, 967, 974, 993, 994, 996, 997, 998, 1016, 1017, 1036, 1055, 1057, 1058, 1060, 1061, 1066, 1070, 1077, 1088, 1104, 1112, 1113, 1134, 1150, 1164, 1165, 1172, 1173, 1174, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1197, 1201, 1202, 1213, 1217, 1278, 1289, 1297, 1308, 1317], "point": [11, 12, 37, 38, 43, 44, 45, 46, 60, 61, 70, 72, 73, 74, 132, 139, 140, 150, 152, 178, 191, 194, 212, 253, 273, 274, 306, 370, 388, 389, 394, 428, 429, 458, 463, 474, 487, 489, 526, 551, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 777, 778, 800, 821, 822, 833, 839, 842, 852, 853, 864, 877, 885, 913, 972, 974, 992, 993, 997, 1035, 1036, 1066, 1070, 1077, 1088, 1134, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1289, 1308], "standard": [11, 37, 254, 264, 268, 306, 411, 452, 617, 632, 637, 654, 781, 796, 800, 878, 913, 1014, 1060, 1213, 1217, 1234, 1308, 1317], "behaviour": [11, 54, 62, 172, 253, 306, 639, 647, 648, 650, 664, 665, 706, 800, 828, 877, 913, 1219, 1227, 1228, 1230, 1244, 1245], "when": [11, 15, 18, 20, 24, 34, 37, 42, 43, 46, 52, 53, 69, 83, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 125, 126, 128, 131, 132, 134, 135, 137, 138, 140, 143, 144, 145, 146, 150, 152, 160, 162, 169, 173, 175, 177, 179, 183, 191, 192, 194, 195, 210, 214, 228, 238, 239, 241, 244, 245, 248, 252, 262, 264, 268, 269, 271, 274, 280, 306, 350, 371, 391, 396, 450, 452, 453, 459, 531, 539, 550, 560, 592, 603, 625, 634, 635, 640, 651, 655, 656, 666, 670, 676, 677, 678, 681, 682, 723, 725, 733, 737, 751, 800, 816, 825, 826, 834, 839, 840, 842, 843, 847, 852, 853, 866, 868, 869, 872, 876, 882, 883, 885, 889, 913, 953, 977, 994, 999, 1057, 1058, 1060, 1061, 1064, 1067, 1139, 1154, 1179, 1198, 1201, 1205, 1220, 1231, 1235, 1236, 1246, 1250, 1256, 1257, 1258, 1261, 1262, 1285, 1289, 1308], "larger": [11, 43, 44, 45, 46, 60, 61, 729, 821, 822, 913], "should": [11, 35, 37, 43, 44, 45, 46, 62, 108, 110, 112, 114, 124, 125, 129, 130, 132, 134, 138, 140, 147, 148, 152, 162, 170, 208, 211, 214, 239, 240, 241, 252, 261, 262, 269, 272, 292, 306, 315, 364, 365, 368, 388, 391, 445, 451, 454, 487, 489, 509, 551, 562, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 623, 632, 635, 704, 705, 710, 723, 747, 749, 761, 764, 777, 778, 790, 800, 816, 826, 827, 832, 847, 848, 853, 870, 876, 882, 884, 913, 918, 970, 992, 1052, 1059, 1117, 1155, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1199, 1213, 1288, 1296, 1308], "ensur": [11, 37, 123, 149, 150, 152, 190, 193, 227, 239, 264, 306, 478, 549, 800, 838, 841, 852, 853, 913, 917, 918, 1289, 1308], "awar": [11, 122, 208, 240, 241, 261, 306, 451, 640, 666, 800, 832, 913, 1059, 1220, 1246, 1264, 1308], "both": [11, 26, 34, 43, 53, 91, 92, 122, 191, 192, 194, 195, 210, 211, 221, 238, 239, 265, 274, 306, 320, 371, 389, 454, 478, 596, 608, 611, 612, 613, 614, 615, 617, 618, 619, 670, 742, 743, 745, 746, 787, 788, 796, 800, 811, 839, 840, 842, 843, 847, 848, 858, 866, 885, 913, 977, 1081, 1091, 1250, 1290, 1308], "limit": [11, 12, 46, 122, 123, 134, 154, 179, 306, 358, 372, 373, 459, 465, 800, 834, 844, 913, 978, 979, 1067, 1308], "represent": [11, 40, 41, 68, 69, 71, 84, 115, 263, 306, 368, 399, 404, 408, 411, 412, 414, 415, 417, 419, 422, 425, 426, 429, 443, 444, 446, 703, 800, 830, 850, 913, 970, 971, 1002, 1007, 1011, 1013, 1014, 1018, 1020, 1021, 1024, 1026, 1029, 1032, 1033, 1036, 1050, 1051, 1053, 1287, 1291, 1308], "look": [11, 191, 306, 359, 539, 549, 800, 839, 913, 961], "appli": [11, 21, 34, 37, 43, 47, 62, 122, 134, 147, 150, 152, 169, 183, 214, 228, 253, 292, 306, 331, 399, 402, 403, 404, 408, 410, 411, 412, 414, 415, 417, 419, 422, 425, 426, 429, 432, 443, 444, 446, 452, 453, 547, 549, 551, 592, 609, 611, 612, 614, 618, 664, 665, 681, 683, 684, 688, 723, 733, 734, 737, 738, 751, 762, 763, 764, 775, 790, 800, 825, 844, 851, 852, 853, 861, 877, 901, 913, 977, 1002, 1005, 1006, 1007, 1011, 1013, 1014, 1018, 1020, 1021, 1024, 1026, 1029, 1032, 1033, 1036, 1039, 1050, 1051, 1053, 1060, 1061, 1155, 1184, 1186, 1187, 1189, 1193, 1244, 1245, 1261, 1263, 1264, 1268, 1308], "float64": [11, 34, 37, 43, 111, 120, 129, 150, 173, 175, 183, 243, 268, 279, 306, 323, 324, 325, 326, 327, 328, 366, 374, 375, 376, 390, 429, 451, 454, 487, 489, 598, 630, 631, 701, 702, 749, 773, 776, 791, 800, 829, 867, 888, 913, 918, 1036, 1059, 1290, 1295, 1308], "dtype": [11, 37, 53, 57, 63, 69, 83, 91, 92, 108, 110, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 131, 134, 147, 148, 149, 150, 152, 159, 163, 191, 192, 194, 195, 211, 238, 263, 264, 265, 268, 273, 282, 306, 321, 366, 367, 381, 382, 445, 454, 467, 503, 512, 537, 545, 547, 549, 550, 551, 601, 602, 608, 611, 612, 613, 614, 615, 617, 618, 619, 627, 652, 653, 681, 697, 699, 703, 709, 718, 720, 749, 753, 757, 758, 760, 761, 762, 763, 764, 773, 776, 782, 791, 800, 818, 839, 840, 842, 843, 848, 866, 892, 913, 918, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 967, 968, 969, 971, 976, 986, 987, 994, 995, 1052, 1056, 1057, 1082, 1084, 1088, 1091, 1098, 1100, 1102, 1107, 1108, 1111, 1120, 1146, 1153, 1154, 1155, 1181, 1200, 1207, 1232, 1233, 1261, 1278, 1287, 1289, 1290, 1291, 1295, 1308, 1317], "doe": [11, 34, 36, 43, 54, 62, 102, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 124, 125, 129, 130, 134, 135, 138, 140, 165, 177, 191, 196, 209, 210, 239, 240, 241, 271, 279, 282, 306, 309, 445, 472, 539, 550, 677, 678, 708, 796, 800, 820, 825, 832, 839, 842, 847, 853, 883, 888, 892, 913, 980, 1052, 1064, 1074, 1075, 1154, 1208, 1298, 1308, 1312], "cover": 11, "nativ": [11, 120, 122, 125, 126, 128, 132, 148, 208, 214, 240, 241, 261, 292, 306, 551, 764, 800, 806, 877, 901, 913, 1155, 1308, 1317], "level": [11, 37, 42, 46, 134, 137, 138, 139, 150, 183, 214, 225, 306, 460, 800, 812, 844, 851, 913], "larg": [11, 12, 15, 54, 122, 125, 131], "maximum": [11, 27, 34, 43, 70, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 140, 148, 149, 150, 152, 189, 191, 215, 216, 306, 336, 501, 552, 580, 590, 599, 651, 652, 653, 656, 670, 682, 765, 766, 800, 839, 854, 913, 939, 1015, 1109, 1156, 1164, 1170, 1175, 1231, 1232, 1233, 1236, 1250, 1262, 1308], "import": [11, 17, 29, 32, 34, 36, 37, 38, 39, 42, 54, 69, 108, 109, 112, 113, 120, 122, 123, 129, 130, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 163, 169, 170, 172, 189, 191, 209, 211, 220, 227, 229, 253, 262, 264, 268, 273, 275, 306, 309, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 460, 562, 610, 611, 612, 614, 617, 618, 619, 721, 722, 725, 742, 743, 745, 746, 747, 787, 788, 796, 800, 812, 818, 822, 825, 826, 827, 828, 839, 848, 853, 857, 870, 913, 981, 983, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1059, 1085, 1090, 1094, 1095, 1100, 1185, 1211, 1282, 1308, 1312, 1317], "pi": [11, 390, 800, 981, 983, 1211, 1282, 1308], "e": [11, 32, 34, 36, 38, 39, 42, 43, 109, 120, 126, 128, 137, 140, 189, 197, 207, 234, 257, 259, 264, 273, 306, 314, 321, 391, 447, 451, 454, 478, 542, 551, 556, 557, 559, 560, 561, 563, 564, 627, 632, 650, 677, 678, 749, 764, 790, 800, 826, 850, 864, 913, 918, 1055, 1056, 1059, 1081, 1200, 1213, 1230, 1308, 1317], "const": 11, "15": [11, 37, 142, 149, 169, 191, 201, 214, 238, 306, 388, 392, 421, 428, 442, 451, 592, 608, 618, 653, 734, 744, 786, 787, 800, 825, 839, 866, 913, 992, 995, 1035, 1049, 1059, 1233, 1308], "141592653589793": 11, "718281828459045": [11, 447, 542, 800, 1055, 1150, 1308], "fix": [11, 63, 72, 125, 148, 150, 445, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 747, 800, 1052, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "align": [11, 16, 17, 37, 54, 62, 306], "numer": [11, 17, 34, 37, 43, 124, 135, 163, 170, 211, 220, 229, 265, 273, 306, 314, 371, 464, 478, 544, 567, 569, 593, 602, 627, 649, 691, 695, 706, 800, 812, 818, 827, 848, 857, 913, 918, 977, 994, 1056, 1081, 1098, 1200, 1207, 1229, 1271, 1289, 1308, 1317], "column": [11, 17, 18, 19, 22, 23, 25, 36, 37, 40, 53, 54, 55, 62, 69, 83, 92, 94, 96, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 162, 163, 167, 168, 170, 171, 172, 173, 176, 180, 181, 182, 186, 187, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 206, 207, 208, 210, 211, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 252, 254, 255, 256, 260, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 284, 291, 306, 316, 317, 319, 331, 340, 349, 351, 354, 365, 371, 377, 378, 389, 399, 400, 402, 403, 404, 408, 410, 411, 412, 414, 415, 417, 419, 422, 425, 426, 429, 431, 432, 434, 443, 444, 446, 451, 454, 456, 460, 462, 474, 478, 493, 497, 503, 510, 512, 533, 537, 538, 539, 550, 551, 557, 559, 561, 562, 571, 574, 576, 578, 579, 588, 594, 596, 600, 602, 604, 606, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 627, 634, 635, 638, 646, 650, 651, 672, 673, 681, 682, 683, 684, 685, 686, 688, 693, 696, 705, 712, 714, 715, 716, 717, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 800, 816, 818, 824, 827, 828, 829, 831, 835, 838, 839, 840, 841, 842, 843, 847, 848, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 876, 878, 879, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 900, 901, 913, 918, 922, 923, 943, 952, 954, 957, 969, 971, 977, 993, 1002, 1005, 1006, 1007, 1011, 1013, 1014, 1018, 1020, 1021, 1024, 1026, 1029, 1032, 1033, 1036, 1038, 1039, 1041, 1050, 1051, 1053, 1059, 1063, 1074, 1077, 1111, 1118, 1120, 1141, 1146, 1173, 1180, 1183, 1207, 1218, 1226, 1230, 1252, 1253, 1261, 1263, 1264, 1265, 1266, 1268, 1274, 1277, 1285, 1286, 1308, 1317], "order": [11, 37, 43, 44, 45, 46, 47, 49, 54, 60, 66, 111, 122, 141, 143, 144, 162, 172, 180, 190, 191, 192, 193, 194, 195, 210, 227, 228, 229, 238, 240, 242, 246, 252, 264, 269, 271, 275, 306, 331, 351, 356, 364, 365, 368, 394, 395, 460, 508, 526, 533, 540, 599, 608, 612, 613, 614, 615, 617, 619, 622, 623, 624, 634, 635, 667, 677, 678, 679, 680, 694, 704, 705, 707, 708, 710, 723, 790, 800, 811, 816, 828, 835, 838, 839, 840, 841, 842, 843, 847, 857, 866, 871, 876, 877, 882, 883, 913, 934, 954, 959, 970, 972, 997, 998, 1068, 1099, 1116, 1134, 1141, 1148, 1175, 1181, 1197, 1199, 1203, 1215, 1247, 1275, 1293, 1294, 1296, 1308, 1317], "cleanli": [11, 189, 306], "line": [11, 21, 37, 120, 121, 125, 134, 189, 203, 205, 306, 309, 647, 1227], "up": [11, 37, 83, 123, 208, 211, 240, 241, 261, 306, 321, 370, 551, 651, 682, 800, 847, 848, 853, 913, 918, 974, 1231, 1262, 1308], "xx": [11, 55, 57, 149, 152, 169, 253, 306, 825, 913, 918], "yy": [11, 55, 57, 149, 152, 169, 253, 306, 825, 913, 918], "11111111": 11, "44444444444": 11, "100000": [11, 28], "987654321": 11, "23456789": 11, "11": [11, 17, 42, 46, 142, 150, 161, 169, 211, 238, 306, 316, 420, 421, 424, 428, 442, 466, 477, 513, 565, 589, 599, 608, 610, 618, 633, 713, 783, 788, 800, 815, 821, 822, 825, 844, 851, 862, 866, 880, 913, 918, 1031, 1035, 1049, 1155, 1185, 1308], "111": 11, "100": [11, 18, 28, 37, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 248, 306, 603, 625, 640, 652, 653, 666, 685, 746, 800, 872, 913, 1151, 1179, 1186, 1187, 1189, 1205, 1220, 1232, 1233, 1246, 1265, 1308, 1317], "988": 11, "44": [11, 221, 306, 393, 800, 858, 913], "444": 11, "23": [11, 169, 191, 238, 268, 306, 400, 404, 408, 425, 428, 444, 608, 611, 612, 614, 617, 618, 619, 744, 747, 786, 787, 788, 800, 825, 839, 866, 877, 913, 918, 1003, 1011, 1317], "789": [11, 918], "fmt": [12, 211, 306, 476, 752, 800, 845, 913], "floatfmt": 12, "mix": [12, 211, 306, 877, 913, 994, 1264, 1308], "how": [12, 36, 37, 54, 62, 123, 132, 139, 172, 210, 211, 229, 273, 274, 306, 339, 368, 392, 427, 428, 442, 477, 505, 506, 507, 588, 602, 616, 681, 684, 725, 744, 790, 800, 828, 847, 885, 913, 917, 942, 970, 995, 1034, 1035, 1049, 1113, 1114, 1115, 1191, 1261, 1264, 1308], "full": [12, 54, 62, 69, 111, 114, 120, 121, 122, 124, 129, 134, 135, 136, 138, 140, 191, 192, 194, 195, 238, 306, 651, 652, 653, 681, 682, 683, 684, 688, 839, 840, 842, 843, 852, 853, 866, 913, 918, 1231, 1232, 1233, 1261, 1262, 1263, 1264, 1268, 1308, 1317], "scientif": 12, "notat": [12, 37, 306], "small": [12, 123, 149, 212, 306, 428, 832, 913, 1317], "2304980958725870923": 12, "1e6": 12, "1e": [12, 143, 144, 145, 146], "230498": 12, "0000e": 12, "230498095872587": 12, "1000000": [12, 1047], "00000001": [12, 713, 800], "plai": [13, 728], "sam": 13, "As": [13, 53, 91, 92, 108, 110, 111, 112, 114, 125, 129, 130, 138, 268, 306, 539, 790, 913], "time": [13, 36, 47, 52, 59, 60, 61, 69, 71, 124, 132, 134, 135, 169, 177, 191, 192, 194, 195, 211, 238, 275, 306, 338, 364, 365, 397, 398, 400, 401, 402, 406, 407, 424, 427, 428, 431, 433, 434, 442, 445, 451, 503, 504, 539, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 628, 681, 684, 688, 703, 704, 705, 727, 728, 742, 743, 744, 745, 746, 747, 753, 787, 788, 800, 821, 822, 825, 839, 840, 842, 843, 848, 862, 866, 913, 918, 941, 966, 1000, 1001, 1003, 1004, 1009, 1010, 1031, 1034, 1035, 1038, 1040, 1041, 1049, 1052, 1059, 1064, 1111, 1112, 1113, 1183, 1209, 1261, 1264, 1268, 1291, 1292, 1308, 1317], "goe": 13, "By": [13, 15, 31, 54, 120, 121, 134, 191, 210, 211, 238, 240, 248, 254, 274, 275, 276, 306, 350, 424, 428, 442, 531, 534, 541, 608, 611, 612, 613, 614, 615, 617, 618, 619, 625, 637, 711, 729, 731, 742, 743, 745, 746, 747, 761, 781, 787, 788, 789, 800, 821, 839, 847, 848, 866, 872, 878, 886, 913, 953, 1031, 1035, 1049, 1139, 1205, 1217, 1297, 1308], "begin": [13, 37, 306, 450, 452, 453, 647, 682, 800, 1058, 1060, 1061, 1227, 1262, 1308], "beauti": 13, "friendship": 13, "len_byt": [13, 656, 657, 1236, 1237], "len": [13, 37, 148, 150, 209, 229, 282, 287, 292, 306, 377, 519, 551, 559, 561, 730, 757, 800, 892, 896, 901, 913, 1127, 1308], "u32": [13, 47, 122, 161, 163, 168, 226, 281, 282, 287, 291, 297, 299, 306, 315, 322, 329, 330, 331, 332, 333, 336, 337, 339, 348, 377, 378, 474, 497, 501, 502, 506, 518, 524, 570, 586, 599, 607, 611, 612, 614, 617, 618, 619, 623, 642, 650, 655, 656, 703, 708, 714, 719, 723, 724, 730, 732, 757, 760, 772, 800, 815, 818, 824, 860, 891, 892, 896, 900, 906, 908, 913, 934, 935, 936, 939, 940, 942, 951, 967, 971, 1077, 1109, 1110, 1114, 1126, 1132, 1175, 1183, 1199, 1222, 1230, 1235, 1236, 1291, 1294, 1296, 1308], "go": [13, 120, 121, 134, 264, 306, 645, 1225], "37": 13, "bea": 13, "48": [13, 238, 306, 608, 800, 866, 913], "fmt_str_length": [13, 743, 746], "50": [13, 28, 37, 169, 177, 189, 306, 371, 428, 442, 743, 800, 825, 913, 977, 994, 1049, 1308], "element": [14, 15, 26, 149, 152, 162, 168, 206, 229, 239, 252, 254, 269, 276, 306, 321, 323, 324, 325, 326, 327, 328, 339, 340, 364, 365, 369, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 394, 395, 455, 456, 460, 472, 483, 497, 505, 506, 508, 509, 510, 513, 518, 519, 527, 528, 529, 530, 534, 541, 543, 544, 551, 588, 589, 599, 602, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 629, 630, 631, 635, 636, 637, 672, 673, 685, 701, 702, 704, 705, 711, 723, 729, 731, 777, 778, 781, 789, 800, 816, 824, 876, 878, 882, 886, 913, 925, 926, 927, 928, 929, 930, 931, 942, 943, 966, 973, 976, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 997, 998, 1062, 1063, 1068, 1076, 1089, 1103, 1105, 1106, 1113, 1114, 1116, 1117, 1118, 1121, 1126, 1127, 1135, 1136, 1137, 1138, 1151, 1152, 1155, 1169, 1175, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1199, 1210, 1211, 1212, 1216, 1217, 1252, 1253, 1265, 1279, 1282, 1283, 1287, 1292, 1293, 1297, 1308], "empti": [14, 32, 34, 43, 98, 111, 120, 121, 125, 131, 134, 164, 165, 191, 204, 220, 306, 761, 779, 819, 820, 839, 857, 913, 918, 976, 980, 1084, 1308], "alwai": [14, 34, 36, 43, 47, 70, 72, 120, 149, 190, 193, 210, 214, 253, 292, 306, 559, 681, 742, 790, 847, 853, 877, 913, 1155, 1261, 1308, 1316, 1317], "neg": [14, 68, 69, 70, 71, 120, 121, 126, 128, 132, 141, 191, 192, 194, 195, 197, 213, 238, 248, 249, 251, 257, 282, 306, 350, 531, 532, 592, 608, 625, 626, 633, 651, 670, 682, 800, 839, 840, 842, 843, 866, 872, 873, 875, 891, 892, 913, 953, 1076, 1106, 1139, 1140, 1205, 1206, 1214, 1231, 1250, 1262, 1279, 1308], "result": [14, 34, 40, 41, 42, 43, 44, 45, 46, 54, 62, 112, 113, 114, 122, 123, 124, 125, 134, 137, 139, 140, 152, 177, 191, 194, 196, 210, 211, 225, 229, 238, 241, 248, 249, 264, 265, 275, 282, 284, 291, 306, 396, 428, 431, 434, 442, 450, 451, 452, 453, 457, 472, 478, 494, 538, 539, 549, 551, 562, 588, 596, 603, 604, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 624, 625, 626, 671, 672, 684, 706, 732, 733, 734, 737, 738, 742, 743, 744, 745, 746, 747, 761, 763, 773, 776, 777, 778, 791, 800, 817, 821, 825, 839, 840, 842, 843, 847, 852, 853, 862, 866, 870, 872, 873, 892, 893, 900, 913, 924, 993, 1035, 1038, 1041, 1049, 1058, 1060, 1061, 1064, 1065, 1075, 1081, 1104, 1146, 1155, 1173, 1179, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1203, 1205, 1206, 1251, 1252, 1264, 1288, 1289, 1290, 1308, 1316, 1317], "being": [14, 38, 43, 44, 45, 46, 60, 61, 70, 72, 120, 121, 122, 132, 134, 139, 140, 163, 176, 253, 262, 273, 274, 306, 321, 388, 389, 428, 474, 551, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 725, 748, 777, 778, 800, 818, 821, 822, 831, 832, 877, 885, 913, 972, 992, 993, 1035, 1077, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1285, 1308, 1317], "A": [14, 34, 37, 43, 47, 50, 60, 61, 66, 72, 115, 120, 121, 122, 123, 134, 136, 141, 154, 183, 191, 210, 211, 216, 218, 223, 229, 256, 260, 273, 274, 275, 279, 280, 306, 313, 394, 395, 400, 431, 434, 448, 449, 457, 469, 471, 480, 484, 487, 489, 496, 539, 546, 549, 560, 573, 582, 583, 605, 610, 611, 612, 613, 614, 615, 617, 618, 619, 639, 640, 641, 642, 647, 648, 649, 650, 651, 654, 656, 664, 665, 666, 670, 682, 691, 727, 747, 748, 752, 800, 839, 847, 848, 864, 885, 888, 889, 913, 918, 997, 998, 1003, 1038, 1041, 1065, 1185, 1186, 1187, 1189, 1192, 1193, 1194, 1219, 1220, 1221, 1222, 1227, 1228, 1229, 1230, 1231, 1234, 1236, 1244, 1245, 1246, 1250, 1262, 1271, 1308, 1316], "content": [14, 628, 800, 1209, 1308], "final": [14, 37, 54, 139, 211, 306, 450, 452, 453, 800, 825, 832, 913, 917, 1058, 1060, 1061, 1308], "item": [14, 62, 121, 189, 239, 242, 306, 338, 342, 343, 392, 456, 504, 507, 514, 516, 526, 622, 673, 800, 941, 945, 946, 995, 1063, 1112, 1115, 1122, 1124, 1134, 1197, 1253, 1308], "num": [14, 37, 267, 306, 478, 800, 1081, 1308], "fmt_table_cell_list_len": 14, "10": [14, 17, 18, 28, 32, 34, 36, 37, 38, 39, 42, 46, 47, 54, 62, 115, 123, 134, 142, 150, 152, 165, 169, 177, 188, 189, 191, 197, 199, 201, 202, 207, 211, 224, 228, 229, 230, 234, 236, 238, 244, 253, 257, 279, 284, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 316, 320, 329, 330, 331, 333, 371, 379, 382, 392, 396, 397, 399, 400, 402, 403, 406, 408, 412, 414, 415, 417, 420, 421, 422, 427, 428, 429, 432, 442, 445, 451, 472, 473, 477, 483, 493, 498, 507, 513, 515, 522, 532, 534, 536, 541, 543, 559, 561, 571, 586, 589, 592, 603, 608, 633, 686, 698, 713, 725, 726, 733, 742, 745, 748, 751, 753, 755, 761, 763, 785, 788, 800, 821, 822, 825, 839, 844, 846, 851, 861, 862, 866, 868, 879, 880, 888, 893, 897, 899, 902, 903, 904, 905, 906, 907, 908, 913, 918, 977, 995, 999, 1000, 1002, 1003, 1009, 1020, 1034, 1049, 1052, 1055, 1059, 1076, 1089, 1106, 1115, 1123, 1130, 1140, 1142, 1144, 1149, 1151, 1155, 1169, 1179, 1198, 1201, 1266, 1279, 1289, 1308, 1317], "size": [15, 42, 46, 120, 121, 122, 148, 149, 150, 152, 154, 175, 273, 306, 604, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 720, 757, 758, 777, 778, 800, 821, 913, 1057, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308, 1317], "overwrit": [15, 35, 36, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 138, 159, 274, 306, 316, 800, 832, 913], "chunk": [15, 46, 117, 120, 121, 132, 134, 137, 138, 139, 150, 152, 177, 209, 224, 306, 320, 600, 800, 913, 924, 975, 1064, 1073, 1161, 1176, 1284, 1308], "stream": [15, 38, 39, 43, 44, 45, 46, 60, 61, 128, 162, 190, 193, 210, 269, 271, 306, 549, 800, 816, 821, 822, 830, 832, 838, 841, 847, 852, 853, 857, 862, 874, 876, 882, 883, 913], "engin": [15, 35, 122, 123, 125, 154, 190, 193, 210, 214, 271, 292, 306, 549, 800, 838, 841, 847, 852, 853, 857, 883, 901, 913, 1155, 1308], "determin": [15, 34, 37, 43, 54, 62, 89, 120, 121, 122, 125, 131, 132, 134, 139, 141, 160, 183, 191, 194, 208, 209, 214, 229, 238, 270, 275, 306, 368, 410, 427, 428, 442, 474, 539, 550, 559, 596, 602, 603, 611, 612, 613, 614, 615, 617, 618, 619, 632, 640, 651, 681, 682, 684, 685, 744, 773, 776, 791, 800, 839, 842, 866, 913, 970, 1013, 1034, 1035, 1049, 1077, 1147, 1154, 1173, 1179, 1213, 1220, 1261, 1264, 1265, 1308], "thread": [15, 34, 43, 61, 117, 120, 121, 123, 154, 155, 252, 306, 321, 364, 365, 509, 551, 635, 704, 705, 723, 800, 816, 822, 876, 882, 913, 954, 1117, 1141, 1215, 1308], "pool": [15, 61, 154, 155, 822, 913], "For": [15, 36, 37, 122, 123, 124, 125, 135, 136, 172, 177, 210, 211, 238, 292, 306, 309, 450, 452, 453, 539, 551, 560, 601, 632, 639, 647, 648, 649, 650, 651, 682, 733, 737, 747, 751, 752, 796, 800, 828, 848, 866, 901, 913, 917, 1058, 1060, 1061, 1064, 1091, 1177, 1213, 1219, 1227, 1228, 1229, 1230, 1231, 1262, 1308, 1312], "some": [15, 31, 37, 53, 92, 111, 120, 121, 122, 125, 134, 159, 172, 241, 306, 391, 796, 800, 826, 828, 913, 1089, 1308, 1317], "dataset": [15, 42, 72, 120, 121, 125, 131, 134, 140, 210, 268, 306, 494, 800, 812, 847, 852, 853, 913, 1104, 1308], "esp": 15, "have": [15, 31, 37, 53, 54, 69, 92, 109, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 150, 152, 177, 208, 210, 211, 232, 238, 240, 241, 261, 268, 282, 306, 388, 391, 450, 452, 453, 551, 560, 599, 603, 608, 649, 800, 826, 847, 857, 866, 891, 892, 913, 917, 918, 992, 994, 1058, 1060, 1061, 1064, 1074, 1175, 1179, 1264, 1308, 1317], "too": [15, 832, 913], "optimist": 15, "lead": [15, 42, 115, 140, 191, 192, 194, 195, 218, 238, 248, 256, 306, 350, 451, 467, 470, 531, 549, 551, 608, 624, 625, 659, 675, 676, 678, 699, 729, 800, 839, 840, 842, 843, 852, 853, 866, 872, 895, 901, 913, 953, 1059, 1139, 1155, 1203, 1205, 1239, 1255, 1256, 1258, 1308], "memori": [15, 46, 60, 61, 62, 108, 109, 112, 113, 114, 120, 121, 122, 125, 126, 132, 134, 137, 138, 139, 159, 177, 214, 240, 241, 250, 264, 292, 306, 588, 600, 627, 800, 821, 822, 913, 1064, 1155, 1176, 1207, 1208, 1289, 1308], "error": [15, 36, 61, 100, 103, 110, 111, 114, 120, 121, 134, 163, 229, 239, 306, 316, 342, 343, 360, 366, 396, 493, 512, 514, 516, 537, 571, 639, 643, 647, 649, 650, 652, 654, 681, 683, 684, 688, 800, 818, 822, 895, 901, 913, 945, 946, 962, 967, 999, 1120, 1122, 1124, 1145, 1219, 1223, 1227, 1229, 1230, 1232, 1234, 1261, 1263, 1264, 1268, 1308], "row": [15, 21, 26, 34, 35, 37, 40, 42, 43, 46, 54, 55, 57, 62, 99, 102, 107, 111, 112, 113, 114, 115, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 143, 144, 148, 150, 160, 162, 164, 172, 177, 180, 183, 185, 189, 190, 191, 193, 196, 197, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 220, 225, 241, 242, 251, 257, 258, 261, 263, 268, 269, 271, 273, 274, 281, 282, 287, 289, 291, 292, 300, 306, 331, 332, 340, 355, 365, 456, 468, 473, 498, 510, 539, 588, 589, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 633, 635, 646, 652, 653, 698, 700, 705, 720, 723, 728, 730, 732, 737, 738, 751, 755, 757, 758, 760, 775, 777, 778, 785, 790, 800, 816, 819, 821, 828, 832, 835, 836, 837, 839, 844, 847, 848, 849, 851, 853, 857, 875, 880, 881, 882, 883, 885, 891, 892, 896, 898, 900, 901, 909, 913, 934, 943, 1063, 1064, 1072, 1076, 1118, 1169, 1180, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1214, 1226, 1232, 1233, 1279, 1281, 1308, 1317], "per": [15, 34, 37, 43, 125, 148, 150, 162, 189, 225, 226, 245, 252, 269, 280, 295, 297, 298, 306, 321, 342, 365, 509, 512, 514, 537, 549, 551, 571, 572, 574, 576, 578, 579, 635, 705, 710, 723, 800, 816, 869, 876, 882, 889, 904, 906, 907, 913, 917, 945, 1117, 1120, 1122, 1145, 1296, 1308], "everi": [15, 34, 43, 120, 121, 134, 185, 191, 194, 258, 261, 275, 306, 334, 335, 336, 337, 340, 342, 348, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 428, 442, 456, 468, 501, 502, 507, 510, 513, 514, 515, 524, 527, 532, 536, 607, 646, 700, 733, 734, 737, 738, 800, 832, 837, 839, 842, 881, 913, 937, 938, 939, 940, 943, 945, 951, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1035, 1049, 1063, 1072, 1074, 1109, 1110, 1115, 1118, 1121, 1122, 1123, 1132, 1135, 1140, 1144, 1183, 1226, 1281, 1308], "process": [15, 34, 43, 44, 45, 46, 60, 61, 120, 121, 122, 134, 154, 240, 306, 821, 822, 913], "liter": [16, 17, 21, 36, 122, 151, 152, 153, 244, 245, 248, 274, 279, 280, 306, 316, 359, 371, 400, 448, 449, 457, 464, 469, 471, 478, 496, 546, 550, 567, 569, 582, 583, 593, 603, 639, 642, 650, 664, 665, 695, 706, 715, 717, 720, 726, 727, 728, 736, 740, 741, 744, 757, 761, 766, 768, 771, 779, 782, 784, 786, 800, 834, 868, 869, 872, 885, 888, 889, 913, 918, 961, 977, 1003, 1065, 1081, 1179, 1198, 1201, 1205, 1219, 1222, 1230, 1244, 1245, 1308], "left": [16, 17, 37, 49, 54, 143, 144, 145, 146, 191, 192, 194, 195, 210, 211, 238, 274, 306, 389, 450, 452, 453, 477, 478, 596, 608, 611, 612, 613, 614, 615, 617, 618, 619, 623, 658, 703, 726, 733, 734, 737, 738, 742, 743, 745, 746, 751, 775, 787, 788, 790, 800, 839, 840, 842, 843, 847, 848, 866, 885, 913, 993, 1058, 1060, 1061, 1081, 1173, 1199, 1238, 1291, 1308], "center": [16, 17, 37, 306, 450, 452, 453, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 800, 1058, 1060, 1061, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "cell": [16, 17, 37, 306], "valueerror": [16, 21], "recognis": [16, 17, 21, 147], "column_abc": 16, "column_xyz": 16, "keyerror": 17, "datetim": [17, 34, 37, 43, 54, 115, 124, 125, 135, 150, 163, 169, 189, 191, 192, 194, 195, 209, 211, 238, 253, 275, 306, 309, 338, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 504, 608, 611, 612, 613, 614, 615, 617, 618, 619, 681, 684, 703, 725, 742, 743, 745, 746, 747, 753, 761, 787, 788, 800, 818, 825, 839, 840, 842, 843, 848, 866, 913, 918, 941, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1059, 1100, 1112, 1113, 1164, 1165, 1202, 1261, 1264, 1291, 1308], "date": [17, 37, 54, 69, 120, 121, 123, 125, 131, 134, 140, 150, 163, 169, 189, 191, 192, 194, 195, 209, 211, 238, 253, 306, 309, 338, 396, 398, 399, 400, 401, 404, 407, 410, 411, 414, 419, 420, 421, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 504, 608, 611, 612, 613, 614, 615, 617, 618, 619, 681, 683, 703, 725, 742, 743, 745, 746, 753, 761, 786, 800, 818, 825, 839, 840, 842, 843, 848, 866, 913, 918, 941, 999, 1001, 1002, 1003, 1004, 1007, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1020, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1059, 1100, 1112, 1113, 1164, 1165, 1202, 1261, 1263, 1291, 1308], "333": [17, 621, 800, 1196, 1308], "mno": [17, 21], "2023": [17, 37, 115, 142, 209, 306, 400, 747, 761, 918, 1003], "29": [17, 142, 150, 397, 420, 1000, 1027], "2001": [17, 398, 399, 404, 407, 410, 414, 419, 424, 425, 426, 428, 433, 442, 443, 444, 445, 611, 612, 614, 617, 618, 619, 681, 800, 918, 1001, 1002, 1007, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1026, 1029, 1031, 1032, 1033, 1035, 1040, 1049, 1050, 1051, 1052, 1053, 1261], "null": [17, 34, 36, 43, 49, 54, 62, 69, 110, 111, 114, 120, 121, 130, 134, 138, 140, 159, 162, 164, 168, 169, 172, 174, 179, 183, 184, 202, 210, 217, 218, 219, 226, 229, 231, 248, 249, 252, 254, 255, 256, 260, 265, 269, 272, 274, 276, 279, 287, 306, 317, 319, 320, 321, 331, 334, 335, 342, 343, 350, 351, 358, 360, 364, 365, 371, 377, 378, 379, 382, 392, 394, 395, 424, 427, 435, 436, 437, 438, 439, 440, 441, 449, 450, 451, 452, 453, 454, 457, 458, 459, 465, 477, 487, 489, 490, 491, 497, 499, 500, 507, 508, 511, 512, 514, 516, 517, 518, 527, 528, 529, 530, 531, 533, 537, 539, 549, 551, 570, 583, 584, 585, 586, 589, 600, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 625, 626, 627, 629, 634, 635, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 661, 662, 663, 670, 672, 673, 674, 681, 682, 684, 686, 691, 692, 693, 694, 703, 704, 705, 714, 715, 716, 717, 723, 726, 727, 728, 730, 732, 736, 744, 749, 760, 761, 766, 768, 771, 777, 778, 782, 784, 790, 800, 816, 819, 824, 825, 828, 834, 846, 847, 860, 870, 872, 873, 876, 882, 884, 885, 888, 890, 896, 913, 922, 923, 925, 934, 937, 938, 945, 946, 953, 954, 962, 976, 977, 995, 997, 998, 1034, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1056, 1058, 1059, 1060, 1061, 1065, 1067, 1074, 1080, 1096, 1097, 1105, 1107, 1108, 1111, 1115, 1116, 1119, 1120, 1122, 1124, 1125, 1126, 1136, 1138, 1139, 1141, 1145, 1147, 1155, 1168, 1169, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1200, 1205, 1206, 1210, 1215, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1241, 1242, 1243, 1250, 1252, 1253, 1254, 1261, 1262, 1264, 1266, 1271, 1274, 1287, 1289, 1290, 1291, 1298, 1308, 1316, 1317], "07": [17, 120, 169, 306, 396, 399, 400, 414, 427, 428, 442, 681, 742, 745, 753, 825, 913, 918, 999, 1003, 1034, 1261], "05": [17, 140, 143, 144, 145, 146, 150, 163, 169, 275, 306, 396, 399, 400, 401, 402, 403, 408, 412, 414, 415, 417, 420, 421, 422, 427, 429, 431, 432, 434, 435, 725, 741, 742, 744, 745, 818, 825, 848, 913, 918, 1003, 1004, 1005, 1006, 1034, 1035, 1038, 1039, 1041, 1042, 1049], "visibl": [18, 175, 306, 1057, 1308], "eg": [18, 26, 37, 62, 123, 157, 306, 428, 681, 684, 706, 800, 1074, 1261, 1264, 1308], "low": [18, 122, 596, 800, 1173, 1308], "rang": [18, 37, 122, 123, 169, 175, 191, 209, 306, 322, 390, 396, 404, 419, 425, 426, 428, 442, 443, 477, 720, 725, 727, 741, 742, 743, 744, 745, 746, 757, 758, 786, 787, 788, 800, 825, 839, 913, 994, 999, 1007, 1026, 1032, 1033, 1035, 1049, 1050, 1057, 1169, 1308], "98": [18, 201, 306, 364, 467, 470, 634, 685, 704, 800, 1265], "99": [18, 37, 178, 179, 201, 204, 274, 306, 315, 364, 457, 459, 467, 470, 634, 704, 790, 800, 833, 834, 885, 913, 1055, 1065, 1308], "tbl_col": 18, "95": [18, 315, 800], "96": [18, 169, 306, 315, 800, 825, 913, 1104, 1308], "97": [18, 201, 306, 315, 800, 1104, 1308], "move": [19, 241, 306, 396, 450, 451, 452, 453, 611, 612, 614, 618, 800, 999, 1058, 1059, 1060, 1061, 1186, 1187, 1189, 1193, 1308], "inlin": [19, 241, 306, 639, 647, 648, 650, 664, 665, 1219, 1227, 1228, 1230, 1244, 1245], "parenthes": 19, "inform": [20, 24, 35, 59, 124, 132, 135, 136, 139, 143, 145, 167, 169, 306, 309, 494, 632, 639, 647, 648, 650, 664, 665, 800, 825, 862, 913, 917, 971, 1104, 1213, 1219, 1227, 1228, 1230, 1244, 1245, 1308, 1312], "below": [20, 36, 124, 125, 135, 136, 172, 229, 306, 459, 651, 682, 742, 743, 745, 746, 787, 788, 790, 796, 800, 828, 913, 1231, 1262, 1316], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 54, 115], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 647, 654, 1227, 1234], "rounded_corn": 21, "border": 21, "includ": [21, 31, 34, 36, 37, 43, 59, 113, 122, 124, 135, 136, 150, 162, 169, 175, 227, 241, 268, 269, 270, 273, 274, 306, 365, 389, 429, 474, 478, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 671, 672, 676, 677, 705, 725, 733, 737, 777, 778, 800, 816, 825, 882, 885, 913, 918, 993, 994, 1036, 1057, 1077, 1081, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1251, 1252, 1256, 1298, 1308], "divid": [21, 389, 428, 442, 450, 452, 453, 494, 596, 800, 993, 1035, 1049, 1058, 1060, 1061, 1104, 1173, 1308], "same": [21, 36, 37, 51, 53, 54, 60, 61, 62, 91, 92, 126, 134, 143, 144, 145, 146, 148, 157, 180, 190, 210, 214, 229, 240, 241, 252, 271, 279, 280, 284, 292, 306, 313, 320, 354, 394, 395, 460, 466, 467, 470, 538, 555, 558, 588, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 635, 655, 694, 800, 821, 822, 835, 838, 852, 853, 876, 883, 888, 889, 893, 913, 920, 925, 957, 993, 997, 998, 1003, 1146, 1155, 1173, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1235, 1288, 1299, 1308], "dens": [21, 189, 306, 599, 800, 1175, 1308], "space": [21, 191, 306, 839, 913], "horizont": [21, 62, 183, 199, 215, 216, 217, 218, 222, 223, 255, 256, 273, 306, 715, 717, 727, 728, 733, 734, 736, 737, 738, 740, 748, 751, 766, 768, 771, 775, 784], "markdown": 21, "compat": [21, 37, 42, 46, 306, 639, 641, 642, 647, 648, 649, 650, 664, 665, 913, 918, 1219, 1221, 1222, 1227, 1228, 1229, 1230, 1244, 1245], "utf8": [21, 120, 121, 134, 651, 670, 682, 1231, 1250, 1262], "No": [21, 689, 1269], "round": [21, 37, 56, 115, 122, 306, 370, 376, 463, 621, 701, 800, 974, 1070, 1196, 1308], "corner": [21, 37, 115, 306], "op": [21, 125, 152, 268, 306, 602, 800, 913, 1264, 1308], "The": [21, 35, 36, 37, 42, 46, 47, 51, 53, 54, 59, 60, 63, 68, 69, 71, 72, 79, 83, 84, 92, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 138, 139, 140, 143, 144, 145, 146, 154, 169, 171, 172, 173, 176, 177, 180, 189, 190, 191, 194, 196, 202, 208, 211, 214, 221, 227, 238, 239, 240, 241, 244, 245, 253, 264, 272, 275, 279, 280, 282, 283, 284, 292, 306, 316, 358, 359, 360, 361, 389, 394, 395, 396, 404, 419, 424, 425, 428, 431, 442, 443, 454, 457, 460, 465, 472, 508, 512, 537, 549, 550, 551, 562, 588, 596, 599, 602, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 629, 632, 638, 643, 644, 647, 651, 652, 653, 659, 661, 662, 664, 665, 669, 675, 676, 677, 678, 679, 680, 681, 682, 725, 749, 753, 761, 764, 777, 778, 779, 782, 790, 792, 793, 795, 796, 800, 801, 802, 805, 807, 808, 809, 825, 828, 831, 835, 838, 839, 842, 844, 846, 848, 851, 853, 858, 862, 866, 868, 869, 870, 877, 884, 888, 889, 892, 893, 901, 913, 917, 921, 924, 961, 962, 963, 976, 993, 994, 997, 998, 999, 1007, 1026, 1031, 1032, 1035, 1038, 1049, 1050, 1064, 1065, 1068, 1075, 1116, 1120, 1154, 1155, 1173, 1175, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1210, 1213, 1218, 1223, 1224, 1231, 1232, 1233, 1239, 1241, 1242, 1244, 1245, 1249, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1288, 1300, 1302, 1304, 1308, 1309, 1313, 1314, 1315, 1317], "one": [21, 34, 35, 37, 43, 52, 54, 99, 108, 110, 111, 112, 113, 114, 120, 121, 125, 129, 130, 131, 134, 151, 152, 153, 157, 163, 179, 180, 189, 190, 191, 192, 194, 195, 208, 220, 229, 238, 239, 240, 246, 248, 264, 267, 285, 306, 315, 350, 389, 459, 460, 467, 470, 531, 539, 544, 571, 572, 574, 576, 578, 579, 607, 608, 625, 634, 647, 648, 649, 666, 764, 780, 790, 796, 800, 818, 834, 835, 838, 839, 840, 842, 843, 857, 866, 871, 872, 890, 894, 913, 924, 953, 958, 993, 1067, 1100, 1139, 1147, 1152, 1173, 1183, 1205, 1227, 1228, 1229, 1246, 1272, 1289, 1308, 1312], "more": [21, 37, 40, 42, 46, 52, 54, 62, 91, 92, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 143, 145, 150, 152, 157, 167, 169, 180, 207, 208, 212, 214, 220, 225, 239, 240, 242, 253, 264, 268, 271, 292, 306, 309, 318, 321, 356, 460, 494, 526, 540, 544, 549, 551, 587, 622, 632, 648, 655, 681, 683, 684, 707, 719, 730, 750, 756, 759, 767, 769, 772, 780, 790, 800, 825, 857, 877, 883, 913, 917, 918, 925, 959, 971, 994, 1100, 1104, 1134, 1148, 1155, 1197, 1213, 1228, 1235, 1261, 1263, 1264, 1293, 1308, 1312, 1317], "semigraph": 21, "box": [21, 214, 306], "draw": [21, 26, 149, 1317], "found": [21, 34, 37, 43, 49, 94, 104, 106, 111, 115, 173, 253, 306, 623, 650, 654, 679, 680, 681, 684, 800, 877, 913, 1199, 1230, 1234, 1259, 1260, 1261, 1264, 1308, 1316], "unicod": [21, 651, 656, 670, 682, 1231, 1236, 1250, 1262], "block": [21, 61, 190, 193, 271, 306, 790, 822, 838, 841, 864, 883, 891, 892, 901, 913, 1198, 1201, 1308], "http": [21, 37, 38, 39, 109, 122, 123, 126, 128, 159, 167, 306, 647, 649, 874, 913, 1227, 1229], "en": [21, 37, 306], "wikipedia": 21, "org": [21, 38, 39, 109, 122, 123, 126, 128, 159, 167, 306, 874, 913], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 37, 306], "etc": [22, 36, 37, 120, 124, 125, 126, 128, 135, 136, 137, 306, 800, 917, 918, 1198, 1201, 1308], "between": [25, 62, 147, 148, 150, 152, 167, 231, 240, 298, 306, 343, 366, 392, 393, 478, 507, 516, 527, 528, 529, 530, 589, 596, 597, 615, 638, 721, 722, 725, 729, 731, 774, 777, 778, 800, 863, 907, 913, 946, 967, 971, 995, 996, 1081, 1115, 1124, 1135, 1136, 1137, 1138, 1169, 1173, 1174, 1190, 1218, 1308], "set_tbl_column_data_type_inlin": 25, "max": [26, 37, 42, 46, 47, 169, 179, 190, 216, 229, 238, 306, 372, 379, 384, 459, 539, 549, 588, 599, 603, 608, 611, 624, 673, 766, 780, 800, 825, 834, 838, 866, 913, 978, 984, 988, 994, 1067, 1147, 1175, 1186, 1203, 1253, 1308], "tbl_row": [26, 169, 306, 825, 913], "width": [27, 37, 63, 120, 121, 134, 306, 309, 538, 913, 1146], "id": [27, 37, 62, 120, 136, 270, 282, 292, 306, 607, 664, 665, 708, 800, 892, 901, 913, 1183, 1294, 1308, 1317], "seq1": 27, "seq2": 27, "seq": 27, "atgataaaggag": 27, "gcaacgcatata": 27, "12": [27, 37, 54, 115, 120, 142, 149, 150, 169, 191, 207, 211, 238, 249, 253, 275, 306, 316, 372, 373, 381, 397, 399, 400, 404, 414, 419, 420, 421, 424, 425, 426, 428, 442, 443, 444, 451, 477, 493, 513, 548, 589, 594, 598, 608, 618, 626, 627, 642, 658, 668, 685, 696, 734, 741, 742, 743, 744, 745, 746, 763, 786, 787, 788, 800, 825, 839, 844, 848, 851, 866, 873, 874, 880, 913, 918, 978, 979, 1000, 1002, 1003, 1020, 1026, 1035, 1049, 1059, 1155, 1195, 1206, 1222, 1238, 1248, 1265, 1308, 1317], "atg": 27, "ata": 27, "aag": 27, "gag": 27, "gca": 27, "acg": 27, "cat": [27, 53, 91, 92, 389, 596, 639, 642, 687, 690, 703, 728, 795, 800, 918, 993, 1077, 1173, 1219, 1222, 1267, 1270, 1304, 1308], "also": [28, 34, 37, 43, 52, 53, 111, 122, 125, 126, 131, 134, 148, 149, 150, 151, 152, 157, 173, 190, 191, 192, 194, 195, 221, 225, 238, 240, 244, 252, 253, 274, 279, 282, 306, 379, 382, 396, 424, 427, 460, 478, 551, 599, 603, 611, 612, 613, 614, 615, 617, 618, 619, 635, 664, 665, 676, 677, 725, 733, 734, 737, 738, 742, 751, 753, 775, 790, 799, 800, 806, 838, 839, 840, 842, 843, 858, 866, 868, 876, 877, 885, 888, 890, 892, 913, 918, 999, 1034, 1081, 1175, 1179, 1221, 1222, 1244, 1245, 1256, 1308, 1312], "char": [28, 648, 1228], "omit": [28, 111, 115, 148, 150, 152, 157, 225, 241, 268, 306, 428, 442, 757, 758, 787, 788, 918, 1035, 1049], "set_decimal_separ": 28, "x": [28, 49, 50, 54, 62, 83, 109, 115, 120, 121, 123, 134, 148, 150, 159, 175, 199, 203, 205, 210, 220, 229, 240, 241, 270, 273, 306, 309, 314, 316, 318, 338, 343, 378, 390, 448, 449, 464, 469, 471, 472, 496, 503, 516, 544, 546, 548, 549, 551, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 587, 593, 594, 602, 603, 607, 629, 632, 672, 695, 696, 703, 706, 713, 715, 717, 721, 722, 733, 734, 736, 751, 761, 763, 766, 768, 771, 775, 784, 790, 800, 847, 853, 857, 875, 877, 913, 918, 946, 971, 1067, 1102, 1155, 1179, 1210, 1213, 1252, 1291, 1308, 1316], "1234567": 28, "987654": [28, 918], "10101": 28, "y": [28, 54, 62, 83, 109, 115, 148, 150, 159, 175, 203, 205, 210, 220, 229, 240, 241, 270, 273, 306, 309, 314, 316, 318, 338, 343, 431, 434, 448, 449, 469, 471, 496, 503, 516, 546, 548, 551, 570, 572, 574, 576, 578, 579, 582, 583, 587, 594, 602, 603, 607, 681, 683, 684, 696, 706, 713, 715, 717, 721, 722, 736, 747, 761, 766, 768, 771, 784, 800, 847, 857, 875, 877, 913, 918, 946, 971, 1038, 1041, 1179, 1261, 1263, 1264, 1308], "1234": [28, 621, 800, 1196, 1308], "7654321": 28, "234": 28, "567": 28, "987": 28, "654": [28, 253, 306, 877, 913], "00": [28, 37, 69, 150, 163, 191, 275, 306, 397, 398, 401, 406, 420, 421, 424, 427, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 611, 612, 614, 617, 618, 619, 681, 684, 688, 744, 745, 746, 747, 786, 787, 788, 800, 818, 839, 848, 913, 918, 1000, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1017, 1018, 1024, 1027, 1028, 1029, 1031, 1034, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1261, 1264, 1268], "321": [28, 1317], "strip": [29, 659, 669, 676, 677, 678, 679, 680, 1239, 1249, 1256, 1257, 1258], "trail": [29, 189, 306, 669, 675, 676, 677, 1249, 1255, 1256, 1257], "zero": [29, 37, 108, 109, 118, 120, 121, 126, 128, 132, 149, 159, 179, 208, 239, 253, 259, 264, 265, 306, 459, 539, 544, 623, 632, 691, 706, 800, 819, 834, 913, 976, 1067, 1147, 1213, 1271, 1284, 1289, 1290, 1308], "enabl": [29, 30, 53, 91, 92, 143, 144, 145, 146, 156, 244, 265, 279, 306, 317, 319, 603, 624, 640, 666, 710, 796, 800, 821, 868, 888, 913, 922, 923, 1179, 1203, 1220, 1246, 1290, 1296, 1308], "d": [29, 32, 34, 36, 37, 38, 39, 42, 111, 140, 189, 191, 196, 197, 201, 210, 253, 257, 259, 268, 273, 277, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 314, 316, 378, 407, 431, 434, 478, 592, 627, 642, 648, 664, 665, 672, 681, 683, 684, 726, 747, 753, 800, 839, 847, 877, 897, 899, 902, 903, 904, 905, 906, 907, 908, 913, 971, 1010, 1038, 1041, 1081, 1111, 1222, 1228, 1244, 1245, 1252, 1261, 1263, 1264, 1275, 1308], "01": [29, 54, 68, 69, 150, 163, 169, 189, 191, 211, 238, 275, 306, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 410, 411, 412, 414, 415, 417, 419, 420, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 451, 608, 611, 612, 614, 617, 618, 619, 681, 683, 684, 688, 725, 741, 742, 743, 744, 745, 746, 747, 800, 818, 825, 839, 866, 913, 918, 999, 1001, 1003, 1004, 1005, 1006, 1010, 1011, 1017, 1018, 1024, 1027, 1028, 1029, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1261, 1263, 1264, 1268], "6789": 29, "scale": [29, 70, 175, 306, 551, 592, 685, 800, 1057, 1265, 1308], "trim_decimal_zero": 29, "01000": 29, "67890": 29, "addit": [30, 33, 36, 37, 111, 119, 124, 125, 135, 136, 148, 172, 176, 190, 193, 227, 244, 245, 246, 252, 265, 272, 279, 280, 284, 306, 314, 406, 454, 457, 588, 635, 639, 647, 648, 650, 664, 665, 723, 726, 727, 728, 749, 779, 782, 800, 831, 838, 841, 868, 869, 871, 876, 884, 888, 889, 893, 913, 1000, 1009, 1065, 1219, 1227, 1228, 1230, 1244, 1245, 1290, 1308, 1312], "verbos": [30, 143, 145, 157, 648, 1228], "debug": [30, 821, 832, 852, 853, 913, 1317], "log": [30, 56, 364, 365, 447, 544, 569, 593, 704, 705, 800, 966, 1055, 1292, 1308], "do_polars_oper": 30, "if_set": 31, "env_onli": 31, "dict": [31, 36, 37, 42, 50, 55, 57, 59, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 150, 182, 208, 227, 233, 239, 240, 241, 243, 260, 261, 268, 270, 306, 550, 800, 864, 867, 913, 917, 1069, 1154, 1308], "show": [31, 37, 51, 169, 172, 189, 212, 226, 306, 474, 800, 825, 828, 862, 874, 913, 1077, 1308], "variabl": [31, 49, 79, 132, 139, 151, 154, 220, 253, 262, 306, 857, 877, 913, 1285, 1308, 1316], "chang": [31, 38, 43, 44, 45, 46, 54, 60, 61, 70, 72, 120, 121, 122, 132, 139, 140, 253, 273, 274, 275, 281, 306, 321, 388, 389, 392, 428, 474, 550, 551, 588, 589, 596, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 777, 778, 800, 821, 822, 877, 885, 891, 913, 917, 970, 971, 972, 992, 993, 1035, 1077, 1154, 1169, 1173, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1208, 1308], "restrict": [31, 673, 1253], "dictionari": [31, 37, 59, 83, 108, 110, 111, 112, 114, 120, 121, 122, 123, 127, 129, 130, 133, 134, 138, 208, 227, 239, 240, 241, 260, 261, 268, 306, 550, 800, 913, 1069, 1154, 1308], "those": [31, 37, 120, 241, 265, 274, 306, 599, 647, 764, 800, 885, 913, 918, 1175, 1227, 1290, 1308], "been": [31, 37, 155, 159, 160, 181, 184, 192, 193, 194, 195, 200, 235, 258, 286, 287, 306, 321, 383, 384, 385, 386, 387, 466, 481, 485, 488, 493, 505, 519, 537, 547, 548, 550, 551, 565, 594, 599, 609, 611, 612, 613, 614, 615, 617, 618, 619, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 696, 699, 700, 718, 739, 740, 762, 800, 840, 841, 842, 843, 852, 881, 895, 896, 913, 925, 988, 989, 990, 991, 1086, 1092, 1113, 1127, 1145, 1154, 1175, 1184, 1200, 1202, 1221, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1280, 1281, 1308], "set_fmt_float": 31, "via": [31, 120, 121, 122, 132, 134, 137, 138, 139, 208, 240, 306, 321, 391, 551, 649, 800, 826, 913, 1229], "set_stat": 31, "all_stat": 31, "io": [32, 34, 37, 38, 39, 118, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 306, 391, 466, 562, 800, 826, 870, 913], "byte": [32, 34, 37, 38, 39, 42, 43, 46, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 175, 306, 651, 655, 656, 657, 670, 682, 913, 1057, 1231, 1235, 1236, 1237, 1250, 1262, 1308], "compress": [32, 38, 39, 42, 44, 46, 306, 606, 800, 913, 1182, 1308], "avrocompress": [32, 306], "uncompress": [32, 38, 39, 42, 46, 126, 137, 306, 913], "write": [32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 119, 121, 126, 157, 306, 371, 565, 800, 850, 874, 913, 977, 1308], "apach": [32, 38, 39, 42, 118, 122, 123, 126, 128, 136, 306], "avro": [32, 118, 306, 812], "writabl": [32, 34, 38, 39, 40, 41, 42, 264, 306, 1289, 1308], "like": [32, 34, 36, 38, 39, 40, 41, 42, 61, 109, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 191, 203, 205, 210, 241, 264, 306, 391, 397, 466, 509, 564, 599, 647, 677, 678, 710, 796, 800, 817, 822, 826, 839, 913, 917, 1000, 1117, 1175, 1227, 1296, 1308], "object": [32, 34, 36, 37, 38, 39, 40, 41, 42, 52, 62, 83, 97, 109, 110, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 148, 150, 152, 159, 190, 191, 193, 194, 211, 212, 238, 241, 253, 264, 265, 306, 391, 562, 742, 743, 745, 746, 761, 787, 788, 800, 812, 826, 839, 840, 842, 843, 848, 866, 877, 913, 918, 1284, 1308, 1316], "snappi": [32, 42, 46, 306, 913], "deflat": [32, 306], "pathlib": [32, 34, 38, 39, 42, 134, 306], "foo": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 163, 166, 167, 170, 171, 172, 173, 174, 177, 180, 183, 186, 187, 188, 196, 197, 198, 199, 201, 202, 204, 210, 214, 215, 216, 217, 218, 219, 222, 223, 226, 229, 231, 233, 234, 236, 239, 242, 243, 244, 247, 251, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 270, 271, 272, 276, 277, 278, 283, 306, 367, 389, 391, 424, 468, 473, 476, 498, 555, 558, 559, 560, 561, 562, 563, 564, 596, 604, 638, 642, 644, 646, 648, 649, 667, 671, 673, 676, 677, 678, 679, 680, 687, 690, 698, 719, 729, 730, 731, 750, 754, 755, 756, 759, 760, 765, 767, 769, 770, 772, 774, 779, 781, 785, 789, 790, 796, 800, 818, 823, 827, 828, 829, 835, 845, 846, 847, 860, 864, 867, 868, 883, 884, 887, 890, 913, 918, 968, 993, 1031, 1124, 1173, 1180, 1222, 1224, 1226, 1228, 1229, 1247, 1253, 1259, 1260, 1267, 1270, 1308], "bar": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 163, 166, 167, 170, 171, 172, 173, 174, 177, 180, 183, 186, 187, 188, 197, 199, 201, 202, 204, 210, 214, 215, 216, 217, 218, 219, 222, 223, 226, 229, 231, 233, 234, 236, 239, 242, 243, 244, 251, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 271, 272, 276, 277, 283, 306, 367, 391, 476, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 632, 642, 644, 646, 648, 649, 667, 671, 673, 679, 680, 719, 729, 730, 731, 750, 755, 756, 759, 760, 765, 767, 769, 770, 772, 779, 781, 785, 789, 790, 796, 800, 818, 823, 827, 828, 829, 835, 845, 846, 847, 860, 864, 867, 868, 883, 884, 887, 913, 918, 968, 1124, 1213, 1222, 1224, 1226, 1228, 1229, 1247, 1253, 1259, 1260, 1308], "ham": [32, 34, 36, 38, 39, 42, 163, 166, 167, 170, 171, 172, 173, 174, 180, 187, 196, 197, 199, 210, 215, 217, 219, 222, 226, 231, 233, 236, 239, 242, 243, 244, 251, 254, 255, 257, 262, 263, 264, 265, 266, 271, 276, 277, 306, 367, 563, 818, 823, 827, 828, 829, 835, 847, 860, 864, 867, 868, 883, 890, 913, 968], "dirpath": [32, 34, 38, 39, 42, 134, 306], "new_fil": [32, 34, 38, 39, 42, 306], "t": [33, 34, 36, 43, 49, 50, 62, 119, 120, 125, 131, 134, 191, 211, 214, 228, 271, 273, 306, 321, 388, 397, 406, 427, 447, 450, 452, 453, 509, 551, 592, 647, 650, 664, 665, 678, 681, 684, 790, 800, 839, 861, 883, 913, 918, 992, 1034, 1055, 1056, 1058, 1060, 1061, 1117, 1155, 1200, 1227, 1230, 1244, 1245, 1257, 1258, 1261, 1264, 1298, 1308], "kwarg": [33, 50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 119, 122, 123, 167, 180, 228, 265, 306, 592, 800, 835, 861, 913, 917, 1290, 1308, 1316], "copi": [33, 108, 109, 119, 159, 164, 165, 209, 259, 264, 265, 279, 306, 457, 800, 819, 820, 888, 913, 976, 980, 1065, 1284, 1288, 1289, 1290, 1308], "csv": [33, 34, 43, 44, 45, 46, 119, 120, 121, 125, 134, 306, 812, 913], "system": [33, 120, 121, 306, 401, 1004], "clipboard": [33, 119, 306, 812], "write_csv": [33, 121, 134, 306], "past": [33, 306, 852, 853, 913], "excel": [33, 37, 119, 125, 306, 812], "similar": [33, 42, 119, 154, 183, 211, 248, 306, 350, 431, 434, 531, 588, 625, 760, 790, 800, 832, 848, 872, 913, 953, 1038, 1041, 1139, 1205, 1308], "spreadsheet": [33, 119, 125, 131, 229, 306], "softwar": [33, 119, 306], "field": [33, 34, 36, 43, 83, 104, 106, 111, 272, 306, 355, 539, 573, 575, 577, 606, 648, 649, 652, 672, 673, 694, 733, 734, 737, 738, 763, 782, 800, 884, 913, 958, 993, 1147, 1173, 1182, 1229, 1252, 1253, 1275, 1277, 1308], "symbol": [33, 34, 43, 306, 800, 913], "argument": [33, 36, 42, 92, 119, 120, 124, 132, 134, 135, 167, 170, 176, 190, 191, 192, 193, 194, 195, 211, 215, 217, 222, 227, 228, 229, 238, 244, 245, 246, 252, 255, 265, 272, 275, 279, 280, 284, 306, 428, 442, 454, 460, 478, 588, 592, 608, 611, 612, 613, 614, 615, 617, 618, 619, 635, 676, 677, 678, 714, 721, 722, 723, 726, 727, 728, 730, 732, 749, 779, 782, 790, 800, 827, 831, 838, 839, 840, 841, 842, 843, 861, 866, 868, 869, 871, 876, 884, 888, 889, 893, 913, 917, 1035, 1049, 1081, 1256, 1257, 1258, 1290, 1308], "pass": [33, 35, 36, 37, 42, 50, 54, 110, 119, 122, 123, 125, 132, 134, 140, 143, 145, 148, 150, 152, 162, 167, 170, 190, 191, 194, 197, 213, 227, 228, 238, 244, 248, 252, 257, 265, 268, 269, 275, 279, 283, 284, 306, 309, 321, 350, 365, 396, 407, 424, 427, 457, 476, 531, 550, 551, 588, 592, 603, 608, 611, 612, 613, 614, 615, 617, 618, 619, 625, 635, 676, 677, 678, 705, 714, 723, 725, 732, 742, 753, 782, 790, 796, 800, 816, 827, 838, 839, 840, 842, 843, 845, 852, 853, 861, 866, 868, 872, 874, 876, 882, 888, 893, 901, 913, 917, 925, 953, 999, 1010, 1034, 1065, 1076, 1106, 1139, 1154, 1155, 1179, 1205, 1256, 1257, 1258, 1279, 1290, 1308, 1312], "read_clipboard": [33, 306], "read": [33, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 177, 306, 391, 466, 549, 790, 800, 826, 832, 913, 1064, 1308], "comma": [33, 34, 120, 121, 134, 306], "include_bom": [34, 43, 306, 913], "include_head": [34, 37, 43, 121, 270, 306, 913], "line_termin": [34, 43, 306, 913], "quote_char": [34, 43, 120, 121, 134, 306, 913], "batch_siz": [34, 43, 120, 121, 122, 138, 140, 268, 306, 913], "1024": [34, 42, 43, 46, 120, 121, 122, 138, 306, 913], "datetime_format": [34, 43, 306, 913], "date_format": [34, 43, 306, 913], "time_format": [34, 43, 306, 913], "null_valu": [34, 43, 120, 121, 134, 306, 913], "quote_styl": [34, 43, 306, 913], "csvquotestyl": [34, 43, 306, 913], "If": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 53, 59, 60, 61, 62, 70, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 151, 159, 160, 162, 172, 177, 189, 191, 192, 194, 195, 197, 206, 207, 208, 211, 213, 214, 218, 225, 227, 229, 238, 240, 241, 242, 248, 251, 256, 257, 261, 262, 264, 269, 270, 271, 273, 274, 283, 306, 317, 319, 321, 343, 350, 355, 365, 396, 400, 401, 420, 421, 431, 434, 460, 474, 478, 494, 516, 526, 531, 532, 539, 549, 551, 562, 563, 588, 596, 599, 601, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 625, 628, 632, 633, 638, 648, 649, 650, 651, 652, 653, 659, 669, 670, 671, 672, 673, 675, 676, 677, 678, 681, 682, 683, 684, 688, 691, 705, 710, 714, 716, 718, 720, 724, 725, 728, 729, 732, 733, 742, 743, 745, 746, 747, 750, 751, 757, 758, 759, 761, 764, 773, 776, 777, 778, 782, 787, 788, 790, 791, 800, 816, 821, 822, 828, 830, 839, 840, 842, 843, 847, 848, 853, 857, 864, 866, 870, 872, 875, 882, 883, 885, 895, 901, 913, 917, 918, 922, 923, 925, 946, 953, 958, 977, 993, 999, 1003, 1004, 1027, 1028, 1038, 1041, 1064, 1074, 1076, 1077, 1081, 1103, 1104, 1106, 1124, 1134, 1139, 1140, 1147, 1155, 1173, 1175, 1177, 1179, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1197, 1199, 1203, 1205, 1209, 1213, 1214, 1218, 1228, 1229, 1230, 1231, 1232, 1233, 1239, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1262, 1263, 1264, 1268, 1271, 1279, 1284, 1289, 1296, 1298, 1308, 1316], "instead": [34, 36, 40, 41, 47, 51, 54, 61, 62, 110, 111, 114, 120, 121, 122, 125, 131, 132, 134, 140, 150, 161, 189, 191, 207, 208, 211, 214, 225, 227, 234, 239, 240, 241, 244, 245, 248, 249, 264, 265, 275, 279, 280, 281, 283, 306, 309, 331, 350, 365, 372, 373, 389, 403, 405, 409, 413, 416, 418, 423, 427, 428, 430, 442, 451, 454, 531, 549, 562, 596, 625, 626, 655, 656, 659, 664, 665, 669, 675, 676, 677, 678, 679, 680, 681, 684, 691, 705, 712, 720, 724, 730, 742, 743, 744, 745, 746, 747, 750, 757, 758, 759, 773, 776, 782, 787, 788, 791, 800, 815, 822, 833, 839, 868, 869, 870, 872, 873, 888, 889, 891, 913, 918, 934, 953, 962, 978, 979, 993, 1006, 1008, 1012, 1019, 1022, 1025, 1030, 1034, 1035, 1037, 1049, 1059, 1082, 1088, 1091, 1098, 1100, 1102, 1139, 1173, 1198, 1201, 1205, 1206, 1215, 1235, 1236, 1239, 1244, 1245, 1249, 1255, 1256, 1257, 1258, 1261, 1264, 1271, 1289, 1290, 1308, 1312, 1316], "whether": [34, 43, 112, 114, 152, 156, 162, 174, 184, 191, 192, 194, 195, 207, 211, 238, 246, 252, 269, 306, 317, 319, 334, 335, 364, 365, 410, 429, 451, 499, 500, 608, 624, 635, 704, 705, 723, 800, 816, 839, 840, 842, 843, 852, 853, 866, 871, 876, 882, 913, 918, 922, 923, 937, 938, 969, 972, 1013, 1036, 1056, 1059, 1107, 1108, 1200, 1308, 1316], "utf": [34, 43, 82, 306, 913], "bom": [34, 43, 306, 913], "header": [34, 37, 42, 43, 46, 115, 120, 121, 125, 134, 173, 229, 270, 306, 913], "end": [34, 37, 43, 120, 121, 132, 134, 191, 306, 359, 362, 363, 397, 428, 454, 532, 639, 645, 648, 651, 661, 670, 674, 676, 677, 680, 720, 725, 742, 743, 745, 746, 749, 757, 758, 787, 788, 790, 800, 839, 844, 851, 862, 913, 918, 964, 1000, 1035, 1140, 1225, 1228, 1231, 1241, 1250, 1254, 1256, 1257, 1262], "each": [34, 37, 43, 54, 63, 70, 79, 121, 122, 125, 138, 143, 144, 145, 146, 148, 168, 180, 189, 190, 191, 192, 193, 194, 195, 209, 211, 214, 227, 238, 240, 242, 268, 272, 274, 275, 283, 284, 287, 289, 291, 292, 300, 306, 331, 365, 389, 428, 442, 460, 481, 482, 485, 486, 515, 518, 519, 526, 536, 544, 551, 588, 596, 599, 606, 607, 613, 615, 617, 619, 622, 628, 635, 648, 651, 655, 656, 657, 660, 670, 672, 673, 682, 705, 720, 723, 728, 757, 758, 782, 790, 800, 821, 824, 835, 839, 840, 842, 843, 848, 862, 866, 884, 885, 893, 895, 896, 898, 900, 901, 909, 913, 934, 975, 993, 1035, 1049, 1086, 1087, 1092, 1093, 1123, 1126, 1127, 1134, 1144, 1173, 1175, 1182, 1183, 1197, 1209, 1228, 1231, 1235, 1236, 1237, 1240, 1250, 1252, 1253, 1262, 1277, 1308, 1317], "quot": [34, 35, 43, 120, 121, 123, 134, 306, 913], "specifi": [34, 36, 37, 43, 54, 94, 104, 106, 125, 131, 150, 162, 163, 175, 176, 179, 190, 191, 192, 193, 194, 195, 210, 227, 238, 239, 241, 244, 245, 246, 248, 252, 269, 272, 279, 280, 284, 306, 365, 371, 450, 452, 453, 454, 459, 588, 602, 603, 611, 612, 613, 614, 615, 617, 618, 619, 625, 635, 705, 723, 726, 727, 728, 742, 743, 745, 746, 747, 749, 779, 782, 787, 788, 800, 816, 818, 831, 834, 838, 839, 840, 841, 842, 843, 847, 866, 868, 869, 871, 872, 876, 882, 884, 888, 889, 893, 913, 977, 1057, 1058, 1060, 1061, 1067, 1179, 1205, 1308], "defin": [34, 37, 43, 69, 122, 129, 147, 148, 150, 160, 163, 172, 176, 191, 192, 194, 195, 214, 225, 228, 238, 274, 286, 292, 306, 321, 478, 512, 537, 551, 592, 596, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 651, 656, 670, 682, 718, 742, 743, 745, 746, 764, 782, 787, 788, 800, 818, 828, 831, 839, 840, 842, 843, 861, 866, 885, 895, 901, 913, 918, 925, 1081, 1120, 1155, 1173, 1183, 1231, 1236, 1250, 1262, 1308], "chrono": [34, 43, 306, 431, 434, 681, 683, 684, 688, 913, 1038, 1041, 1261, 1263, 1264, 1268], "rust": [34, 42, 43, 101, 126, 128, 132, 214, 292, 306, 649, 913, 917, 1155, 1229, 1308], "crate": [34, 43, 306, 639, 641, 642, 647, 648, 649, 650, 664, 665, 681, 683, 684, 688, 913, 918, 1219, 1221, 1222, 1227, 1228, 1229, 1230, 1244, 1245, 1261, 1263, 1264, 1268], "fraction": [34, 43, 143, 144, 145, 146, 242, 306, 429, 526, 589, 622, 681, 684, 800, 913, 1036, 1134, 1169, 1197, 1261, 1264, 1308], "second": [34, 43, 143, 144, 145, 146, 149, 191, 211, 238, 275, 306, 408, 412, 415, 417, 422, 424, 428, 441, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 664, 665, 681, 684, 742, 743, 744, 745, 746, 747, 786, 787, 788, 790, 800, 839, 848, 866, 913, 918, 1031, 1035, 1048, 1049, 1059, 1244, 1245, 1261, 1264, 1308, 1317], "infer": [34, 43, 70, 83, 108, 110, 111, 112, 113, 114, 120, 121, 122, 125, 129, 130, 131, 132, 134, 138, 139, 160, 214, 306, 428, 442, 549, 551, 604, 652, 653, 681, 683, 684, 685, 688, 747, 761, 776, 800, 913, 1035, 1049, 1155, 1180, 1232, 1233, 1261, 1263, 1264, 1265, 1268, 1308], "timeunit": [34, 43, 69, 71, 306, 398, 400, 433, 445, 684, 742, 743, 744, 745, 746, 747, 913, 918, 1001, 1003, 1040, 1052, 1264], "frame": [34, 35, 37, 43, 47, 48, 49, 50, 51, 52, 54, 61, 62, 111, 121, 125, 131, 143, 144, 150, 163, 164, 169, 208, 209, 214, 221, 225, 228, 239, 240, 241, 253, 268, 273, 274, 306, 818, 819, 825, 858, 861, 877, 885, 913, 918, 976, 1308, 1316, 1317], "datatyp": [34, 40, 43, 108, 110, 111, 112, 114, 116, 125, 127, 129, 130, 133, 138, 152, 173, 183, 243, 306, 366, 454, 627, 703, 749, 761, 800, 812, 829, 867, 870, 913, 925, 967, 970, 994, 1091, 1098, 1100, 1102, 1155, 1207, 1291, 1308], "repres": [34, 37, 43, 68, 69, 71, 80, 84, 89, 108, 110, 112, 113, 114, 122, 125, 253, 254, 276, 283, 306, 487, 489, 534, 541, 549, 637, 651, 656, 670, 682, 711, 714, 729, 731, 747, 749, 761, 763, 764, 777, 778, 781, 789, 796, 800, 877, 878, 886, 913, 1198, 1202, 1217, 1231, 1236, 1250, 1262, 1297, 1308], "necessari": [34, 43, 53, 92, 125, 264, 306, 913], "non_numer": [34, 43, 306, 913], "never": [34, 43, 122, 210, 239, 306, 847, 913], "strategi": [34, 43, 54, 62, 120, 147, 148, 149, 150, 152, 179, 191, 194, 210, 211, 224, 274, 306, 321, 459, 539, 551, 800, 834, 839, 842, 847, 848, 885, 913, 1067, 1147, 1308], "put": [34, 43, 306, 913], "around": [34, 43, 306, 913], "thei": [34, 37, 43, 53, 61, 62, 91, 92, 111, 134, 157, 211, 212, 241, 306, 666, 677, 678, 800, 913, 917, 918], "record": [34, 39, 43, 128, 140, 264, 306, 848, 913], "termin": [34, 43, 306, 913], "indistinguish": [34, 43, 306, 913], "even": [34, 43, 120, 306, 451, 592, 596, 800, 913, 1059, 1173, 1308], "invalid": [34, 43, 120, 121, 134, 306, 652, 654, 686, 706, 800, 913, 962, 1232, 1234, 1266], "g": [34, 43, 120, 124, 126, 128, 135, 137, 140, 159, 207, 234, 264, 273, 306, 314, 321, 391, 451, 454, 551, 627, 749, 800, 826, 864, 913, 1056, 1059, 1200, 1308, 1317], "pars": [34, 43, 47, 119, 120, 121, 123, 125, 130, 131, 134, 137, 138, 162, 190, 193, 244, 245, 248, 252, 269, 279, 280, 284, 306, 365, 371, 478, 550, 588, 603, 635, 652, 653, 663, 685, 686, 705, 715, 717, 723, 726, 727, 728, 736, 740, 753, 766, 768, 771, 779, 780, 782, 784, 790, 800, 816, 838, 841, 868, 869, 872, 876, 882, 888, 889, 893, 913, 977, 1081, 1179, 1205, 1232, 1233, 1243, 1264, 1265, 1266, 1308], "valid": [34, 37, 43, 47, 69, 122, 126, 128, 132, 152, 157, 175, 210, 306, 388, 639, 641, 642, 647, 648, 649, 650, 654, 664, 665, 790, 800, 847, 913, 918, 992, 1057, 1074, 1219, 1221, 1222, 1227, 1228, 1229, 1230, 1234, 1244, 1245, 1308], "integ": [34, 37, 43, 68, 69, 71, 75, 76, 77, 78, 84, 85, 86, 87, 88, 141, 148, 150, 151, 153, 172, 191, 238, 262, 306, 318, 370, 429, 463, 464, 587, 596, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 651, 663, 682, 686, 713, 720, 753, 757, 758, 776, 800, 828, 839, 866, 913, 918, 974, 1036, 1070, 1091, 1173, 1177, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1202, 1231, 1243, 1262, 1266, 1308, 1316, 1317], "aren": [34, 43, 306, 913], "strictli": [34, 43, 53, 92, 306, 832, 913], "table_nam": [35, 37, 253, 306, 877, 913], "connect": [35, 120, 122, 123, 126, 128, 132, 137, 139, 140, 306, 813], "if_table_exist": [35, 306], "dbwritemod": [35, 306], "fail": [35, 36, 109, 124, 126, 130, 132, 135, 137, 138, 139, 143, 144, 159, 264, 271, 306, 332, 432, 539, 681, 683, 684, 688, 800, 883, 913, 1155, 1261, 1263, 1264, 1268, 1289, 1308], "dbwriteengin": [35, 306], "sqlalchemi": [35, 122, 142, 306], "databas": [35, 122, 123, 306, 812], "qualifi": [35, 306], "creat": [35, 37, 53, 92, 108, 112, 114, 120, 121, 122, 123, 126, 128, 132, 135, 136, 148, 149, 150, 151, 152, 153, 164, 165, 191, 192, 195, 226, 229, 238, 264, 275, 279, 282, 306, 400, 428, 442, 451, 539, 600, 608, 611, 612, 614, 617, 618, 619, 727, 741, 742, 743, 744, 745, 746, 747, 786, 787, 788, 796, 800, 819, 820, 825, 830, 839, 840, 843, 866, 888, 892, 913, 976, 980, 993, 1003, 1035, 1049, 1059, 1166, 1173, 1176, 1289, 1308, 1316, 1317], "append": [35, 36, 150, 177, 210, 211, 306, 600, 790, 800, 847, 848, 913, 1064, 1308], "your": [35, 37, 53, 54, 92, 120, 121, 122, 123, 125, 140, 208, 214, 240, 241, 244, 261, 279, 284, 292, 306, 321, 401, 451, 466, 551, 649, 681, 683, 684, 691, 764, 800, 844, 851, 853, 868, 888, 893, 901, 913, 1004, 1059, 1155, 1229, 1261, 1263, 1264, 1271, 1308, 1317], "special": [35, 120, 121, 123, 134, 268, 282, 306, 610, 648, 664, 665, 800, 892, 913, 925, 1155, 1185, 1228, 1244, 1245, 1308], "uri": [35, 36, 122, 123, 124, 135, 136, 306], "postgresql": [35, 122, 123, 306, 588, 800], "user": [35, 122, 123, 160, 214, 228, 286, 292, 306, 321, 549, 551, 592, 624, 718, 764, 800, 861, 895, 901, 913, 917, 925, 1155, 1203, 1308], "server": [35, 122, 123, 306], "port": [35, 120, 122, 123, 126, 128, 137, 306], "sqlite": [35, 122, 306], "db": [35, 122, 123, 306], "replac": [35, 36, 120, 121, 134, 178, 179, 235, 236, 270, 279, 280, 306, 400, 427, 549, 550, 665, 666, 800, 833, 888, 889, 913, 1003, 1034, 1154, 1198, 1201, 1202, 1245, 1246, 1308], "insert": [35, 120, 121, 126, 128, 132, 134, 137, 138, 139, 200, 201, 234, 270, 272, 306, 623, 638, 691, 800, 884, 913, 1199, 1218, 1271, 1308], "mode": [35, 36, 43, 44, 45, 46, 47, 60, 61, 143, 145, 229, 253, 306, 648, 773, 776, 791, 800, 821, 822, 913, 1228, 1308, 1316], "new": [35, 36, 37, 125, 134, 157, 185, 199, 200, 201, 214, 225, 226, 233, 234, 253, 258, 268, 270, 272, 273, 274, 279, 280, 306, 316, 400, 456, 466, 468, 477, 548, 572, 573, 588, 603, 607, 664, 665, 672, 673, 692, 694, 700, 796, 800, 812, 837, 864, 877, 881, 884, 885, 888, 889, 895, 901, 913, 921, 1003, 1063, 1072, 1166, 1178, 1179, 1183, 1244, 1245, 1252, 1253, 1272, 1275, 1281, 1286, 1308, 1316], "alreadi": [35, 36, 306, 388, 509, 710, 800, 874, 913, 992, 1117, 1296, 1308], "adbc": [35, 122, 123, 306], "affect": [35, 143, 144, 145, 146, 306], "driver": [35, 122, 123, 306], "provid": [35, 37, 50, 120, 121, 123, 124, 125, 132, 134, 135, 136, 139, 150, 152, 180, 206, 253, 306, 360, 361, 454, 474, 539, 549, 551, 643, 644, 647, 652, 654, 677, 678, 679, 680, 750, 753, 782, 800, 812, 835, 877, 913, 962, 963, 1077, 1103, 1155, 1223, 1224, 1227, 1232, 1234, 1308, 1316, 1317], "otherwis": [35, 122, 125, 149, 154, 214, 221, 241, 244, 268, 292, 306, 355, 360, 371, 389, 450, 451, 452, 453, 539, 551, 559, 588, 592, 596, 601, 612, 613, 614, 615, 617, 619, 639, 643, 650, 651, 656, 670, 682, 714, 747, 764, 790, 800, 858, 868, 901, 913, 958, 962, 977, 993, 1058, 1059, 1060, 1061, 1147, 1155, 1173, 1177, 1198, 1201, 1219, 1223, 1230, 1231, 1236, 1250, 1262, 1308], "deltalak": [36, 124, 135, 142, 306], "deltat": [36, 306], "ignor": [36, 122, 149, 150, 152, 217, 218, 255, 256, 274, 306, 317, 319, 343, 392, 427, 450, 452, 453, 507, 516, 580, 581, 638, 714, 716, 728, 800, 922, 923, 946, 995, 1034, 1058, 1060, 1061, 1115, 1124, 1164, 1165, 1218, 1308], "merg": [36, 210, 221, 306, 847, 858, 913], "overwrite_schema": [36, 306], "storage_opt": [36, 120, 124, 126, 128, 132, 135, 136, 137, 139, 306], "delta_write_opt": [36, 306], "delta_merge_opt": [36, 306], "tablemerg": [36, 306], "delta": [36, 124, 135, 254, 276, 306, 534, 541, 617, 619, 637, 711, 729, 731, 777, 778, 781, 789, 800, 812, 878, 886, 913, 1192, 1194, 1217, 1297, 1308], "handl": [36, 60, 61, 62, 115, 120, 121, 134, 140, 306, 392, 507, 691, 800, 821, 822, 913, 917, 995, 1115, 1271, 1308], "throw": [36, 110, 111, 114, 163, 306, 366, 652, 654, 800, 818, 913, 967, 1232, 1234, 1308], "add": [36, 37, 121, 177, 191, 194, 214, 279, 280, 281, 282, 306, 389, 574, 575, 576, 577, 594, 596, 696, 747, 751, 790, 800, 839, 842, 847, 888, 889, 890, 891, 892, 913, 1064, 1308], "anyth": [36, 239, 306], "updat": [36, 169, 306, 825, 913], "deprec": [36, 92, 93, 155, 160, 161, 181, 184, 191, 192, 193, 194, 195, 200, 215, 217, 222, 234, 235, 249, 255, 258, 275, 281, 286, 287, 306, 321, 372, 373, 383, 384, 385, 386, 387, 403, 405, 409, 413, 416, 418, 423, 427, 428, 430, 442, 445, 466, 481, 485, 488, 493, 505, 519, 537, 547, 548, 550, 565, 594, 609, 626, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 681, 684, 696, 699, 700, 712, 718, 730, 739, 740, 742, 744, 762, 800, 815, 839, 840, 841, 842, 843, 852, 873, 881, 891, 895, 896, 913, 925, 970, 978, 979, 988, 989, 990, 991, 993, 1006, 1008, 1012, 1019, 1022, 1025, 1030, 1034, 1035, 1037, 1049, 1052, 1082, 1086, 1088, 1091, 1092, 1098, 1100, 1102, 1113, 1127, 1145, 1154, 1173, 1184, 1200, 1202, 1206, 1221, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1261, 1264, 1280, 1281, 1288, 1289, 1298, 1308], "sinc": [36, 68, 69, 84, 92, 122, 124, 135, 155, 160, 161, 162, 181, 184, 191, 192, 193, 194, 195, 200, 215, 217, 222, 234, 235, 249, 255, 258, 269, 275, 281, 286, 287, 306, 321, 372, 373, 383, 384, 385, 386, 387, 403, 405, 407, 409, 413, 416, 418, 423, 427, 428, 430, 442, 445, 466, 481, 485, 488, 493, 505, 519, 537, 547, 548, 550, 565, 594, 609, 626, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 681, 684, 696, 699, 700, 712, 718, 739, 740, 742, 744, 753, 762, 800, 815, 816, 839, 840, 841, 842, 843, 852, 873, 876, 881, 882, 891, 895, 896, 913, 925, 970, 978, 979, 988, 989, 990, 991, 993, 1006, 1008, 1010, 1012, 1019, 1022, 1025, 1030, 1034, 1035, 1037, 1049, 1052, 1082, 1086, 1088, 1091, 1092, 1098, 1100, 1102, 1113, 1127, 1145, 1154, 1173, 1184, 1200, 1202, 1206, 1221, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1261, 1264, 1280, 1281, 1288, 1289, 1298, 1308], "version": [36, 59, 92, 124, 125, 135, 142, 155, 159, 160, 161, 181, 184, 191, 192, 193, 194, 195, 196, 200, 215, 217, 222, 234, 235, 249, 253, 255, 258, 268, 275, 281, 286, 287, 306, 321, 372, 373, 383, 384, 385, 386, 387, 403, 405, 409, 413, 416, 418, 420, 421, 423, 427, 428, 430, 442, 445, 466, 472, 481, 485, 488, 493, 505, 519, 537, 547, 548, 550, 565, 594, 609, 626, 640, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 681, 684, 696, 699, 700, 712, 718, 739, 740, 742, 744, 762, 775, 800, 815, 839, 840, 841, 842, 843, 852, 873, 877, 881, 891, 895, 896, 913, 925, 970, 978, 979, 988, 989, 990, 991, 993, 1006, 1008, 1012, 1019, 1022, 1025, 1027, 1028, 1030, 1034, 1035, 1037, 1049, 1052, 1075, 1082, 1086, 1088, 1091, 1092, 1098, 1100, 1102, 1113, 1127, 1145, 1154, 1173, 1184, 1200, 1202, 1206, 1220, 1221, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1261, 1264, 1280, 1281, 1288, 1289, 1298, 1308], "20": [36, 37, 120, 125, 142, 150, 155, 161, 169, 177, 199, 201, 221, 228, 230, 234, 236, 253, 268, 275, 281, 287, 306, 329, 330, 331, 392, 399, 402, 403, 408, 412, 414, 415, 417, 422, 428, 429, 432, 442, 445, 466, 472, 477, 565, 592, 611, 612, 614, 617, 618, 619, 712, 753, 761, 787, 800, 815, 825, 858, 861, 877, 891, 896, 913, 918, 995, 1002, 1006, 1020, 1035, 1049, 1052, 1062, 1289, 1308], "14": [36, 142, 150, 169, 181, 200, 214, 215, 217, 222, 235, 255, 258, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 383, 384, 385, 386, 387, 397, 402, 403, 408, 412, 415, 417, 422, 429, 432, 477, 537, 599, 663, 699, 700, 739, 740, 744, 786, 787, 800, 825, 897, 899, 902, 903, 904, 905, 906, 907, 908, 913, 918, 988, 989, 990, 991, 1000, 1035, 1082, 1102, 1145, 1202, 1243, 1280, 1281, 1298, 1308], "schema_mod": [36, 306], "extra": [36, 120, 121, 124, 126, 128, 134, 135, 136, 137, 177, 191, 306, 800, 839, 913, 917, 1064, 1308], "storag": [36, 120, 124, 126, 128, 132, 135, 136, 137, 306], "backend": [36, 122, 123, 124, 135, 136, 306], "cloud": [36, 122, 124, 132, 135, 136, 137, 139, 140, 306], "configur": [36, 124, 135, 136, 157, 306], "authent": [36, 124, 135, 136, 306], "see": [36, 37, 38, 39, 60, 61, 69, 122, 123, 124, 125, 126, 128, 132, 135, 136, 139, 143, 144, 145, 146, 150, 152, 167, 191, 210, 228, 229, 306, 309, 371, 459, 494, 549, 632, 639, 647, 648, 650, 651, 664, 665, 682, 742, 743, 745, 746, 775, 787, 788, 796, 800, 821, 822, 839, 913, 917, 918, 971, 977, 1104, 1213, 1219, 1227, 1228, 1230, 1231, 1244, 1245, 1262, 1308, 1312, 1317], "here": [36, 37, 42, 108, 110, 111, 112, 114, 122, 123, 124, 129, 130, 132, 135, 136, 138, 139, 148, 150, 152, 306, 396, 551, 649, 654, 725, 800, 874, 913, 999, 1234], "gc": [36, 124, 135, 136, 306], "azur": [36, 124, 132, 135, 136, 139, 306], "keyword": [36, 50, 124, 132, 135, 167, 190, 228, 239, 244, 245, 265, 279, 280, 284, 306, 460, 592, 779, 782, 790, 800, 838, 861, 868, 869, 888, 889, 893, 913, 1290, 1308], "while": [36, 61, 121, 124, 125, 135, 150, 152, 157, 208, 220, 270, 274, 306, 656, 822, 857, 885, 913, 1074, 1236, 1308], "lake": [36, 124, 135, 306, 812], "typeerror": [36, 306], "unsupport": [36, 306], "arrowinvaliderror": [36, 306], "could": [36, 89, 95, 163, 306, 366, 733, 737, 747, 751, 800, 818, 825, 828, 913, 967, 1074, 1308], "primit": [36, 306, 483, 800], "tablenotfounderror": [36, 306], "doesn": [36, 120, 134, 191, 211, 306, 447, 800, 839, 913, 1055, 1298, 1308], "action": [36, 306], "trigger": [36, 265, 306, 800, 917, 1290, 1308], "categor": [36, 53, 72, 91, 92, 143, 144, 145, 146, 210, 262, 306, 367, 368, 389, 596, 603, 703, 800, 918, 968, 969, 970, 971, 972, 993, 1173, 1179, 1291, 1308], "protocol": [36, 109, 123, 159, 306], "nullabl": [36, 306], "To": [36, 61, 178, 215, 217, 222, 255, 306, 371, 394, 395, 459, 639, 647, 648, 650, 664, 665, 677, 678, 679, 680, 689, 800, 833, 913, 977, 997, 998, 1074, 1219, 1227, 1228, 1230, 1244, 1245, 1269, 1289, 1308], "pyarrow": [36, 42, 108, 113, 120, 123, 124, 126, 128, 132, 135, 140, 142, 259, 264, 265, 306, 812, 1284, 1288, 1289, 1290, 1308], "ha": [36, 37, 54, 61, 113, 122, 134, 155, 159, 160, 181, 184, 191, 192, 193, 194, 195, 200, 235, 238, 258, 275, 281, 286, 287, 306, 321, 364, 365, 383, 384, 385, 386, 387, 388, 466, 481, 485, 488, 493, 505, 519, 537, 547, 548, 549, 550, 560, 565, 594, 609, 611, 612, 613, 614, 615, 617, 618, 619, 641, 651, 653, 657, 658, 659, 660, 663, 668, 669, 675, 682, 696, 699, 700, 704, 705, 718, 739, 740, 750, 759, 762, 796, 800, 822, 839, 840, 841, 842, 843, 852, 866, 881, 891, 895, 896, 901, 913, 925, 966, 976, 988, 989, 990, 991, 992, 994, 1074, 1086, 1088, 1092, 1113, 1127, 1145, 1154, 1184, 1200, 1202, 1221, 1231, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1262, 1280, 1281, 1292, 1308], "last": [36, 143, 144, 145, 146, 162, 197, 211, 213, 229, 241, 252, 257, 269, 271, 300, 306, 331, 342, 351, 364, 365, 388, 404, 420, 425, 443, 485, 486, 493, 514, 533, 536, 539, 571, 572, 574, 576, 578, 579, 594, 634, 635, 651, 673, 682, 696, 698, 704, 705, 723, 785, 800, 816, 848, 876, 880, 882, 883, 909, 913, 918, 934, 945, 954, 992, 1007, 1027, 1032, 1050, 1076, 1092, 1093, 1106, 1122, 1141, 1144, 1215, 1231, 1253, 1262, 1279, 1308], "filesystem": [36, 124, 135, 136, 306], "table_path": [36, 124, 135, 136, 306], "match": [36, 37, 62, 69, 102, 108, 110, 111, 112, 114, 122, 129, 130, 138, 143, 144, 145, 146, 163, 179, 210, 211, 239, 274, 306, 557, 603, 616, 639, 640, 641, 642, 645, 647, 648, 650, 652, 654, 664, 665, 666, 674, 681, 683, 684, 790, 800, 818, 834, 847, 848, 885, 913, 918, 1091, 1100, 1179, 1191, 1219, 1220, 1221, 1222, 1225, 1227, 1228, 1230, 1232, 1234, 1244, 1245, 1246, 1254, 1261, 1263, 1264, 1308], "old": [36, 233, 306, 603, 800, 864, 913, 1179, 1308], "existing_table_path": [36, 306], "store": [36, 120, 132, 136, 177, 208, 240, 306, 367, 606, 800, 968, 1064, 1182, 1308], "bucket": [36, 124, 135, 136, 139, 306, 428, 442, 474, 800, 1035, 1049, 1077, 1308], "prefix": [36, 120, 121, 134, 157, 306, 316, 363, 548, 572, 575, 576, 578, 579, 674, 678, 679, 691, 696, 800, 918, 965, 1254, 1259, 1271], "aws_region": [36, 135, 139, 306], "the_aws_region": [36, 306], "aws_access_key_id": [36, 124, 135, 139, 306], "the_aws_access_key_id": [36, 124, 135, 136, 306], "aws_secret_access_kei": [36, 124, 135, 139, 306], "the_aws_secret_access_kei": [36, 124, 135, 136, 306], "pa": [36, 108, 140, 306], "check": [36, 69, 120, 121, 134, 143, 144, 145, 146, 156, 174, 184, 191, 192, 194, 195, 204, 206, 210, 238, 306, 338, 359, 362, 363, 451, 478, 483, 504, 608, 639, 645, 650, 674, 800, 839, 840, 842, 843, 847, 852, 853, 866, 913, 941, 961, 964, 965, 1056, 1059, 1082, 1084, 1088, 1089, 1091, 1098, 1099, 1100, 1102, 1103, 1112, 1200, 1219, 1225, 1230, 1254, 1308], "doc": [36, 38, 39, 123, 126, 128, 143, 145, 167, 306], "predic": [36, 43, 44, 45, 46, 60, 61, 134, 137, 138, 139, 140, 180, 206, 239, 306, 460, 712, 751, 790, 800, 821, 822, 830, 832, 835, 852, 853, 862, 864, 874, 891, 892, 913, 1068, 1198, 1201, 1308], "source_alia": [36, 306], "target_alia": [36, 306], "when_matched_update_al": [36, 306], "when_not_matched_insert_al": [36, 306], "execut": [36, 48, 49, 51, 53, 62, 122, 123, 212, 253, 306, 391, 509, 710, 800, 817, 826, 852, 853, 862, 877, 913, 917, 1117, 1296, 1308, 1316], "workbook": [37, 125, 131, 306], "worksheet": [37, 125, 131, 306], "posit": [37, 170, 176, 190, 193, 227, 244, 245, 246, 248, 252, 272, 279, 280, 284, 306, 350, 450, 452, 453, 454, 531, 588, 596, 625, 635, 649, 650, 663, 664, 665, 686, 721, 722, 723, 726, 727, 728, 749, 779, 782, 800, 827, 831, 838, 841, 868, 869, 871, 872, 876, 884, 888, 889, 893, 913, 953, 1058, 1060, 1061, 1139, 1173, 1205, 1229, 1243, 1266, 1308], "tupl": [37, 123, 125, 131, 160, 208, 214, 227, 239, 240, 241, 247, 268, 283, 306, 604, 800, 862, 874, 913, 918, 1180, 1308], "a1": [37, 55, 57, 306], "table_styl": [37, 306], "column_format": [37, 306], "columnformatdict": [37, 306], "dtype_format": [37, 306], "oneormoredatatyp": [37, 148, 306, 1100, 1308], "conditional_format": [37, 306], "conditionalformatdict": [37, 306], "header_format": [37, 306], "column_tot": [37, 306], "columntotalsdefinit": [37, 306], "column_width": [37, 306], "columnwidthsdefinit": [37, 306], "row_tot": [37, 306], "rowtotalsdefinit": [37, 306], "row_height": [37, 306], "sparklin": [37, 306], "sequenc": [37, 54, 83, 108, 110, 111, 112, 114, 120, 121, 122, 125, 129, 130, 131, 134, 138, 148, 149, 150, 162, 169, 176, 177, 210, 211, 220, 225, 227, 228, 229, 241, 252, 262, 268, 269, 273, 274, 275, 306, 355, 365, 389, 483, 539, 547, 549, 592, 596, 603, 635, 679, 680, 694, 705, 718, 723, 733, 734, 737, 738, 751, 753, 762, 763, 764, 775, 780, 800, 816, 825, 831, 847, 848, 857, 861, 876, 882, 885, 913, 958, 993, 994, 1064, 1147, 1173, 1179, 1202, 1275, 1308], "formula": [37, 306, 447, 800, 1055, 1308], "autofilt": [37, 306], "autofit": [37, 306], "hidden_column": [37, 306], "selectortyp": [37, 306, 918], "hide_gridlin": [37, 306], "sheet_zoom": [37, 306], "freeze_pan": [37, 306], "bytesio": [37, 38, 39, 42, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 306, 391, 800, 826, 913], "open": [37, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 306, 391, 800, 826, 913], "xlsxwriter": [37, 142, 306], "close": [37, 122, 191, 192, 194, 195, 238, 253, 306, 389, 478, 544, 596, 608, 611, 612, 613, 614, 615, 617, 618, 619, 632, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 866, 877, 913, 993, 1081, 1173, 1213, 1308], "xlsx": [37, 125, 306], "work": [37, 70, 72, 121, 140, 234, 245, 280, 306, 317, 319, 321, 356, 370, 371, 454, 463, 509, 540, 549, 551, 571, 572, 574, 576, 578, 579, 588, 651, 655, 656, 670, 682, 707, 800, 869, 889, 913, 918, 922, 923, 959, 974, 977, 1070, 1117, 1148, 1231, 1235, 1236, 1250, 1262, 1293, 1308], "directori": [37, 42, 132, 306, 917], "sheet1": [37, 306], "medium": [37, 306], "kei": [37, 54, 59, 62, 132, 136, 139, 191, 208, 210, 211, 221, 227, 229, 233, 237, 240, 241, 274, 283, 306, 460, 551, 603, 782, 800, 832, 839, 847, 848, 858, 864, 865, 885, 913, 1179, 1308], "follow": [37, 42, 59, 120, 121, 122, 124, 134, 135, 136, 143, 191, 211, 214, 228, 238, 275, 306, 424, 428, 442, 451, 549, 592, 599, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 694, 706, 742, 743, 745, 746, 764, 787, 788, 790, 792, 793, 795, 800, 801, 802, 805, 807, 808, 809, 839, 848, 861, 866, 913, 1031, 1035, 1049, 1059, 1175, 1198, 1201, 1300, 1302, 1304, 1308, 1309, 1313, 1314, 1315, 1317], "first_column": [37, 306], "last_column": [37, 306], "banded_column": [37, 306], "banded_row": [37, 306], "sheet": [37, 125, 131, 306], "chart": [37, 306, 862, 913], "subsequ": [37, 52, 232, 265, 306, 539, 790, 830, 877, 913, 1290, 1308], "colnam": [37, 134, 150, 173, 306, 829, 913], "given": [37, 47, 48, 54, 97, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 134, 138, 139, 145, 146, 147, 148, 150, 151, 152, 153, 160, 162, 175, 176, 178, 191, 192, 194, 195, 206, 214, 227, 228, 238, 239, 240, 241, 248, 249, 252, 268, 269, 274, 306, 338, 350, 355, 365, 371, 397, 401, 431, 433, 434, 447, 451, 474, 478, 504, 531, 539, 542, 551, 588, 592, 599, 602, 604, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 623, 625, 626, 648, 649, 661, 662, 681, 684, 691, 694, 705, 718, 749, 762, 763, 764, 776, 777, 778, 800, 816, 831, 839, 840, 842, 843, 852, 853, 861, 866, 872, 873, 876, 882, 885, 895, 901, 913, 918, 925, 941, 953, 958, 977, 1000, 1004, 1038, 1040, 1041, 1055, 1057, 1059, 1077, 1081, 1103, 1112, 1139, 1147, 1150, 1153, 1155, 1166, 1175, 1180, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1199, 1205, 1206, 1228, 1229, 1241, 1242, 1261, 1264, 1271, 1295, 1299, 1308, 1316, 1317], "dd": [37, 306], "mm": [37, 306], "yyyi": [37, 306], "overridden": [37, 108, 110, 112, 114, 129, 130, 154, 306, 913], "basi": [37, 125, 150, 306], "param": [37, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 149, 150, 152, 239, 306, 913], "It": [37, 38, 43, 44, 45, 46, 53, 60, 61, 70, 72, 92, 132, 139, 140, 169, 221, 228, 253, 273, 274, 282, 292, 306, 388, 389, 428, 474, 551, 559, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 777, 778, 796, 800, 817, 821, 822, 825, 852, 853, 858, 877, 885, 892, 901, 913, 972, 992, 993, 1035, 1077, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198, 1201, 1308], "float_dtyp": [37, 306], "simplifi": [37, 43, 44, 45, 46, 60, 61, 306, 821, 822, 830, 832, 862, 874, 913], "uniform": [37, 306, 596, 800, 1173, 1308], "condit": [37, 172, 180, 239, 306, 460, 478, 645, 674, 724, 751, 790, 800, 828, 835, 913, 1081, 1308], "suppli": [37, 108, 110, 111, 112, 114, 122, 129, 130, 138, 180, 239, 306, 460, 592, 800, 835, 913], "typenam": [37, 306], "3_color_scal": [37, 306], "data_bar": [37, 306], "make": [37, 62, 83, 108, 113, 120, 121, 125, 126, 128, 132, 137, 221, 225, 232, 275, 306, 452, 453, 474, 578, 579, 588, 602, 672, 800, 858, 913, 917, 1060, 1061, 1077, 1252, 1308, 1316, 1317], "icon": [37, 306], "multipl": [37, 50, 60, 61, 62, 120, 121, 125, 131, 134, 137, 138, 139, 148, 152, 162, 170, 175, 177, 180, 190, 191, 199, 209, 227, 229, 241, 244, 246, 252, 269, 274, 279, 284, 306, 364, 365, 512, 537, 556, 560, 568, 569, 588, 603, 604, 611, 612, 613, 614, 615, 617, 618, 619, 635, 704, 705, 723, 730, 737, 738, 751, 762, 763, 765, 770, 775, 780, 783, 790, 796, 800, 816, 821, 822, 827, 835, 838, 839, 868, 871, 876, 882, 885, 888, 893, 901, 913, 924, 954, 1057, 1064, 1120, 1141, 1145, 1160, 1179, 1180, 1215, 1308], "singl": [37, 48, 54, 60, 61, 62, 119, 120, 121, 122, 123, 125, 132, 134, 139, 148, 163, 170, 171, 172, 177, 186, 196, 206, 214, 227, 239, 241, 252, 283, 306, 321, 339, 371, 396, 424, 467, 470, 472, 505, 506, 512, 537, 549, 551, 600, 603, 604, 606, 635, 638, 651, 656, 670, 682, 712, 718, 723, 727, 728, 758, 763, 764, 780, 788, 800, 818, 821, 822, 827, 828, 876, 913, 942, 977, 999, 1031, 1064, 1075, 1113, 1114, 1120, 1176, 1179, 1180, 1182, 1218, 1231, 1236, 1250, 1262, 1284, 1308], "across": [37, 54, 123, 196, 216, 218, 223, 256, 306, 472, 715, 717, 733, 734, 736, 740, 766, 768, 771, 784, 800, 1075, 1308], "effect": [37, 183, 191, 194, 264, 306, 406, 551, 573, 575, 577, 742, 743, 800, 839, 842, 891, 892, 913, 1000, 1009], "heatmap": [37, 306], "min": [37, 42, 46, 169, 179, 223, 229, 238, 306, 373, 380, 385, 459, 588, 599, 608, 614, 771, 779, 800, 825, 834, 866, 913, 917, 979, 985, 989, 994, 1067, 1175, 1189, 1308, 1317], "entir": [37, 60, 61, 125, 131, 253, 306, 821, 822, 913], "made": [37, 122, 306], "abov": [37, 143, 211, 229, 306, 790], "than": [37, 43, 44, 45, 46, 60, 61, 107, 112, 114, 120, 121, 122, 125, 131, 134, 140, 150, 152, 164, 190, 193, 208, 211, 214, 227, 239, 240, 242, 268, 273, 292, 306, 466, 469, 471, 478, 496, 526, 546, 549, 551, 563, 596, 607, 622, 632, 651, 655, 661, 662, 673, 682, 691, 729, 742, 764, 800, 821, 822, 838, 841, 848, 901, 913, 1081, 1134, 1155, 1173, 1183, 1197, 1213, 1231, 1235, 1241, 1242, 1253, 1262, 1271, 1308, 1317], "bold": [37, 306], "font_color": [37, 306], "702963": [37, 306], "total": [37, 175, 287, 306, 405, 409, 413, 416, 418, 423, 430, 435, 436, 437, 438, 439, 440, 441, 497, 518, 800, 896, 1008, 1012, 1019, 1022, 1025, 1030, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1057, 1105, 1126, 1308], "export": [37, 208, 209, 240, 241, 261, 264, 306, 796], "associ": [37, 48, 50, 54, 123, 125, 149, 241, 306], "sum": [37, 47, 175, 183, 190, 191, 206, 229, 238, 256, 284, 306, 381, 382, 387, 391, 447, 460, 539, 551, 559, 561, 562, 563, 564, 603, 608, 618, 712, 714, 733, 735, 736, 737, 739, 740, 751, 764, 775, 784, 800, 821, 822, 826, 830, 832, 838, 839, 860, 862, 866, 870, 874, 893, 913, 917, 918, 986, 987, 991, 1055, 1057, 1193, 1308], "must": [37, 72, 109, 110, 124, 135, 136, 140, 169, 176, 191, 192, 194, 195, 211, 221, 238, 239, 306, 389, 539, 549, 596, 603, 608, 611, 612, 613, 614, 615, 617, 618, 619, 790, 800, 825, 831, 839, 840, 842, 843, 848, 852, 853, 858, 866, 874, 913, 917, 993, 994, 1173, 1179, 1308], "funcnam": [37, 306], "averag": [37, 306, 450, 451, 452, 453, 599, 800, 1058, 1059, 1060, 1061, 1175, 1308], "count_num": [37, 306], "count": [37, 47, 140, 161, 169, 191, 225, 226, 238, 270, 275, 281, 297, 306, 322, 339, 348, 378, 383, 396, 451, 474, 497, 505, 506, 518, 524, 551, 570, 586, 608, 611, 612, 613, 614, 615, 617, 618, 619, 641, 642, 708, 710, 719, 725, 732, 760, 772, 800, 815, 825, 839, 860, 866, 891, 906, 913, 942, 951, 994, 999, 1059, 1077, 1105, 1113, 1114, 1126, 1132, 1162, 1168, 1221, 1222, 1294, 1296, 1308], "std_dev": [37, 306], "var": [37, 153, 306, 619, 800, 913, 1308], "pixel": [37, 306], "unit": [37, 69, 71, 143, 144, 145, 146, 150, 152, 175, 306, 398, 400, 407, 433, 445, 451, 457, 545, 560, 681, 684, 709, 742, 743, 744, 745, 746, 747, 753, 800, 862, 913, 917, 918, 1001, 1003, 1010, 1040, 1052, 1057, 1059, 1065, 1153, 1261, 1264, 1295, 1308, 1317], "hand": [37, 120, 121, 134, 306, 527, 528, 529, 530, 1135, 1136, 1137, 1138], "side": [37, 191, 192, 194, 195, 238, 306, 478, 527, 528, 529, 530, 608, 611, 612, 613, 614, 615, 617, 618, 619, 623, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 866, 913, 917, 1081, 1135, 1136, 1137, 1138, 1199, 1308], "call": [37, 51, 53, 92, 113, 121, 122, 125, 143, 144, 145, 146, 150, 152, 157, 190, 191, 194, 212, 214, 238, 253, 305, 306, 321, 379, 382, 396, 493, 551, 571, 572, 574, 576, 578, 579, 594, 628, 696, 725, 730, 796, 800, 838, 839, 840, 842, 843, 866, 877, 912, 913, 917, 918, 925, 999, 1155, 1209, 1288, 1308], "ad": [37, 111, 125, 191, 194, 270, 274, 279, 280, 306, 320, 457, 733, 734, 737, 738, 800, 839, 842, 885, 888, 889, 913, 993, 1065, 1173, 1308], "wise": [37, 54, 122, 183, 306, 323, 324, 325, 326, 327, 328, 374, 375, 376, 455, 543, 629, 630, 631, 701, 702, 737, 738, 751, 775, 800, 926, 927, 928, 929, 930, 931, 981, 982, 983, 1062, 1151, 1152, 1210, 1211, 1212, 1282, 1283, 1308], "particip": [37, 306], "distinct": [37, 152, 227, 283, 306, 356, 481, 482, 485, 486, 540, 599, 607, 747, 800, 959, 1086, 1087, 1092, 1093, 1148, 1175, 1183, 1308, 1317], "referenc": [37, 306, 694], "differ": [37, 120, 125, 140, 143, 145, 177, 191, 196, 208, 238, 240, 241, 261, 270, 306, 392, 404, 424, 425, 427, 443, 449, 472, 507, 527, 529, 539, 551, 580, 581, 583, 603, 681, 708, 750, 753, 759, 800, 830, 839, 866, 913, 918, 971, 995, 1007, 1031, 1032, 1034, 1050, 1056, 1064, 1075, 1115, 1135, 1137, 1155, 1164, 1165, 1179, 1200, 1261, 1308], "row_index": [37, 306], "height": [37, 172, 306], "intersect": [37, 306, 528, 918, 1136], "bodi": [37, 306], "start": [37, 118, 120, 121, 123, 126, 128, 131, 132, 134, 137, 138, 139, 154, 185, 190, 191, 193, 194, 212, 251, 258, 275, 281, 282, 306, 359, 362, 363, 396, 404, 419, 425, 428, 442, 443, 454, 468, 513, 532, 607, 611, 612, 614, 617, 618, 619, 633, 639, 645, 648, 662, 670, 674, 676, 678, 679, 682, 691, 700, 720, 725, 733, 737, 742, 743, 745, 746, 749, 751, 757, 758, 787, 788, 790, 800, 837, 838, 839, 841, 842, 862, 875, 881, 891, 892, 913, 918, 965, 999, 1001, 1004, 1007, 1010, 1011, 1018, 1021, 1024, 1026, 1029, 1032, 1035, 1040, 1049, 1050, 1072, 1121, 1140, 1183, 1214, 1225, 1228, 1242, 1250, 1254, 1256, 1258, 1262, 1271, 1281, 1308, 1317], "unless": [37, 54, 110, 268, 306, 676, 677, 776, 913, 1256, 1298, 1308], "marker": [37, 306], "compliant": [37, 306], "case": [37, 53, 54, 61, 108, 110, 111, 112, 114, 122, 129, 130, 138, 139, 154, 160, 177, 191, 192, 194, 195, 208, 214, 238, 240, 241, 261, 306, 397, 451, 548, 549, 559, 560, 572, 608, 611, 612, 613, 614, 615, 617, 618, 619, 639, 640, 648, 650, 664, 665, 666, 800, 822, 839, 840, 842, 843, 866, 913, 917, 918, 1000, 1059, 1064, 1219, 1220, 1228, 1230, 1244, 1245, 1246, 1308], "three": [37, 238, 267, 306, 389, 596, 608, 623, 651, 682, 800, 866, 913, 958, 993, 1147, 1173, 1231, 1262, 1308], "avail": [37, 38, 117, 122, 123, 124, 135, 136, 148, 157, 229, 253, 305, 306, 599, 792, 793, 795, 799, 800, 801, 802, 805, 806, 807, 808, 809, 812, 832, 877, 912, 913, 917, 918, 994, 1175, 1300, 1302, 1304, 1308, 1309, 1313, 1314, 1315, 1316], "insert_befor": [37, 306], "insert_aft": [37, 306], "respect": [37, 306, 640, 666, 918, 1220, 1246], "direct": [37, 123, 132, 136, 139, 143, 248, 273, 306, 350, 531, 625, 800, 872, 913, 953, 1139, 1205, 1308], "far": [37, 306], "strongli": [37, 154, 214, 239, 292, 306, 551, 800, 1155, 1308], "advis": [37, 53, 92, 212, 306], "structur": [37, 38, 97, 98, 105, 177, 228, 241, 264, 306, 592, 800, 861, 913, 1064, 1308], "wherev": [37, 214, 292, 306, 551, 800, 1155, 1308], "possibl": [37, 97, 110, 111, 114, 120, 125, 162, 190, 193, 208, 214, 240, 269, 271, 292, 306, 545, 551, 559, 610, 673, 709, 800, 816, 838, 841, 876, 882, 883, 913, 1155, 1185, 1253, 1308], "simpl": [37, 152, 225, 306], "colx": [37, 52, 306, 578, 579, 918, 1317], "coli": [37, 306, 578, 579, 918, 1317], "after": [37, 52, 62, 111, 118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 177, 272, 305, 306, 454, 550, 588, 599, 691, 800, 884, 913, 1064, 1154, 1175, 1271, 1308], "befor": [37, 68, 69, 120, 122, 125, 134, 140, 143, 144, 145, 146, 154, 157, 177, 191, 194, 211, 253, 268, 272, 306, 381, 382, 388, 549, 550, 588, 589, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 691, 697, 777, 778, 800, 839, 842, 845, 848, 884, 913, 917, 986, 987, 992, 1064, 1154, 1169, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1271, 1278, 1308], "most": [37, 49, 108, 120, 121, 123, 134, 143, 144, 145, 146, 306, 560, 568, 589, 673, 800, 1160, 1169, 1253, 1308, 1316], "mandatori": [37, 306], "return_dtyp": [37, 160, 214, 306, 321, 547, 549, 550, 551, 603, 713, 718, 762, 763, 764, 800, 925, 1154, 1155, 1179, 1308], "latter": [37, 177, 306, 1064, 1308], "appropri": [37, 140, 264, 306, 599, 800, 1175, 1308], "pure": [37, 306, 1289, 1308], "actual": [37, 111, 150, 152, 241, 306, 1208, 1308], "indic": [37, 68, 69, 71, 84, 118, 120, 121, 122, 126, 128, 132, 134, 139, 147, 148, 152, 191, 192, 194, 195, 238, 241, 246, 248, 262, 306, 332, 350, 467, 474, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 512, 531, 537, 555, 556, 557, 558, 608, 611, 612, 613, 614, 615, 617, 618, 619, 623, 625, 629, 699, 723, 724, 800, 839, 840, 842, 843, 866, 871, 872, 913, 917, 918, 953, 1071, 1077, 1085, 1086, 1087, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1120, 1139, 1145, 1198, 1199, 1202, 1205, 1210, 1280, 1285, 1308, 1317], "calcul": [37, 54, 169, 191, 254, 276, 306, 392, 450, 451, 452, 453, 494, 507, 527, 534, 541, 545, 616, 632, 637, 709, 711, 729, 731, 777, 778, 781, 789, 800, 825, 839, 878, 886, 913, 994, 995, 1058, 1059, 1060, 1061, 1104, 1115, 1135, 1191, 1213, 1217, 1297, 1308], "individu": [37, 46, 150, 157, 238, 264, 268, 306, 551, 648, 800, 821, 866, 913, 975, 1228, 1308], "gridlin": [37, 306], "zoom": [37, 306], "freez": [37, 306], "pane": [37, 306], "top": [37, 269, 306, 705, 800, 882, 913], "index": [37, 109, 113, 116, 120, 121, 126, 128, 132, 134, 137, 138, 139, 142, 159, 181, 185, 187, 191, 192, 194, 195, 200, 201, 206, 208, 229, 235, 236, 238, 239, 240, 248, 251, 258, 264, 266, 274, 275, 281, 282, 306, 315, 329, 330, 331, 333, 336, 337, 342, 350, 355, 451, 467, 468, 470, 501, 502, 512, 513, 514, 531, 532, 537, 539, 608, 611, 612, 613, 614, 615, 617, 618, 619, 623, 625, 633, 639, 647, 650, 651, 670, 682, 699, 700, 723, 757, 760, 800, 837, 839, 840, 842, 843, 866, 872, 875, 881, 885, 891, 892, 913, 932, 933, 934, 935, 936, 939, 940, 945, 953, 958, 1059, 1071, 1072, 1103, 1109, 1110, 1120, 1121, 1122, 1139, 1140, 1145, 1147, 1166, 1198, 1199, 1202, 1205, 1214, 1227, 1230, 1231, 1250, 1262, 1280, 1281, 1308], "thu": [37, 177, 306, 729, 1064, 1308], "altern": [37, 306, 796], "a2": [37, 55, 57, 306], "occur": [37, 60, 61, 306, 339, 505, 506, 568, 599, 800, 821, 822, 830, 832, 862, 874, 913, 942, 1113, 1114, 1160, 1175, 1289, 1308], "equival": [37, 108, 110, 111, 112, 114, 124, 129, 130, 138, 191, 206, 225, 306, 314, 318, 448, 449, 451, 464, 469, 471, 496, 546, 567, 569, 582, 583, 584, 587, 593, 656, 695, 706, 713, 750, 759, 800, 839, 913, 1059, 1103, 1236, 1267, 1269, 1270, 1308], "top_row": [37, 306], "top_col": [37, 306], "base": [37, 67, 100, 172, 180, 191, 192, 194, 195, 238, 306, 397, 406, 447, 450, 451, 452, 453, 460, 474, 542, 543, 549, 551, 596, 603, 608, 663, 686, 800, 828, 835, 839, 840, 842, 843, 866, 913, 918, 1000, 1009, 1055, 1058, 1059, 1060, 1061, 1077, 1150, 1151, 1155, 1173, 1179, 1243, 1266, 1299, 1308, 1317], "scroll": [37, 306], "region": [37, 136, 306], "initi": [37, 83, 157, 306, 733, 737, 751, 790, 1316], "5th": [37, 306], "properti": [37, 159, 166, 173, 182, 198, 243, 247, 278, 282, 306, 823, 829, 867, 887, 892, 913, 918, 1308, 1317], "readthedoc": [37, 306], "html": [37, 38, 39, 109, 122, 126, 128, 159, 167, 306], "definit": [37, 148, 306, 494, 800, 1104, 1308], "take": [37, 125, 131, 150, 157, 183, 185, 191, 194, 218, 221, 228, 229, 233, 258, 264, 306, 331, 396, 424, 460, 467, 468, 512, 513, 573, 575, 577, 635, 700, 723, 725, 742, 743, 748, 750, 759, 800, 837, 839, 842, 858, 864, 881, 913, 934, 999, 1031, 1071, 1072, 1120, 1121, 1281, 1299, 1308], "care": [37, 306, 321, 551, 624, 800, 1203, 1308], "rel": [37, 123, 124, 135, 136, 143, 144, 145, 146, 306, 424, 450, 452, 453, 613, 615, 617, 619, 800, 1031, 1058, 1060, 1061, 1308], "working_with_conditional_format": [37, 306], "similarli": [37, 111, 191, 211, 238, 275, 306, 424, 428, 442, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049], "well": [37, 120, 121, 122, 134, 229, 306, 478, 800, 1081, 1308], "adjac": [37, 306], "two": [37, 52, 53, 91, 92, 110, 112, 114, 123, 183, 211, 220, 221, 229, 240, 253, 267, 285, 292, 306, 315, 393, 400, 467, 470, 539, 596, 634, 721, 722, 729, 731, 777, 778, 800, 857, 858, 877, 894, 901, 913, 958, 996, 1003, 1147, 1173, 1308], "help": [37, 143, 144, 145, 146, 306, 309, 832, 913, 1308, 1312], "where": [37, 47, 54, 122, 123, 125, 149, 172, 177, 191, 208, 220, 240, 253, 254, 268, 274, 276, 306, 332, 444, 447, 449, 451, 534, 541, 583, 602, 623, 632, 635, 637, 666, 711, 724, 729, 731, 777, 778, 781, 789, 790, 800, 828, 839, 857, 877, 878, 885, 886, 913, 935, 1051, 1055, 1059, 1064, 1199, 1213, 1217, 1246, 1297, 1299, 1308, 1316], "appear": [37, 66, 111, 306, 708, 800, 1294, 1308], "working_with_sparklin": [37, 306], "inject": [37, 54, 306], "locat": [37, 177, 235, 236, 266, 272, 306, 623, 800, 884, 913, 1064, 1071, 1198, 1199, 1202, 1280, 1308], "syntax": [37, 180, 214, 225, 306, 639, 647, 648, 650, 664, 665, 757, 758, 796, 835, 874, 913, 1219, 1227, 1228, 1230, 1244, 1245, 1308], "correctli": [37, 125, 306, 549, 800], "microsoft": [37, 306], "com": [37, 123, 306, 450, 452, 453, 647, 648, 649, 800, 1058, 1060, 1061, 1227, 1228, 1229, 1308], "u": [37, 50, 69, 71, 139, 211, 306, 398, 400, 407, 433, 445, 681, 684, 715, 717, 742, 743, 744, 745, 746, 747, 753, 918, 1001, 1003, 1010, 1040, 1052, 1261, 1264], "offic": [37, 306], "f5ed2452": [37, 306], "2337": [37, 306], "4f71": [37, 306], "bed3": [37, 306], "c8ae6d2b276": [37, 306], "instanti": [37, 122, 244, 279, 306, 868, 888, 913], "basic": [37, 306, 1317], "random": [37, 38, 126, 141, 148, 150, 152, 196, 242, 306, 472, 526, 599, 622, 628, 710, 800, 812, 1075, 1134, 1175, 1197, 1209, 1296, 1308], "dtm": [37, 306, 400, 918, 1003], "500": [37, 274, 306, 402, 403, 408, 412, 415, 417, 422, 429, 432, 832, 885, 913, 1018, 1021, 1029, 1186, 1187, 1189, 1308], "val": [37, 237, 306, 551, 592, 703, 790, 800, 865, 913], "10_000": [37, 306], "20_000": [37, 306], "30_000": [37, 306], "increas": [37, 54, 120, 131, 132, 139, 306, 388, 607, 800, 992, 1183, 1308], "b4": [37, 306], "light": [37, 306], "twice": [37, 306], "titl": [37, 47, 306], "explicit": [37, 122, 134, 148, 253, 274, 306, 775, 877, 885, 913], "integr": [37, 268, 306, 1317], "multi_fram": [37, 306], "wb": [37, 306], "coordin": [37, 306], "advanc": [37, 125, 229, 306, 355, 539, 571, 574, 576, 578, 579, 958, 1147, 1317], "min_color": [37, 306], "76933c": [37, 306], "mid_color": [37, 306], "c4d79b": [37, 306], "max_color": [37, 306], "ebf1d": [37, 306], "data_bar_2010": [37, 306], "bar_color": [37, 306], "9bbb59": [37, 306], "bar_negative_color_sam": [37, 306], "bar_negative_border_color_sam": [37, 306], "white": [37, 306], "w": [37, 49, 50, 122, 191, 194, 241, 306, 642, 647, 649, 715, 717, 839, 842, 913, 918, 1222, 1227, 1229, 1257], "get_worksheet_by_nam": [37, 306], "fmt_titl": [37, 306], "add_format": [37, 306], "4f6228": [37, 306], "font_siz": [37, 306], "ital": [37, 306], "customis": [37, 306], "trend": [37, 306], "win_loss": [37, 306], "subtl": [37, 306], "tone": [37, 306], "hidden": [37, 306], "q1": [37, 306], "55": [37, 56, 306], "35": [37, 306, 392, 800, 995, 1308], "q2": [37, 306], "30": [37, 169, 177, 191, 199, 228, 234, 236, 260, 279, 306, 329, 330, 331, 392, 400, 402, 403, 408, 412, 415, 417, 419, 420, 422, 426, 427, 428, 429, 432, 435, 442, 443, 472, 627, 744, 761, 786, 787, 800, 825, 839, 861, 888, 913, 918, 995, 1003, 1027, 1034, 1035, 1042, 1049, 1308, 1317], "60": [37, 177, 306, 408, 415, 417, 429, 441, 618, 681, 800, 1032, 1036, 1048, 1261], "q3": [37, 306], "40": [37, 169, 177, 211, 228, 306, 428, 442, 472, 541, 685, 800, 825, 861, 913, 1014, 1049, 1149, 1265], "80": [37, 306], "q4": [37, 306], "75": [37, 169, 306, 318, 587, 596, 611, 612, 613, 614, 617, 618, 619, 764, 800, 825, 913, 994, 1077, 1104, 1173, 1308, 1317], "account": [37, 115, 123, 136, 306, 424, 450, 452, 453, 800, 1031, 1058, 1060, 1061, 1308], "flavour": [37, 122, 306], "integer_dtyp": [37, 244, 306, 868, 913, 918], "0_": [37, 306], "just": [37, 113, 122, 134, 220, 306, 857, 913], "unifi": [37, 268, 306, 918], "2_color_scal": [37, 306], "95b3d7": [37, 306], "ffffff": [37, 306], "standardis": [37, 306], "z": [37, 49, 62, 83, 115, 148, 150, 175, 203, 205, 210, 220, 240, 241, 270, 273, 306, 314, 316, 318, 472, 503, 548, 551, 572, 574, 576, 578, 579, 587, 594, 602, 603, 640, 648, 666, 681, 684, 696, 715, 717, 736, 766, 768, 771, 776, 784, 800, 847, 857, 875, 877, 913, 918, 1067, 1179, 1220, 1228, 1246, 1261, 1264, 1308, 1316], "score": [37, 306], "conjunct": [37, 91, 122, 125, 131, 306, 757, 760], "a123": [37, 306], "b345": [37, 306], "c567": [37, 306], "d789": [37, 306], "e101": [37, 306], "45": [37, 169, 238, 306, 400, 428, 442, 608, 618, 642, 648, 693, 721, 722, 744, 761, 786, 787, 800, 825, 866, 913, 918, 1003, 1035, 1049, 1222, 1228, 1274, 1317], "85": [37, 306, 1104, 1308, 1317], "font": [37, 306], "consola": [37, 306], "stdev": [37, 306], "ipccompress": [38, 39, 306], "futur": [38, 61, 125, 159, 169, 215, 217, 222, 255, 306, 742, 822, 825, 913, 1298, 1308], "arrow": [38, 39, 44, 108, 122, 123, 126, 128, 137, 208, 240, 241, 259, 261, 264, 306, 913, 1284, 1289, 1308], "ipc": [38, 39, 44, 126, 127, 128, 137, 140, 306, 812, 913], "binari": [38, 122, 125, 306, 359, 360, 361, 362, 363, 643, 918, 961, 962, 964, 965, 1223], "feather": [38, 126, 137, 306, 812], "access": [38, 55, 56, 57, 58, 126, 132, 136, 137, 139, 159, 208, 239, 240, 306, 649, 890, 913, 1229, 1317], "lz4": [38, 39, 42, 44, 46, 306, 913], "zstd": [38, 39, 42, 44, 46, 306, 913], "intern": [38, 122, 141, 208, 306, 1316], "might": [38, 120, 121, 134, 154, 162, 264, 269, 306, 321, 551, 708, 800, 816, 876, 882, 913], "implement": [38, 42, 109, 122, 159, 196, 214, 292, 306, 309, 472, 493, 551, 571, 572, 574, 576, 578, 579, 594, 696, 764, 800, 901, 1075, 1155, 1198, 1201, 1308, 1312], "unstabl": [38, 43, 44, 45, 46, 60, 61, 70, 72, 122, 132, 139, 140, 253, 273, 274, 306, 388, 389, 428, 474, 551, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 777, 778, 800, 821, 822, 877, 885, 913, 972, 992, 993, 1035, 1077, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308], "break": [38, 43, 44, 45, 46, 60, 61, 70, 72, 132, 139, 140, 253, 273, 274, 275, 306, 321, 388, 389, 428, 442, 474, 551, 596, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 777, 778, 800, 821, 822, 877, 885, 913, 970, 972, 992, 993, 1035, 1049, 1077, 1173, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308], "batch": [39, 60, 61, 117, 121, 122, 128, 138, 140, 240, 268, 306, 821, 822, 852, 853, 913], "iobas": [40, 41, 129, 130, 306, 391, 562, 565, 800, 826, 870, 913], "pretti": [40, 306], "row_ori": [40, 306], "serial": [40, 41, 306, 391, 565, 800, 826, 913], "orient": [40, 55, 57, 112, 114, 306, 913], "slower": [40, 112, 114, 125, 190, 193, 214, 227, 275, 292, 306, 551, 764, 800, 838, 841, 901, 913, 1155, 1308], "common": [40, 54, 60, 61, 62, 120, 121, 134, 274, 306, 548, 572, 800, 806, 821, 822, 830, 832, 862, 874, 885, 913], "write_ndjson": [40, 306], "bit_set": [40, 306, 870, 913], "newlin": [41, 130, 138, 306], "delimit": [41, 43, 130, 138, 229, 262, 306, 638, 913, 1218, 1285, 1308], "parquetcompress": [42, 306], "compression_level": [42, 46, 306, 913], "statist": [42, 46, 120, 121, 132, 139, 169, 306, 452, 453, 494, 611, 612, 613, 614, 615, 616, 617, 618, 619, 632, 800, 825, 913, 994, 1060, 1061, 1104, 1191, 1213, 1308], "row_group_s": [42, 46, 306, 913], "data_page_s": [42, 306], "use_pyarrow": [42, 120, 126, 128, 132, 264, 306, 1288, 1289, 1308], "pyarrow_opt": [42, 124, 132, 135, 306], "parquet": [42, 46, 132, 133, 139, 306, 812, 913], "gzip": [42, 46, 306, 913], "lzo": [42, 46, 306, 913], "brotli": [42, 46, 306, 913], "choos": [42, 44, 46, 191, 229, 306, 839, 913], "good": [42, 44, 46, 208, 306, 913], "perform": [42, 44, 46, 54, 95, 98, 105, 109, 120, 121, 122, 126, 132, 134, 137, 138, 139, 159, 162, 190, 191, 192, 193, 194, 195, 211, 214, 215, 217, 222, 232, 238, 240, 241, 255, 264, 269, 292, 306, 321, 539, 549, 551, 588, 608, 640, 655, 656, 666, 681, 683, 684, 800, 816, 839, 840, 842, 843, 848, 866, 876, 882, 891, 892, 913, 1155, 1220, 1235, 1236, 1246, 1261, 1263, 1264, 1288, 1289, 1308], "fast": [42, 44, 46, 151, 153, 306, 457, 624, 800, 913, 917, 1065, 1203, 1308, 1317], "decompress": [42, 44, 46, 306, 913], "backward": [42, 46, 179, 211, 306, 358, 396, 421, 459, 800, 834, 848, 913, 999, 1028, 1067, 1308], "guarante": [42, 46, 120, 121, 169, 196, 271, 306, 472, 800, 825, 832, 883, 913, 1074, 1075, 1308], "deal": [42, 46, 208, 306, 317, 319, 427, 428, 442, 599, 681, 684, 714, 715, 716, 717, 744, 800, 913, 922, 923, 1034, 1035, 1049, 1175, 1261, 1264, 1308], "older": [42, 46, 306, 913], "reader": [42, 46, 117, 120, 121, 125, 126, 128, 132, 306, 913], "higher": [42, 46, 169, 231, 298, 306, 597, 615, 774, 800, 825, 863, 907, 913, 994, 1174, 1190, 1308], "mean": [42, 46, 120, 121, 126, 132, 134, 169, 179, 190, 191, 211, 218, 229, 238, 275, 284, 306, 424, 428, 442, 456, 459, 608, 611, 612, 613, 614, 615, 617, 618, 619, 632, 638, 647, 742, 743, 745, 746, 747, 768, 787, 788, 790, 800, 825, 834, 838, 839, 848, 852, 853, 866, 893, 913, 994, 1031, 1035, 1049, 1063, 1067, 1074, 1187, 1213, 1218, 1227, 1308], "smaller": [42, 46, 175, 306, 832, 913, 1057, 1308], "disk": [42, 43, 44, 45, 46, 126, 306, 874, 913], "22": [42, 46, 142, 149, 306, 404, 425, 428, 442, 444, 445, 610, 611, 612, 614, 617, 618, 619, 681, 800, 913, 918, 1035, 1049, 1052, 1185, 1261, 1308, 1317], "behavior": [42, 46, 172, 210, 306, 342, 466, 512, 514, 537, 550, 750, 759, 800, 828, 847, 913, 945, 993, 1120, 1122, 1145, 1154, 1173, 1308], "512": [42, 122, 208, 306, 593, 800, 1169, 1308], "page": [42, 46, 126, 132, 137, 139, 306, 800, 812, 913, 1308], "At": [42, 306], "moment": [42, 167, 306, 494, 632, 800, 1104, 1213, 1308], "write_t": [42, 306], "partition_col": [42, 123, 306], "write_to_dataset": [42, 306], "spark": [42, 306], "partit": [42, 123, 124, 132, 135, 139, 140, 209, 227, 306], "we": [42, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 169, 191, 211, 238, 275, 306, 391, 424, 428, 442, 474, 509, 539, 549, 551, 608, 611, 612, 613, 614, 615, 617, 618, 619, 649, 663, 686, 742, 743, 745, 746, 761, 787, 788, 790, 800, 825, 826, 839, 848, 852, 853, 866, 913, 925, 1031, 1035, 1049, 1077, 1117, 1155, 1229, 1243, 1266, 1308], "use_pyarrow_write_to_dataset": [42, 306], "first": [42, 54, 120, 121, 125, 126, 128, 132, 134, 143, 144, 145, 146, 149, 160, 189, 191, 194, 197, 211, 213, 214, 224, 228, 229, 238, 257, 262, 263, 270, 271, 275, 282, 289, 306, 331, 333, 342, 388, 392, 421, 424, 428, 445, 473, 481, 482, 498, 507, 509, 514, 515, 539, 549, 550, 551, 560, 592, 608, 623, 635, 639, 647, 650, 651, 652, 654, 664, 665, 682, 726, 733, 751, 755, 790, 800, 821, 839, 842, 844, 848, 851, 861, 866, 883, 890, 892, 898, 913, 918, 934, 945, 992, 994, 995, 1028, 1031, 1035, 1052, 1076, 1086, 1087, 1106, 1115, 1117, 1122, 1123, 1147, 1154, 1155, 1199, 1215, 1227, 1229, 1230, 1231, 1232, 1234, 1244, 1245, 1262, 1279, 1285, 1287, 1308, 1317], "watermark": [42, 306], "partitioned_object": [42, 306], "maintain_ord": [43, 44, 45, 46, 162, 190, 193, 227, 229, 252, 269, 271, 275, 285, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 315, 356, 364, 365, 467, 470, 540, 551, 635, 704, 705, 707, 723, 800, 816, 822, 830, 832, 838, 841, 862, 874, 876, 882, 883, 894, 897, 899, 902, 903, 904, 905, 906, 907, 908, 913, 959, 1148, 1293, 1308], "type_coercion": [43, 44, 45, 46, 60, 61, 821, 822, 830, 832, 862, 874, 913], "predicate_pushdown": [43, 44, 45, 46, 60, 61, 821, 822, 830, 832, 852, 853, 862, 874, 913], "projection_pushdown": [43, 44, 45, 46, 60, 61, 821, 822, 830, 832, 852, 853, 862, 874, 913], "simplify_express": [43, 44, 45, 46, 60, 61, 821, 822, 830, 832, 862, 874, 913], "slice_pushdown": [43, 44, 45, 46, 60, 61, 821, 822, 830, 832, 852, 853, 862, 874, 913], "no_optim": [43, 44, 45, 46, 60, 61, 821, 822, 832, 852, 853, 862, 913], "evalu": [43, 44, 45, 46, 178, 180, 211, 306, 318, 332, 334, 335, 388, 460, 476, 499, 500, 539, 587, 714, 716, 720, 724, 742, 743, 745, 746, 748, 757, 758, 773, 776, 782, 787, 788, 790, 791, 800, 821, 835, 845, 847, 848, 913, 935, 937, 938, 992, 1107, 1108, 1299, 1308], "queri": [43, 44, 45, 46, 47, 49, 60, 61, 122, 123, 126, 134, 137, 138, 139, 177, 212, 228, 253, 306, 549, 551, 654, 800, 821, 822, 830, 832, 844, 851, 862, 874, 877, 891, 892, 895, 901, 913, 1064, 1155, 1234, 1308, 1316], "ram": [43, 44, 45, 46, 913], "maintain": [43, 44, 45, 46, 162, 252, 269, 306, 356, 364, 365, 540, 623, 635, 704, 705, 707, 723, 800, 816, 825, 876, 882, 913, 959, 1148, 1199, 1293, 1308], "slightli": [43, 44, 45, 46, 913], "faster": [43, 44, 45, 46, 122, 125, 177, 264, 273, 306, 321, 551, 708, 800, 913, 925, 1064, 1155, 1308], "coercion": [43, 44, 45, 46, 60, 61, 602, 800, 821, 822, 830, 832, 862, 874, 913], "optim": [43, 44, 45, 46, 60, 61, 132, 134, 137, 138, 139, 208, 212, 228, 232, 240, 271, 306, 817, 821, 822, 830, 832, 852, 853, 862, 874, 883, 891, 892, 901, 913, 973, 1198, 1308], "pushdown": [43, 44, 45, 46, 60, 61, 821, 822, 830, 832, 852, 853, 862, 864, 874, 891, 892, 913, 1198, 1201, 1308], "project": [43, 44, 45, 46, 60, 61, 134, 136, 137, 138, 139, 321, 634, 635, 800, 821, 822, 830, 832, 852, 853, 862, 864, 870, 874, 913], "run": [43, 44, 45, 46, 60, 61, 69, 122, 151, 153, 190, 193, 212, 214, 229, 245, 271, 280, 292, 306, 321, 388, 509, 549, 551, 606, 607, 656, 779, 800, 821, 822, 830, 832, 838, 841, 852, 853, 857, 862, 869, 874, 883, 889, 913, 918, 992, 1117, 1155, 1182, 1183, 1236, 1308, 1316, 1317], "slice": [43, 44, 45, 46, 55, 60, 61, 175, 197, 209, 257, 306, 515, 536, 551, 559, 561, 609, 611, 612, 613, 614, 615, 617, 618, 619, 651, 682, 800, 821, 822, 830, 832, 852, 853, 862, 874, 913, 917, 1057, 1076, 1123, 1144, 1184, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1231, 1262, 1279, 1308], "off": [43, 44, 45, 46, 60, 61, 120, 121, 134, 396, 725, 821, 822, 830, 832, 852, 853, 862, 913, 999], "certain": [43, 44, 45, 46, 61, 124, 135, 200, 201, 275, 306, 677, 678, 821, 822, 862, 913, 1308], "lf": [43, 44, 45, 46, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 870, 872, 874, 875, 876, 878, 879, 880, 882, 883, 885, 886, 887, 888, 890, 891, 892, 896, 900, 913, 1316, 1317], "scan_csv": [43, 44, 45, 46, 120, 121, 913], "my_larger_than_ram_fil": [43, 44, 45, 46, 913], "ndjson": [45, 913], "data_pagesize_limit": [46, 913], "reduc": [46, 120, 121, 132, 134, 137, 138, 139, 240, 293, 294, 296, 299, 306, 627, 734, 751, 800, 902, 903, 905, 908, 913, 1157, 1172, 1207, 1278, 1308], "pressur": [46, 120, 121, 132, 134, 138, 139, 627, 800, 913, 1207, 1308], "improv": [46, 126, 137, 549, 800, 913], "speed": [46, 321, 551, 800, 913, 1317], "eager": [47, 48, 49, 50, 51, 52, 191, 211, 229, 273, 306, 398, 401, 404, 407, 420, 421, 424, 425, 427, 428, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 611, 612, 614, 617, 618, 619, 720, 724, 742, 743, 745, 746, 753, 757, 758, 773, 776, 782, 787, 788, 791, 799, 800, 839, 853, 913, 1000, 1001, 1004, 1007, 1009, 1010, 1011, 1017, 1018, 1021, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1316], "against": [47, 97, 120, 122, 253, 306, 509, 650, 877, 913, 1117, 1230, 1316, 1317], "eagerli": [47, 539], "unset": [47, 149, 291, 427, 539, 900, 1034], "init": [47, 157], "eager_execut": [47, 1316], "itself": [47, 148, 306, 309, 551, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 777, 778, 800, 850, 913, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308, 1312, 1316], "impact": [47, 191, 194, 306, 839, 842, 913, 1316], "declar": [47, 108, 110, 111, 112, 114, 122, 129, 130, 138, 306, 913], "godfath": 47, "1972": 47, "6_000_000": 47, "134_821_952": 47, "dark": 47, "knight": 47, "2008": 47, "185_000_000": 47, "533_316_061": 47, "schindler": 47, "1993": 47, "22_000_000": 47, "96_067_179": 47, "pulp": 47, "fiction": 47, "1994": 47, "8_000_000": 47, "107_930_000": 47, "shawshank": 47, "redempt": 47, "25_000_000": 47, "28_341_469": 47, "release_year": 47, "budget": 47, "gross": 47, "imdb_scor": 47, "ctx": [47, 48, 49, 50, 51, 52], "film": 47, "1990": [47, 120], "BY": [47, 49, 877, 913], "desc": [47, 49], "AS": [47, 253, 306, 780, 877, 913, 1316], "decad": 47, "total_gross": 47, "n_film": 47, "2000": [47, 399, 410, 414, 420, 421, 424, 918, 1002, 1013, 1020, 1027, 1028, 1031, 1036], "533316061": 47, "232338648": 47, "1970": [47, 68, 69, 140], "134821952": 47, "register_glob": [48, 50, 52, 1316], "register_mani": [48, 49, 52], "unregist": [48, 49, 50, 1316], "frame_data": [48, 51], "collect": [48, 49, 52, 57, 60, 61, 134, 135, 136, 140, 150, 152, 172, 212, 229, 253, 259, 271, 272, 306, 454, 483, 551, 727, 749, 753, 782, 800, 815, 816, 818, 819, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 870, 872, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 913, 918, 1089, 1308, 1316, 1317], "global": [49, 53, 91, 92, 125, 141, 150, 156, 253, 264, 306, 603, 800, 877, 913, 969, 971, 1179, 1308, 1316], "scope": [49, 52, 157, 811, 918, 1316], "map": [49, 50, 83, 110, 111, 120, 121, 122, 123, 126, 127, 132, 133, 134, 137, 163, 173, 182, 208, 214, 233, 239, 240, 241, 260, 306, 316, 428, 442, 548, 549, 550, 551, 571, 573, 574, 576, 578, 579, 603, 710, 763, 800, 818, 829, 864, 913, 918, 994, 1035, 1049, 1154, 1155, 1179, 1296, 1308, 1316], "recent": [49, 143, 144, 145, 146, 589, 800, 1169, 1308, 1316], "df1": [49, 51, 52, 54, 62, 143, 144, 174, 177, 221, 253, 277, 306, 858, 913], "df2": [49, 51, 52, 54, 62, 143, 144, 174, 177, 253, 277, 306], "join": [49, 53, 54, 60, 61, 62, 92, 180, 211, 253, 274, 306, 460, 477, 588, 800, 821, 822, 830, 832, 835, 848, 862, 874, 877, 885, 890, 913], "named_fram": [50, 1316], "lf1": [50, 52, 877, 913], "m": [50, 69, 71, 210, 306, 397, 398, 400, 406, 407, 431, 433, 434, 445, 647, 681, 683, 684, 688, 742, 743, 744, 745, 746, 747, 753, 847, 913, 918, 1000, 1001, 1003, 1009, 1010, 1038, 1040, 1041, 1052, 1227, 1261, 1263, 1264, 1268], "o": [50, 126, 137, 364, 365, 388, 646, 704, 705, 800, 966, 992, 1226, 1256, 1292, 1308], "lf2": [50, 52, 877, 913], "p": [50, 56, 228, 306, 592, 782, 800, 861, 913, 1230, 1231], "q": [50, 241, 306, 782], "r": [50, 120, 121, 134, 306, 592, 642, 646, 647, 648, 649, 664, 665, 800, 918, 1222, 1226, 1227, 1228, 1229, 1244, 1245, 1262], "lf3": [50, 913], "lf4": [50, 913], "either": [50, 83, 150, 206, 210, 211, 212, 215, 217, 222, 227, 238, 239, 255, 264, 306, 451, 596, 603, 608, 681, 714, 723, 782, 800, 847, 848, 850, 866, 913, 917, 918, 1059, 1173, 1179, 1261, 1308, 1317], "tbl1": [50, 52], "tbl2": [50, 52], "arg": [50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 180, 228, 306, 331, 592, 723, 752, 800, 835, 861, 913, 917, 1155, 1308], "tbl3": 50, "tbl4": 50, "statement": [51, 790], "hello_world": 51, "baz": [51, 201, 202, 229, 272, 306, 649, 671, 673, 750, 759, 796, 846, 884, 913, 918, 1229, 1253], "hello_data": 51, "foo_bar": [51, 555, 558, 671, 761], "registr": [52, 253, 306, 812, 877, 913], "lifetim": [52, 157, 811], "context": [52, 53, 91, 92, 154, 225, 253, 306, 315, 321, 460, 509, 549, 551, 559, 634, 635, 710, 718, 730, 732, 750, 753, 759, 760, 764, 776, 779, 799, 800, 811, 812, 877, 890, 913, 1117, 1296, 1308, 1316], "manag": [52, 53, 91, 92, 811, 812, 1316], "often": [52, 123, 157, 191, 192, 194, 195, 238, 306, 339, 505, 506, 602, 608, 800, 839, 840, 842, 843, 866, 913, 942, 1113, 1114], "want": [52, 61, 111, 113, 125, 177, 214, 225, 306, 396, 460, 549, 551, 611, 612, 613, 614, 615, 617, 618, 619, 640, 655, 666, 725, 733, 742, 751, 773, 776, 791, 800, 822, 844, 851, 913, 918, 999, 1064, 1155, 1220, 1235, 1246, 1308], "df0": [52, 221, 306, 858, 913], "exit": [52, 53, 91, 157, 1316], "construct": [52, 53, 91, 92, 108, 110, 111, 112, 113, 114, 115, 122, 306, 466, 773, 776, 791, 796, 800, 826, 913, 969, 1308], "persist": 52, "through": [52, 109, 122, 796, 918, 1308, 1316], "tbl0": 52, "remain": [52, 120, 121, 134, 172, 175, 180, 229, 306, 394, 395, 460, 508, 603, 672, 673, 800, 828, 835, 852, 853, 913, 997, 998, 1057, 1068, 1116, 1179, 1252, 1253, 1308], "text": [52, 119, 122, 451, 651, 655, 656, 664, 665, 667, 670, 682, 780, 800, 1059, 1231, 1235, 1236, 1247, 1250, 1262, 1308, 1317], "misc": 52, "testing1234": 52, "test1": 52, "test2": 52, "test3": 52, "disabl": [53, 91, 92, 208, 306, 821, 913], "cach": [53, 60, 61, 91, 92, 126, 134, 137, 139, 143, 144, 145, 146, 156, 603, 611, 612, 613, 614, 615, 617, 618, 619, 681, 683, 684, 688, 800, 811, 821, 822, 830, 832, 862, 874, 913, 969, 1179, 1261, 1263, 1264, 1268, 1308], "under": [53, 55, 56, 57, 58, 91, 92, 253, 306, 391, 792, 793, 795, 796, 800, 801, 802, 805, 807, 808, 809, 826, 877, 913, 1300, 1302, 1304, 1309, 1313, 1314, 1315], "physic": [53, 66, 92, 120, 121, 211, 306, 368, 703, 800, 817, 847, 848, 913, 970, 971, 1291, 1308], "equal": [53, 92, 120, 121, 122, 134, 143, 144, 145, 146, 162, 184, 191, 194, 211, 221, 252, 269, 306, 364, 365, 389, 442, 448, 449, 451, 469, 496, 539, 583, 596, 602, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 635, 661, 662, 691, 704, 705, 723, 777, 778, 790, 796, 800, 816, 839, 842, 848, 858, 876, 882, 913, 993, 1035, 1059, 1147, 1173, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1200, 1241, 1242, 1271, 1308, 1317], "concaten": [53, 62, 91, 92, 183, 228, 306, 592, 638, 727, 728, 800, 861, 913, 975, 1161, 1218, 1308], "introduc": [53, 92, 681, 683, 684, 1261, 1263, 1264], "overhead": [53, 92, 134, 137, 138, 139], "amount": [53, 71, 92, 321, 551, 747, 800], "depend": [53, 59, 92, 122, 142, 336, 337, 501, 502, 551, 559, 596, 599, 747, 750, 753, 759, 800, 939, 940, 1109, 1110, 1173, 1175, 1308, 1317], "categori": [53, 72, 92, 262, 306, 367, 368, 389, 474, 596, 800, 968, 970, 993, 1077, 1173, 1285, 1308], "nest": [53, 115, 175, 306, 812, 1057, 1308, 1316, 1317], "clear": [53, 91, 165, 306, 820, 913, 980, 1308], "outermost": 53, "s1": [53, 91, 92, 145, 146, 183, 306, 958, 1056, 1103, 1111, 1147, 1299, 1308], "color": [53, 91, 92, 292, 359, 360, 361, 362, 363, 643, 710, 800, 901, 961, 962, 963, 964, 965, 1223, 1296, 1308], "red": [53, 91, 92, 292, 710, 800, 901, 1296, 1308], "green": [53, 91, 92, 292, 710, 800, 901, 1296, 1308], "blue": [53, 91, 92, 359, 360, 361, 362, 363, 710, 800, 1296, 1308], "concat": [53, 91, 92, 121, 211, 306, 975, 1161, 1308], "decor": [53, 55, 56, 57, 58, 150, 152, 214, 306, 551, 800, 811, 812, 1155, 1308], "dure": [53, 120, 121, 134, 157, 177, 306, 1064, 1308], "afterward": [53, 790], "construct_categor": 53, "frametyp": [54, 1316], "joinstrategi": [54, 210, 306, 847, 913], "outer": [54, 62, 210, 274, 306, 847, 885, 913], "descend": [54, 162, 246, 252, 269, 306, 331, 351, 365, 533, 599, 624, 634, 635, 705, 710, 723, 800, 816, 871, 876, 882, 913, 934, 954, 1099, 1141, 1175, 1203, 1215, 1296, 1308], "fill": [54, 62, 164, 178, 179, 248, 249, 273, 306, 358, 379, 382, 458, 459, 465, 477, 611, 612, 614, 618, 625, 626, 658, 668, 752, 773, 776, 791, 800, 833, 834, 872, 873, 890, 913, 1066, 1067, 1080, 1166, 1186, 1187, 1189, 1192, 1193, 1194, 1205, 1206, 1238, 1248, 1308], "sort": [54, 55, 143, 144, 149, 162, 191, 192, 194, 195, 211, 221, 228, 229, 238, 246, 269, 275, 289, 300, 306, 331, 364, 365, 368, 451, 460, 551, 588, 608, 611, 612, 613, 614, 615, 617, 618, 619, 624, 635, 704, 705, 710, 712, 723, 764, 800, 816, 830, 839, 840, 842, 843, 848, 858, 861, 862, 866, 871, 874, 882, 898, 909, 913, 918, 934, 970, 1059, 1099, 1203, 1293, 1296, 1308, 1317], "origin": [54, 120, 121, 134, 172, 180, 271, 306, 394, 395, 427, 428, 442, 460, 493, 508, 550, 571, 588, 601, 602, 603, 604, 606, 641, 642, 647, 654, 721, 722, 800, 828, 835, 883, 913, 993, 997, 998, 1034, 1035, 1049, 1068, 1116, 1154, 1173, 1179, 1180, 1182, 1221, 1222, 1227, 1234, 1308], "In": [54, 61, 122, 124, 135, 136, 139, 150, 152, 157, 175, 177, 191, 192, 194, 195, 211, 214, 225, 238, 264, 306, 549, 551, 608, 742, 800, 822, 839, 840, 842, 843, 866, 913, 1057, 1064, 1176, 1308], "duplic": [54, 96, 203, 210, 211, 271, 274, 306, 316, 479, 493, 571, 596, 800, 847, 848, 883, 885, 913, 1083, 1173, 1308], "suitabl": [54, 62, 122, 148, 214, 306, 551, 623, 800, 1155, 1199, 1308, 1317], "get": [54, 61, 127, 133, 140, 162, 166, 173, 182, 186, 188, 191, 192, 194, 195, 197, 198, 203, 205, 206, 213, 216, 223, 224, 229, 238, 239, 243, 247, 251, 257, 265, 269, 278, 289, 300, 306, 315, 329, 330, 331, 333, 341, 344, 356, 365, 367, 379, 380, 381, 382, 383, 384, 385, 386, 387, 396, 407, 461, 467, 473, 492, 495, 498, 511, 517, 540, 552, 553, 554, 559, 561, 566, 580, 581, 590, 591, 597, 607, 608, 633, 637, 697, 698, 704, 705, 707, 711, 723, 725, 750, 755, 759, 764, 765, 766, 767, 769, 770, 771, 781, 785, 789, 800, 816, 821, 822, 823, 829, 836, 839, 840, 842, 843, 844, 849, 851, 866, 867, 875, 880, 882, 887, 898, 909, 913, 917, 932, 933, 934, 935, 936, 944, 947, 959, 968, 975, 984, 985, 986, 987, 988, 989, 990, 991, 999, 1010, 1054, 1069, 1073, 1076, 1081, 1083, 1101, 1106, 1119, 1125, 1148, 1156, 1158, 1159, 1161, 1163, 1164, 1165, 1170, 1171, 1174, 1183, 1214, 1217, 1279, 1285, 1290, 1293, 1297, 1298, 1308], "speedup": [54, 208, 214, 306, 551, 800, 1155, 1308], "receiv": [54, 122, 134, 214, 228, 292, 306, 551, 592, 800, 861, 913, 1317], "now": [54, 125, 238, 306, 428, 442, 866, 913, 1035, 1049, 1264], "One": [54, 169, 225, 229, 268, 306, 318, 587, 719, 730, 750, 756, 759, 767, 769, 772, 780, 800, 825, 913, 918, 994, 1308], "whose": [54, 211, 229, 306, 454, 749, 800, 848, 913, 918], "uniqu": [54, 147, 148, 149, 152, 161, 205, 210, 225, 229, 241, 297, 306, 322, 333, 348, 389, 492, 524, 570, 596, 681, 683, 684, 688, 708, 710, 719, 772, 800, 815, 847, 906, 913, 917, 936, 951, 993, 1101, 1132, 1162, 1173, 1261, 1263, 1264, 1268, 1294, 1296, 1308], "post": 54, "constrain": [54, 172, 306, 828, 913], "newli": 54, "boolean": [54, 162, 180, 183, 252, 269, 306, 317, 318, 319, 334, 335, 338, 359, 362, 363, 365, 410, 460, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 499, 500, 504, 585, 587, 590, 591, 635, 652, 705, 712, 713, 723, 724, 782, 790, 800, 816, 835, 876, 882, 913, 918, 922, 923, 935, 937, 938, 941, 961, 1013, 1068, 1081, 1082, 1083, 1085, 1086, 1087, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1101, 1107, 1108, 1112, 1167, 1170, 1171, 1201, 1219, 1289, 1299, 1308], "know": [54, 122, 229, 306, 539, 549, 800, 1298, 1308], "2022": [54, 163, 169, 189, 306, 400, 428, 442, 681, 742, 743, 745, 746, 747, 753, 818, 825, 913, 918, 1003, 1014, 1035, 1049, 1261], "df3": [54, 306], "set_tbl_format": 54, "09": [54, 120, 150, 169, 238, 306, 396, 400, 420, 421, 608, 685, 742, 788, 800, 825, 866, 913, 918, 999, 1265], "02": [54, 163, 169, 189, 191, 238, 275, 306, 396, 398, 400, 407, 420, 421, 424, 427, 433, 436, 439, 441, 445, 608, 611, 612, 614, 617, 618, 619, 620, 681, 683, 684, 688, 725, 741, 742, 743, 744, 745, 746, 747, 800, 818, 825, 839, 866, 913, 918, 958, 1001, 1003, 1005, 1006, 1010, 1011, 1017, 1018, 1024, 1027, 1028, 1029, 1034, 1035, 1039, 1040, 1043, 1046, 1048, 1049, 1147, 1261, 1263, 1264, 1268], "03": [54, 115, 120, 163, 191, 211, 238, 275, 306, 398, 400, 401, 407, 420, 421, 424, 427, 428, 431, 433, 434, 435, 436, 439, 441, 442, 445, 451, 608, 611, 612, 614, 617, 618, 619, 683, 688, 741, 742, 743, 744, 745, 746, 747, 800, 818, 839, 866, 913, 1001, 1003, 1004, 1010, 1011, 1017, 1018, 1027, 1028, 1029, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1046, 1048, 1263, 1268], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 120, 121, 134, 271, 274, 275, 306, 466, 493, 550, 564, 572, 603, 726, 800, 883, 885, 913, 1154, 1179, 1308], "easili": [54, 244, 268, 279, 284, 306, 782, 868, 888, 893, 913], "dot": [54, 800, 874, 913, 1308], "product": [54, 167, 210, 306, 381, 386, 393, 800, 832, 847, 913, 986, 990, 996, 1308], "fill_nul": [54, 178, 306, 800, 833, 890, 913, 1308], "sum_horizont": [54, 255, 306, 783], "167": 54, "47": [54, 169, 306, 618, 800, 825, 913], "callabl": [55, 56, 57, 58, 134, 160, 183, 214, 228, 233, 286, 292, 306, 321, 355, 539, 547, 548, 549, 551, 572, 573, 592, 609, 610, 718, 733, 734, 737, 738, 751, 762, 763, 764, 775, 800, 852, 853, 861, 864, 895, 901, 913, 925, 958, 1147, 1155, 1184, 1185, 1308], "by_first_letter_of_column_nam": 55, "f": [55, 121, 122, 189, 209, 259, 270, 273, 306, 314, 355, 539, 627, 646, 681, 684, 718, 727, 762, 800, 958, 1147, 1226, 1261, 1264], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 359, 362, 639, 645, 877, 913, 918, 1225], "to_seri": [55, 186, 306, 681, 724, 776, 1261], "xy": [55, 57], "yz": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 191, 211, 238, 275, 306, 358, 396, 424, 428, 442, 599, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 970, 999, 1031, 1035, 1049, 1175, 1308], "ceil": [56, 800, 1308], "previou": [56, 157, 396, 571, 572, 574, 576, 578, 579, 589, 594, 694, 696, 800, 999, 1169, 1308], "floor": [56, 800, 1308], "nearest": [56, 169, 211, 231, 298, 306, 370, 463, 477, 597, 615, 774, 800, 825, 848, 863, 907, 913, 974, 994, 1070, 1080, 1174, 1190, 1308], "24": [56, 142, 191, 211, 214, 238, 253, 275, 306, 381, 388, 404, 424, 425, 428, 436, 442, 444, 569, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 787, 788, 800, 839, 848, 866, 913, 992, 1031, 1035, 1043, 1049, 1103, 1308], "001": [56, 691, 747, 1044, 1045, 1047, 1271], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "32": [56, 68, 73, 76, 86, 206, 211, 238, 306, 569, 608, 627, 800, 866, 913, 996, 1032, 1169, 1190, 1308], "128": [56, 70, 1169, 1308], "split_by_column_dtyp": 57, "collect_al": [57, 61, 821, 822, 913], "31": [58, 150, 169, 253, 306, 399, 400, 404, 414, 420, 424, 435, 681, 741, 744, 753, 761, 825, 913, 918, 1000, 1002, 1003, 1007, 1020, 1027, 1042, 1261, 1317], "42": [58, 169, 196, 221, 238, 306, 608, 800, 825, 858, 866, 913, 1075, 1308], "961": 58, "1764": 58, "4160": 58, "detail": [59, 109, 122, 123, 143, 145, 159, 191, 306, 839, 913, 1316, 1317], "build": [59, 109, 918, 1317], "info": [59, 124, 135, 136, 142, 306, 309, 1308, 1312], "host": [59, 120, 126, 128, 137, 139], "git": 59, "wa": [59, 143, 227, 264, 283, 306, 603, 666, 747, 800, 1179, 1246, 1289, 1308], "compil": [59, 336, 337, 501, 502, 939, 940, 1109, 1110], "flag": [59, 147, 306, 624, 639, 647, 648, 650, 664, 665, 800, 830, 852, 853, 913, 1203, 1219, 1227, 1228, 1230, 1244, 1245, 1308], "pyo3": 59, "built": 59, "lazy_fram": [60, 61], "iter": [60, 61, 62, 72, 108, 122, 151, 153, 162, 170, 180, 190, 191, 192, 193, 194, 195, 207, 208, 209, 238, 239, 240, 241, 244, 245, 246, 252, 269, 270, 279, 280, 283, 284, 306, 365, 388, 396, 460, 588, 635, 705, 715, 717, 723, 725, 726, 727, 728, 736, 740, 766, 768, 771, 779, 782, 784, 790, 796, 800, 816, 827, 835, 838, 839, 840, 841, 842, 843, 866, 868, 869, 871, 876, 882, 888, 889, 893, 913, 917, 992, 999, 1198, 1308, 1317], "comm_subplan_elim": [60, 61, 821, 822, 830, 832, 862, 874, 913], "comm_subexpr_elim": [60, 61, 821, 822, 830, 832, 862, 874, 913], "comput": [60, 62, 95, 175, 190, 211, 265, 271, 284, 298, 306, 313, 323, 324, 325, 326, 327, 328, 345, 346, 347, 352, 353, 357, 369, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 447, 455, 494, 520, 521, 522, 523, 527, 528, 529, 530, 534, 541, 542, 543, 544, 568, 588, 589, 595, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 629, 630, 631, 632, 636, 701, 702, 710, 715, 717, 721, 722, 723, 729, 731, 748, 768, 777, 778, 790, 800, 821, 838, 845, 847, 848, 883, 890, 893, 907, 913, 920, 926, 927, 928, 929, 930, 931, 948, 949, 950, 955, 956, 960, 973, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 996, 1055, 1057, 1062, 1104, 1128, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1142, 1149, 1150, 1151, 1152, 1160, 1169, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1210, 1211, 1212, 1213, 1216, 1282, 1283, 1290, 1296, 1308], "graph": [60, 122, 212, 306, 821, 845, 890, 913], "parallel": [60, 62, 117, 123, 132, 139, 191, 194, 211, 212, 228, 245, 280, 306, 388, 509, 710, 790, 800, 812, 839, 842, 847, 848, 869, 889, 901, 913, 992, 1117, 1296, 1308], "threadpool": 60, "Will": [60, 61, 821, 822, 830, 832, 862, 874, 913, 1308], "try": [60, 61, 105, 120, 121, 126, 132, 134, 137, 139, 821, 822, 830, 832, 862, 874, 913], "branch": [60, 61, 821, 822, 830, 832, 862, 874, 913], "subplan": [60, 61, 821, 822, 830, 832, 862, 874, 913], "union": [60, 61, 62, 530, 821, 822, 830, 832, 862, 874, 913, 918, 1138], "subexpress": [60, 61, 821, 822, 830, 832, 862, 874, 913], "reus": [60, 61, 821, 822, 830, 832, 862, 874, 913], "explain": [60, 61, 821, 822, 913], "gevent": [61, 142, 822, 913], "await": [61, 122, 822, 913], "_geventdataframeresult": [61, 822, 913], "asynchron": [61, 122, 822, 913], "them": [61, 108, 110, 111, 112, 114, 122, 123, 129, 130, 131, 132, 134, 138, 139, 176, 177, 191, 211, 221, 238, 268, 275, 306, 343, 451, 478, 516, 580, 581, 588, 608, 727, 742, 743, 745, 746, 787, 788, 800, 822, 831, 839, 848, 858, 866, 913, 918, 946, 1059, 1064, 1124, 1164, 1165, 1308], "schedul": [61, 822, 913], "insid": [61, 822, 913], "almost": [61, 214, 292, 306, 681, 683, 684, 822, 913, 1155, 1261, 1263, 1264, 1308], "instantli": [61, 822, 913], "asyncio": [61, 122, 822, 913], "releas": [61, 125, 275, 306, 321, 428, 442, 551, 800, 822, 913, 1035, 1049, 1308, 1317], "greenlet": [61, 822, 913], "task": [61, 822, 913], "wrapper": [61, 822, 913], "event": [61, 822, 913], "asyncresult": [61, 822, 913], "timeout": [61, 822, 913], "collect_async": [61, 913], "set_except": [61, 822, 913], "rerais": [61, 822, 913], "polarstyp": 62, "concatmethod": 62, "vertic": [62, 177, 215, 217, 222, 255, 273, 277, 306, 638, 1218], "rechunk": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 177, 306, 800, 975, 1064, 1161, 1308], "combin": [62, 180, 191, 196, 211, 238, 275, 306, 318, 332, 442, 451, 587, 603, 608, 659, 669, 675, 676, 677, 678, 742, 743, 745, 746, 787, 788, 790, 800, 839, 848, 866, 874, 913, 1035, 1049, 1059, 1179, 1239, 1249, 1255, 1256, 1257, 1258, 1308], "vertical_relax": 62, "diagon": [62, 270, 306], "diagonal_relax": 62, "vstack": [62, 177, 306], "addition": [62, 239, 306], "coerc": [62, 602, 800], "supertyp": [62, 179, 268, 306, 320, 800, 834, 913, 917, 1308], "mismatch": [62, 103, 130, 138, 143, 145], "find": [62, 181, 187, 306, 623, 639, 640, 800, 1199, 1220, 1308], "miss": [62, 120, 121, 134, 178, 306, 358, 450, 452, 453, 465, 487, 489, 539, 800, 833, 913, 1058, 1060, 1061, 1298, 1308], "stack": [62, 199, 277, 306], "length": [62, 63, 79, 131, 134, 148, 189, 191, 192, 194, 195, 238, 251, 306, 309, 388, 428, 442, 532, 539, 560, 603, 606, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 633, 651, 655, 656, 658, 660, 661, 662, 668, 670, 682, 691, 773, 776, 777, 778, 791, 800, 839, 840, 842, 843, 862, 866, 875, 913, 917, 975, 992, 1003, 1035, 1049, 1140, 1147, 1166, 1179, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1214, 1231, 1235, 1236, 1238, 1240, 1241, 1242, 1248, 1250, 1262, 1271, 1308], "don": [62, 191, 211, 214, 271, 273, 306, 321, 388, 509, 551, 800, 839, 883, 913, 918, 992, 1056, 1117, 1155, 1200, 1298, 1308], "auto": [62, 108, 110, 111, 112, 114, 129, 130, 132, 138, 139, 270, 306, 913, 1317], "logic": [62, 214, 292, 306, 309, 317, 319, 391, 551, 703, 714, 715, 716, 717, 764, 800, 826, 847, 870, 901, 913, 922, 923, 1155, 1291, 1308, 1312], "align_fram": 62, "pattern": [62, 120, 121, 134, 137, 138, 139, 208, 306, 557, 639, 640, 641, 642, 647, 648, 649, 650, 664, 665, 666, 901, 918, 1198, 1201, 1219, 1220, 1221, 1222, 1227, 1228, 1229, 1230, 1244, 1245, 1246, 1308], "collis": 62, "need": [62, 115, 120, 121, 123, 191, 192, 194, 195, 238, 241, 250, 306, 539, 608, 627, 685, 747, 773, 776, 791, 800, 839, 840, 842, 843, 866, 913, 1207, 1265, 1308, 1317], "sure": [62, 108, 113, 120, 121, 126, 128, 132, 191, 192, 194, 195, 232, 238, 306, 608, 800, 839, 840, 842, 843, 866, 913, 917], "contigu": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 232, 306], "relev": 62, "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "df_a1": 62, "df_a2": 62, "df_a3": 62, "inner": [63, 79, 149, 210, 253, 274, 306, 343, 354, 393, 516, 538, 602, 703, 800, 847, 870, 877, 885, 913, 946, 957, 996, 1124, 1146, 1291, 1308], "polarsdatatyp": [63, 79, 120, 121, 134, 147, 148, 149, 150, 152, 160, 163, 214, 268, 306, 321, 366, 454, 547, 549, 550, 551, 603, 652, 653, 718, 749, 761, 762, 763, 764, 773, 776, 791, 796, 800, 818, 913, 918, 925, 967, 1154, 1155, 1179, 1232, 1233, 1308], "pythondatatyp": [63, 79], "within": [63, 79, 143, 144, 145, 146, 190, 191, 192, 193, 194, 195, 196, 211, 238, 275, 306, 472, 599, 635, 800, 839, 840, 842, 843, 848, 866, 913, 1075, 1308, 1316], "attribut": [63, 66, 69, 70, 71, 72, 79, 83, 147, 306, 792, 793, 795, 796, 801, 802, 805, 807, 808, 809, 913, 1300, 1302, 1304, 1308, 1309, 1313, 1314, 1315], "categoricalord": [66, 368, 970], "encod": [66, 72, 82, 120, 121, 134, 262, 306, 360, 466, 606, 643, 693, 800, 962, 1182, 1223, 1285, 1308], "lexic": [66, 368, 918, 970, 972], "calendar": [68, 69, 191, 211, 238, 275, 306, 399, 411, 414, 424, 428, 442, 446, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 787, 788, 800, 839, 848, 866, 913, 1002, 1014, 1020, 1031, 1035, 1049, 1053, 1059, 1308], "bit": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 601, 639, 800, 1177, 1219, 1308], "sign": [68, 69, 71, 75, 76, 77, 78, 84, 424, 601, 664, 665, 691, 800, 918, 1031, 1091, 1177, 1244, 1245, 1271, 1308], "dai": [68, 69, 84, 191, 194, 209, 211, 238, 275, 306, 396, 420, 421, 424, 425, 428, 431, 434, 435, 442, 444, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 725, 741, 742, 743, 744, 745, 746, 747, 787, 788, 800, 839, 842, 848, 866, 913, 918, 999, 1027, 1028, 1031, 1032, 1035, 1038, 1041, 1042, 1049, 1051, 1059, 1308], "unix": [68, 69, 407, 753, 1010], "epoch": [68, 69, 753], "time_unit": [69, 71, 398, 400, 407, 433, 445, 684, 742, 743, 744, 745, 746, 747, 753, 918, 1001, 1003, 1010, 1040, 1052, 1264], "time_zon": [69, 401, 403, 427, 684, 742, 743, 744, 745, 746, 918, 1000, 1004, 1009, 1034, 1264], "timezon": [69, 124, 135, 403, 918], "microsecond": [69, 71, 191, 208, 211, 238, 240, 241, 261, 275, 306, 424, 428, 437, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 744, 745, 746, 747, 786, 787, 788, 800, 839, 848, 862, 866, 913, 918, 1031, 1035, 1044, 1049, 1059, 1308], "zone": [69, 397, 401, 427, 451, 684, 742, 743, 744, 745, 746, 800, 918, 1000, 1004, 1034, 1059, 1264, 1308], "zoneinfo": [69, 918], "available_timezon": [69, 918], "progress": [70, 72], "expect": [70, 72, 99, 102, 107, 120, 122, 134, 539, 551, 761, 800, 850, 852, 853, 913], "digit": [70, 592, 620, 621, 648, 800, 1195, 1196, 1222, 1228, 1308, 1317], "offset": [71, 120, 121, 125, 126, 128, 132, 134, 137, 138, 139, 185, 191, 192, 194, 195, 238, 251, 258, 275, 281, 282, 306, 396, 397, 406, 420, 421, 424, 428, 442, 468, 513, 532, 608, 633, 670, 700, 800, 837, 839, 840, 842, 843, 866, 875, 881, 891, 892, 913, 999, 1000, 1009, 1027, 1028, 1031, 1035, 1049, 1072, 1121, 1140, 1214, 1250, 1264, 1281, 1308], "integer_list": 79, "float_list": 79, "wrap": [81, 115, 478, 800], "arbitrari": [81, 150, 391, 800, 826, 913, 918], "schemadict": [83, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 131, 132, 134, 139, 306, 782, 852, 853, 895, 901, 913], "composit": [83, 149, 1317], "nanosecond": [84, 191, 211, 238, 275, 306, 424, 428, 429, 440, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1036, 1047, 1049, 1059, 1308], "midnight": 84, "unsign": [85, 86, 87, 88, 601, 800, 918, 1091, 1177, 1308], "static": [89, 895, 901], "enable_string_cach": 91, "stringcach": [91, 92, 210, 306, 812, 969, 971], "reliabl": [91, 92], "wai": [91, 92, 108, 110, 111, 112, 114, 129, 130, 138, 190, 209, 228, 252, 284, 306, 588, 592, 635, 647, 730, 796, 800, 838, 861, 876, 893, 901, 913, 1227], "until": [91, 191, 194, 212, 306, 661, 662, 691, 839, 842, 913, 1241, 1242, 1271], "19": [92, 125, 160, 181, 184, 191, 192, 193, 194, 195, 200, 211, 215, 217, 222, 234, 235, 238, 249, 255, 258, 275, 286, 306, 321, 372, 373, 383, 384, 385, 386, 387, 399, 405, 409, 413, 416, 418, 423, 427, 428, 430, 442, 481, 485, 488, 493, 505, 519, 537, 547, 548, 550, 594, 608, 609, 612, 614, 626, 641, 653, 657, 658, 659, 660, 663, 668, 669, 675, 681, 684, 685, 696, 699, 700, 718, 739, 740, 742, 744, 762, 800, 839, 840, 841, 842, 843, 848, 852, 866, 873, 881, 895, 913, 925, 970, 978, 979, 988, 989, 990, 991, 993, 1002, 1008, 1012, 1019, 1022, 1025, 1030, 1034, 1035, 1037, 1049, 1082, 1086, 1088, 1091, 1092, 1098, 1100, 1102, 1113, 1127, 1145, 1154, 1173, 1184, 1200, 1202, 1206, 1221, 1233, 1237, 1238, 1239, 1240, 1243, 1248, 1249, 1255, 1261, 1264, 1265, 1280, 1281, 1288, 1298, 1308], "longer": [92, 120, 121, 134], "accept": [92, 118, 120, 121, 124, 126, 128, 132, 162, 170, 190, 193, 244, 245, 248, 252, 269, 279, 280, 284, 306, 314, 365, 371, 454, 478, 550, 588, 603, 635, 705, 713, 715, 717, 723, 726, 727, 728, 736, 740, 749, 766, 768, 771, 779, 782, 784, 790, 800, 816, 827, 838, 841, 868, 869, 872, 876, 882, 888, 889, 893, 913, 917, 977, 1081, 1179, 1205, 1308], "disable_string_cach": 92, "least": [99, 150, 589, 647, 649, 800, 1169, 1227, 1229, 1308], "unexpect": [101, 103, 122, 549, 551, 800, 1155, 1308], "caus": [101, 103, 109, 120, 121, 134, 143, 159, 177, 264, 306, 549, 800, 1064, 1289, 1308], "panic": 101, "incompat": 105, "arrai": [108, 112, 120, 121, 132, 175, 176, 259, 264, 265, 306, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 503, 520, 521, 522, 523, 525, 534, 535, 538, 541, 543, 549, 611, 612, 614, 618, 624, 748, 800, 831, 913, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 978, 979, 984, 985, 986, 987, 988, 989, 990, 991, 996, 1057, 1111, 1128, 1129, 1130, 1131, 1133, 1141, 1142, 1143, 1146, 1149, 1151, 1152, 1186, 1187, 1189, 1192, 1193, 1194, 1203, 1208, 1284, 1289, 1290, 1298, 1308], "chunkedarrai": [108, 224, 306], "recordbatch": [108, 209, 306], "schemadefinit": [108, 110, 111, 112, 114, 129, 130, 138, 306, 913], "schema_overrid": [108, 110, 111, 112, 113, 114, 122, 123, 125, 129, 130, 131, 209, 264, 306, 913, 918], "part": [108, 125, 150, 268, 306, 588, 648, 672, 673, 800, 830, 832, 862, 874, 890, 913, 1228, 1252, 1253], "closest": [108, 211, 306], "pair": [108, 110, 111, 112, 114, 129, 130, 138, 149, 233, 306, 864, 913, 1317], "sever": [108, 110, 111, 112, 114, 129, 130, 138, 306, 913, 1317], "form": [108, 110, 111, 112, 114, 129, 130, 138, 208, 240, 273, 306, 589, 800, 913, 1169, 1308], "dimens": [108, 110, 112, 114, 129, 130, 138, 306, 604, 800, 913, 1180, 1308], "supportsinterchang": 109, "allow_copi": [109, 159, 264, 306, 1289, 1308], "interchang": [109, 159], "__dataframe__": 109, "convers": [109, 125, 159, 208, 209, 240, 241, 261, 264, 265, 306, 401, 681, 683, 684, 688, 812, 1004, 1074, 1261, 1263, 1264, 1268, 1288, 1289, 1290, 1308], "latest": [109, 124, 135, 159, 427, 428, 442, 465, 560, 681, 684, 744, 800, 1034, 1035, 1049, 1261, 1264], "from_panda": 109, "from_arrow": 109, "effici": [109, 122, 125, 207, 209, 306, 549, 800], "convert": [109, 113, 124, 125, 131, 135, 159, 260, 261, 262, 263, 264, 265, 267, 268, 306, 354, 355, 390, 401, 431, 434, 538, 539, 548, 549, 572, 598, 649, 663, 681, 683, 684, 685, 686, 688, 693, 800, 913, 917, 957, 958, 971, 1004, 1038, 1041, 1146, 1147, 1229, 1243, 1261, 1263, 1264, 1265, 1266, 1268, 1274, 1277, 1287, 1288, 1289, 1290, 1298, 1308], "panda": [109, 113, 142, 191, 265, 306, 420, 421, 703, 800, 839, 913, 1027, 1028, 1290, 1291, 1308], "pd": [109, 113, 703, 800, 1290, 1291, 1308], "df_pd": 109, "dfi": [109, 159], "strict": [110, 111, 114, 163, 306, 360, 366, 639, 643, 650, 663, 681, 683, 684, 686, 688, 800, 818, 913, 962, 967, 1056, 1200, 1219, 1223, 1230, 1243, 1261, 1263, 1264, 1266, 1268, 1308], "clone": [110, 111, 112, 113, 114, 164, 264, 306, 819, 913, 976, 1289, 1298, 1308], "dimension": [110, 112, 114, 264, 306, 913, 1308], "exactli": [110, 111, 114, 143, 144, 145, 146, 149, 150, 152, 306, 672, 673, 679, 680, 747, 913, 1208, 1252, 1253, 1259, 1260, 1308], "infer_schema_length": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 306, 652, 653, 913, 1232, 1233], "NOT": [111, 207, 306, 539, 558, 1316], "typic": [111, 122, 125, 139, 214, 306, 406, 918, 1009, 1155, 1308], "clearer": 111, "partial": [111, 120, 134, 306, 913], "scan": [111, 114, 120, 121, 122, 125, 129, 131, 134, 135, 136, 137, 138, 139, 140, 191, 192, 194, 195, 238, 306, 652, 653, 832, 839, 840, 842, 843, 844, 851, 866, 913, 1232, 1233], "slow": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 306, 321, 388, 551, 610, 652, 653, 800, 901, 913, 992, 1185, 1232, 1233, 1308], "present": [111, 150, 483, 550, 677, 678, 800, 832, 874, 913, 1154, 1298, 1308], "np": [112, 180, 264, 306, 467, 623, 699, 800, 835, 913, 1071, 1085, 1090, 1094, 1095, 1198, 1199, 1280, 1308], "ndarrai": [112, 180, 264, 306, 467, 623, 699, 800, 835, 913, 1071, 1198, 1199, 1202, 1280, 1289, 1308], "numpi": [112, 142, 167, 208, 240, 241, 261, 264, 265, 306, 549, 580, 581, 610, 800, 913, 1085, 1090, 1094, 1095, 1164, 1165, 1185, 1289, 1290, 1298, 1308], "columnar": [112, 114, 208, 240, 306], "interpret": [112, 114, 120, 121, 134, 306, 913], "yield": [112, 114, 120, 121, 122, 134, 175, 177, 207, 270, 306, 549, 588, 800, 913, 1057, 1064, 1308], "conclus": [112, 114, 306, 913], "datetimeindex": 113, "nan_to_nul": [113, 306, 913, 1308], "include_index": 113, "instal": [113, 120, 121, 123, 126, 128, 167, 265, 306, 396, 725, 874, 913, 999, 1290, 1308], "nan": [113, 150, 159, 178, 265, 306, 394, 395, 448, 449, 458, 469, 471, 477, 487, 489, 490, 491, 496, 546, 552, 566, 580, 581, 582, 583, 610, 706, 729, 800, 833, 913, 927, 931, 997, 998, 1066, 1094, 1095, 1164, 1165, 1185, 1289, 1290, 1308, 1317], "nameless": 113, "enumer": [113, 120, 121, 134, 209, 306], "regardless": [113, 190, 193, 211, 306, 401, 654, 790, 1004, 1234], "pleas": [113, 122, 123, 191, 306, 309, 451, 730, 742, 747, 800, 839, 913, 1059, 1308, 1312], "reset_index": [113, 191, 306, 839, 913], "prior": 113, "pd_df": 113, "pd_seri": 113, "its": [115, 142, 175, 306, 400, 428, 442, 451, 606, 635, 790, 800, 971, 1003, 1035, 1049, 1057, 1059, 1182, 1308], "repr": [115, 150, 152], "trim": 115, "whitespac": [115, 659, 669, 675, 676, 677, 678, 1239, 1249, 1255, 1256, 1257, 1258], "prompt": 115, "extract": [115, 253, 306, 399, 402, 404, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 592, 648, 649, 652, 653, 654, 670, 672, 800, 1002, 1005, 1006, 1007, 1008, 1011, 1012, 1014, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1030, 1032, 1033, 1036, 1037, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1228, 1229, 1232, 1233, 1234, 1250], "to_init_repr": [115, 306, 1308], "truncat": [115, 120, 121, 134, 189, 191, 194, 208, 240, 241, 261, 306, 839, 842, 862, 913], "identifi": [115, 122, 220, 227, 271, 283, 306, 857, 883, 913], "compound": [115, 241, 306, 918], "neither": [115, 125, 131, 242, 306, 355, 539, 958, 1147], "source_ac": 115, "source_cha": 115, "ident": [115, 164, 165, 306, 431, 606, 607, 800, 819, 820, 913, 976, 980, 1038, 1182, 1183, 1308], "timestamp": [115, 124, 135, 191, 194, 306, 427, 428, 442, 753, 839, 842, 913, 1034, 1035, 1049], "tor_id": 115, "nnel_id": 115, "\u03bc": [115, 150, 163, 191, 208, 238, 240, 241, 261, 275, 306, 397, 398, 400, 401, 402, 403, 406, 408, 412, 415, 417, 420, 421, 422, 424, 427, 428, 429, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 608, 611, 612, 614, 617, 618, 619, 681, 684, 744, 745, 746, 747, 753, 800, 818, 839, 848, 866, 913, 918, 1000, 1001, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1017, 1018, 1024, 1027, 1028, 1029, 1031, 1034, 1035, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1261, 1264], "asia": [115, 918, 1005, 1006, 1039], "tokyo": [115, 918], "123456780": 115, "9876543210": 115, "56": [115, 701, 800], "59": [115, 149, 169, 306, 400, 417, 429, 744, 786, 787, 788, 825, 913, 918, 1003, 1024, 1036], "663053": 115, "jst": [115, 918], "803065983": 115, "2055938745": 115, "38": [115, 150], "18": [115, 169, 221, 238, 306, 382, 428, 442, 445, 477, 493, 571, 608, 800, 825, 858, 862, 866, 913, 918, 1052, 1264], "050545": 115, "source_actor_id": 115, "source_channel_id": 115, "to_list": [115, 238, 306, 1219, 1230, 1308], "uint32": [116, 142, 163, 175, 238, 282, 306, 331, 336, 337, 377, 451, 467, 470, 497, 501, 502, 518, 602, 607, 608, 641, 642, 655, 656, 699, 703, 730, 757, 760, 800, 818, 866, 892, 913, 918, 935, 939, 940, 967, 1056, 1057, 1059, 1091, 1109, 1110, 1126, 1183, 1200, 1221, 1222, 1235, 1236, 1291, 1308], "regular": [116, 208, 239, 240, 275, 282, 306, 454, 639, 641, 642, 647, 648, 649, 650, 664, 665, 725, 749, 800, 892, 913, 918, 1219, 1221, 1222, 1227, 1228, 1229, 1230, 1244, 1245], "uint64": [116, 196, 238, 282, 306, 336, 337, 451, 472, 501, 502, 601, 608, 800, 866, 892, 913, 939, 940, 1059, 1075, 1109, 1110, 1177, 1308], "bigidx": 116, "over": [117, 120, 121, 122, 124, 125, 134, 150, 160, 177, 207, 208, 209, 214, 239, 240, 241, 253, 270, 283, 286, 292, 306, 321, 388, 391, 451, 459, 548, 549, 551, 559, 561, 562, 563, 564, 572, 573, 599, 611, 612, 613, 614, 615, 617, 618, 619, 718, 733, 734, 737, 738, 751, 762, 763, 764, 775, 800, 877, 895, 901, 913, 918, 925, 992, 1059, 1064, 1155, 1186, 1187, 1189, 1193, 1308], "fetch": [117, 134, 212, 306, 821, 844, 851, 913], "ideal": 117, "read_csv_batch": 117, "tpch": [117, 121], "tables_scale_100": [117, 121], "lineitem": [117, 121, 123], "tbl": [117, 121], "try_parse_d": [117, 120, 121, 134], "n_row": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 209, 306, 832, 913], "handler": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 391, 800, 826, 913], "builtin": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 391, 800, 826, 913], "instanc": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 150, 152, 157, 163, 177, 183, 306, 366, 560, 611, 612, 613, 614, 615, 617, 618, 619, 733, 737, 751, 796, 800, 818, 853, 891, 892, 913, 967, 1064, 1308], "stop": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 611, 612, 614, 617, 618, 619, 800, 1001, 1004, 1010, 1011, 1018, 1021, 1024, 1029, 1035, 1040], "read_csv": [119, 125, 134], "write_clipboard": [119, 306], "has_head": [120, 121, 125, 134], "new_column": [120, 121, 125, 134, 234, 235, 306], "comment_prefix": [120, 121, 134], "skip_row": [120, 121, 134], "missing_utf8_is_empty_str": [120, 121, 134], "ignore_error": [120, 121, 130, 134, 138], "n_thread": [120, 121], "8192": 120, "csvencod": [120, 121, 134], "low_memori": [120, 121, 132, 134, 138, 139], "skip_rows_after_head": [120, 121, 134], "row_index_nam": [120, 121, 126, 128, 132, 134, 137, 138, 139], "row_index_offset": [120, 121, 126, 128, 132, 134, 137, 138, 139], "sample_s": [120, 121], "eol_char": [120, 121, 134], "raise_if_empti": [120, 121, 125, 131, 134], "truncate_ragged_lin": [120, 121, 134], "decimal_comma": [120, 121, 134], "glob": [120, 121, 132, 134, 137, 138, 139], "fsspec": [120, 121, 126, 128, 132, 135, 136, 137, 142], "remot": [120, 121, 126, 128], "autogener": [120, 121, 134], "column_x": [120, 121, 134], "shorter": [120, 121, 134, 539, 757, 758], "comment": [120, 121, 134], "skip": [120, 121, 125, 132, 134, 139, 211, 273, 306, 925, 1155, 1308], "escap": [120, 121, 123, 134], "complet": [120, 122, 134, 1289, 1308], "wherea": [120, 134, 238, 306, 428, 442, 580, 581, 608, 800, 844, 851, 866, 913, 1035, 1049, 1164, 1165, 1308], "would": [120, 121, 134, 268, 306, 331, 342, 396, 514, 549, 551, 559, 588, 599, 723, 725, 800, 934, 945, 999, 1122, 1175, 1289, 1308], "prefer": [120, 121, 124, 125, 134, 153, 177, 208, 214, 239, 240, 292, 306, 454, 551, 800, 913, 1064, 1155, 1308, 1317], "treat": [120, 121, 134, 451, 639, 642, 650, 664, 665, 790, 800, 1059, 1219, 1222, 1230, 1244, 1245, 1308], "10000": [120, 209, 306], "issu": [120, 121, 122, 125, 134, 306, 381, 382, 697, 800, 986, 987, 1278, 1308], "iso8601": [120, 121, 134], "succe": [120, 121, 134], "cpu": [120, 121], "buffer": [120, 121, 122, 175, 208, 306, 1057, 1308], "modifi": [120, 121, 134, 154, 157, 177, 199, 207, 208, 277, 306, 332, 427, 445, 639, 647, 648, 650, 664, 665, 800, 924, 1034, 1052, 1064, 1219, 1227, 1228, 1230, 1244, 1245, 1267, 1269, 1270, 1308], "upper": [120, 121, 122, 175, 191, 194, 306, 371, 372, 474, 478, 539, 573, 709, 720, 742, 743, 745, 746, 787, 788, 800, 839, 842, 913, 977, 978, 1057, 1077, 1081, 1153, 1295, 1308], "bound": [120, 121, 175, 191, 194, 306, 342, 371, 372, 373, 478, 512, 514, 537, 539, 545, 709, 720, 742, 743, 745, 746, 787, 788, 800, 839, 842, 913, 945, 977, 978, 979, 1057, 1081, 1120, 1122, 1145, 1153, 1295, 1308], "lossi": [120, 121, 134], "decod": [120, 121, 652], "expens": [120, 121, 132, 134, 138, 139, 151, 153, 191, 192, 194, 195, 208, 214, 238, 239, 240, 241, 270, 271, 306, 321, 551, 800, 825, 839, 840, 842, 843, 866, 883, 913, 1064, 1155, 1308, 1317], "aggreg": [120, 121, 132, 183, 190, 191, 193, 194, 215, 217, 219, 222, 225, 229, 230, 231, 238, 254, 255, 273, 276, 284, 285, 288, 290, 306, 315, 460, 475, 547, 549, 551, 588, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 714, 715, 716, 717, 733, 734, 735, 736, 737, 738, 739, 740, 751, 756, 765, 766, 768, 770, 771, 775, 783, 784, 800, 839, 840, 842, 843, 853, 854, 855, 856, 859, 860, 863, 866, 878, 879, 886, 893, 894, 897, 899, 913, 917, 1078, 1184, 1185, 1186, 1187, 1189, 1192, 1193, 1194, 1308], "parser": 120, "regard": [120, 729], "sens": [120, 126, 128, 137, 221, 275, 306, 588, 800, 858, 913], "particular": [120, 126, 128, 137, 175, 306, 1057, 1308], "usernam": [120, 123, 126, 128, 137], "password": [120, 123, 126, 128, 137], "sampl": [120, 121, 292, 306, 632, 800, 901, 1213, 1308], "estim": [120, 121, 161, 175, 306, 322, 452, 453, 494, 719, 800, 815, 913, 1057, 1060, 1061, 1104, 1308], "alloc": [120, 121, 175, 232, 306, 800, 917, 1057, 1308], "encount": [120, 121, 134, 191, 194, 306, 580, 581, 652, 654, 729, 733, 751, 800, 839, 842, 913, 1164, 1165, 1232, 1234, 1308], "window": [120, 121, 134, 191, 192, 194, 195, 238, 306, 388, 428, 442, 450, 452, 453, 549, 551, 562, 588, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 727, 777, 778, 800, 839, 840, 842, 843, 866, 913, 992, 1035, 1049, 1058, 1060, 1061, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308], "rn": [120, 121, 134], "nodataerror": [120, 121, 125, 131, 134], "period": [120, 121, 134, 191, 192, 194, 195, 238, 306, 428, 442, 450, 452, 453, 589, 608, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 866, 913, 1035, 1049, 1058, 1060, 1061, 1169, 1308], "expand": [120, 132, 134, 139, 456, 556, 557, 602, 800, 917, 918, 1063, 1308], "rule": [120, 132, 134, 139, 183, 306, 640, 666, 1220, 1246], "lazili": [120, 121, 134, 135, 136, 137, 138, 139, 822, 913], "incorrectli": [120, 191, 192, 194, 195, 238, 306, 451, 539, 608, 800, 839, 840, 842, 843, 866, 913, 1059, 1308], "continu": [120, 132, 389, 596, 632, 800, 993, 1173, 1213, 1308], "benchmark": [120, 132], "demonstr": 120, "birthdai": 120, "alic": 120, "1995": 120, "bob": [120, 221, 306, 858, 913], "charli": 120, "2002": [120, 410, 424, 1013, 1031, 1053], "08": [120, 143, 144, 145, 146, 150, 169, 211, 238, 253, 306, 396, 400, 420, 421, 428, 608, 681, 745, 747, 800, 825, 866, 913, 918, 999, 1035, 1049, 1261], "50000": 121, "batchedcsvread": 121, "upon": 121, "creation": 121, "gather": [121, 185, 258, 306, 331, 468, 513, 537, 699, 700, 723, 800, 837, 881, 913, 934, 1072, 1121, 1145, 1280, 1281, 1308], "done": [121, 140, 157, 161, 163, 211, 306, 320, 322, 366, 588, 800, 815, 818, 848, 913, 967, 1308], "next_batch": 121, "big": 121, "interest": [121, 431, 434, 1038, 1041], "seen_group": 121, "big_fil": 121, "df_current_batch": 121, "partition_df": 121, "partition_bi": [121, 209, 306, 562], "as_dict": [121, 227, 306], "fh": 121, "els": [121, 790], "connectionorcursor": 122, "iter_batch": 122, "execute_opt": [122, 123], "cursor": 122, "client": 122, "odbc": 122, "packag": [122, 396, 725, 917, 999], "establish": 122, "async": [122, 822, 913], "though": [122, 191, 306, 796, 839, 913], "aris": 122, "happen": [122, 401, 596, 800, 1004, 1173, 1308], "report": 122, "resultset": 122, "manner": 122, "veri": [122, 208, 270, 306, 551, 800, 901], "poor": 122, "mani": [122, 123, 177, 306, 666, 1064, 1246, 1308], "trip": 122, "still": [122, 123], "exact": [122, 148, 150, 152, 211, 250, 306, 322, 679, 680, 681, 683, 684, 706, 800, 1261, 1263, 1264, 1288, 1308], "incom": 122, "read_arrow_batches_from_odbc": 122, "read_database_uri": 122, "wide": [122, 189, 220, 273, 306, 857, 913], "snowflak": [122, 123], "variou": [122, 306, 800, 913, 918, 1308], "facil": 122, "initialis": [122, 157, 913], "flight": 122, "flightsql": 122, "flight_sql": 122, "about": [122, 632, 639, 647, 648, 650, 664, 665, 800, 917, 1213, 1219, 1227, 1228, 1230, 1244, 1245, 1308, 1317], "notabl": 122, "dremio": 122, "influxdb": 122, "notic": [122, 306, 913, 1308], "dbapi2": 122, "connectorx": [122, 123, 142], "optimis": [122, 214, 241, 292, 306, 913, 1155, 1201, 1308, 1317], "translat": 122, "conn": 122, "url": [122, 123, 132, 139, 647, 649, 1227, 1229], "render_as_str": 122, "hide_password": 122, "abl": 122, "relat": [122, 157, 664, 665, 918, 1244, 1245], "k\u00f9zudb": 122, "cypher": 122, "test_data": 122, "user_conn": 122, "normalised_scor": 122, "uint8": [122, 147, 149, 163, 263, 264, 273, 306, 381, 382, 603, 697, 713, 800, 818, 913, 918, 986, 987, 1179, 1278, 1308, 1317], "parameteris": 122, "metric": 122, "alchemy_conn": 122, "qmark": 122, "variad": 122, "1000": [122, 175, 263, 282, 306, 322, 800, 892, 913, 1044, 1151, 1287, 1308, 1317], "localhost": 122, "5432": 122, "uid": 122, "usr": 122, "pwd": 122, "max_text_s": 122, "max_binary_s": 122, "do_someth": 122, "kuzu_db_conn": 122, "session": 122, "ext": 122, "create_async_engin": 122, "async_engin": 122, "aiosqlit": 122, "surrealdb": 122, "surreal": 122, "surrealhttp": 122, "surreal_query_to_fram": 122, "8000": 122, "rpc": 122, "partition_on": 123, "partition_rang": 123, "partition_num": 123, "dbreadengin": 123, "raw": 123, "warehous": 123, "role": 123, "caller": [123, 221, 306, 539, 853, 858, 895, 901, 913], "respons": [123, 221, 306, 858, 913], "come": [123, 191, 306, 396, 420, 421, 494, 539, 725, 800, 839, 912, 913, 999, 1027, 1028, 1104, 1308], "transfer": 123, "document": [123, 125, 306, 309, 431, 434, 654, 681, 683, 684, 688, 796, 971, 1038, 1041, 1234, 1261, 1263, 1264, 1268, 1308, 1312], "redshift": 123, "mysql": 123, "mariadb": 123, "clickhous": 123, "oracl": 123, "bigqueri": 123, "github": [123, 306], "sfu": 123, "connector": 123, "destin": 123, "develop": [123, 150, 152], "read_databas": 123, "usual": [123, 268, 306, 397, 1000], "urllib": 123, "quote_plu": 123, "word": [123, 664, 665, 677, 678], "3f": [123, 681, 684, 1261, 1264], "20word": 123, "explicitli": [123, 125, 148, 150, 157, 306, 782, 811], "test_tabl": 123, "compani": 123, "testdb": 123, "public": [123, 306, 800, 812, 913, 1308], "myrol": 123, "delta_table_opt": [124, 135], "root": [124, 135, 369, 493, 548, 561, 571, 572, 574, 576, 578, 579, 594, 636, 696, 799, 800, 973, 1216, 1308], "absolut": [124, 135, 136, 143, 144, 145, 146, 313, 450, 452, 453, 800, 920, 1058, 1060, 1061, 1308], "avoid": [124, 240, 306, 316, 800], "year": [124, 135, 191, 211, 238, 253, 275, 306, 396, 410, 411, 424, 425, 428, 442, 443, 608, 611, 612, 613, 614, 615, 617, 618, 619, 725, 741, 742, 743, 744, 745, 746, 787, 788, 800, 839, 848, 866, 913, 999, 1013, 1014, 1031, 1032, 1035, 1049, 1050], "2021": [124, 135, 163, 169, 189, 191, 275, 306, 681, 761, 818, 825, 839, 913, 918, 1005, 1006, 1014, 1039, 1100, 1261, 1308], "travel": [124, 135], "2020": [124, 135, 163, 169, 189, 211, 238, 306, 309, 396, 401, 406, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 451, 608, 681, 683, 684, 725, 800, 818, 825, 866, 913, 918, 999, 1004, 1009, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1059, 1261, 1263, 1264, 1308], "tzinfo": [124, 135], "utc": [124, 135, 397, 401, 403, 406, 427, 681, 684, 918, 1000, 1004, 1009, 1034, 1261, 1264], "aw": [124, 132, 135, 139], "googl": [124, 135, 136], "service_account": [124, 135], "service_account_json_absolute_path": [124, 135], "az": [124, 135, 136], "adl": [124, 135, 136], "abf": [124, 135, 136], "azure_storage_account_nam": [124, 135, 136], "azure_storage_account_kei": [124, 135, 136], "without_fil": [124, 135, 136], "track": [124, 135, 136, 214, 306, 539, 1316], "sheet_id": [125, 131], "sheet_nam": [125, 131], "excelspreadsheetengin": 125, "engine_opt": 125, "read_opt": 125, "calamin": 125, "fastexcel": [125, 142], "xlsb": 125, "xl": 125, "pyxlsb": [125, 142], "openpyxl": [125, 142], "sheetnam": [125, 131], "nor": [125, 131, 242, 306], "xlsx2csv": [125, 142], "refin": 125, "major": 125, "dramat": 125, "modul": [125, 799, 918, 1317], "bind": 125, "significantli": [125, 214, 292, 306, 1155, 1308, 1317], "potenti": [125, 134, 137, 138, 208, 239, 241, 306, 571, 825, 913, 917], "unabl": 125, "julian": 125, "primari": [125, 1317], "constructor": [125, 152], "load_workbook": 125, "open_workbook": 125, "excelread": 125, "load_sheet_by_nam": 125, "influenc": [125, 832, 853, 913], "pipelin": [125, 268, 306], "becom": [125, 663], "skip_empty_lin": 125, "correct": [125, 131, 452, 453, 494, 612, 613, 614, 615, 616, 617, 619, 632, 800, 852, 853, 913, 917, 1060, 1061, 1104, 1191, 1213, 1308], "forc": [125, 211, 214, 264, 292, 306, 539, 847, 848, 901, 913, 1155, 1289, 1308], "best": [125, 214, 292, 306, 551, 800, 1155, 1308], "known": [125, 126, 150, 355, 539, 611, 612, 613, 614, 615, 617, 618, 619, 800, 895, 901, 958, 1147], "ambigu": [125, 427, 428, 442, 681, 684, 744, 1034, 1035, 1049, 1261, 1264], "memory_map": [126, 132, 137], "greatli": [126, 137], "repeat": [126, 137, 600, 602, 773, 791, 800], "That": [126, 852, 853, 913], "filenam": 126, "my_fil": 126, "write_ipc": [126, 306], "read_ndjson": 129, "stringio": [129, 130, 391, 466, 562, 800, 826, 870, 913], "With": [129, 206, 248, 306, 350, 531, 625, 800, 872, 913, 953, 1103, 1139, 1205, 1308], "becaus": [130, 138, 175, 191, 194, 212, 214, 273, 292, 306, 509, 839, 842, 901, 913, 925, 1057, 1117, 1155, 1308], "openoffic": 131, "od": [131, 812], "parallelstrategi": [132, 139], "use_statist": [132, 139], "hive_partit": [132, 139], "hive_schema": [132, 139], "retri": [132, 137, 139], "row_group": [132, 139], "hive": [132, 139], "prune": [132, 139, 853, 913], "gcp": [132, 136, 139], "stabl": [132, 162, 167, 169, 196, 242, 253, 269, 306, 472, 544, 800, 816, 825, 857, 876, 877, 882, 913, 1075, 1308], "read_tabl": 132, "scan_parquet": [132, 140], "scan_pyarrow_dataset": [132, 139], "contribut": [132, 613, 615, 617, 619, 800], "with_column_nam": 134, "push": [134, 137, 138, 139, 140], "down": [134, 137, 138, 139, 140, 463, 800, 1070, 1308], "therebi": [134, 137, 138], "realloc": [134, 137, 138, 177, 306, 1064, 1308], "headerless": 134, "my_long_fil": 134, "thing": [134, 141], "less": [134, 211, 306, 496, 546, 549, 673, 800, 848, 913, 1253, 1317], "breezah": 134, "languag": [134, 191, 211, 238, 275, 306, 424, 428, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049, 1059, 1308], "hard": [134, 852, 853, 913], "mydf": 134, "lambda": [134, 160, 183, 214, 228, 229, 233, 292, 306, 321, 355, 450, 451, 452, 453, 539, 547, 548, 549, 551, 572, 573, 733, 734, 751, 763, 764, 775, 800, 852, 853, 861, 864, 901, 913, 925, 958, 1058, 1059, 1060, 1061, 1147, 1155, 1308], "lower": [134, 169, 191, 194, 231, 298, 306, 371, 373, 478, 545, 548, 572, 597, 601, 615, 720, 742, 743, 745, 746, 774, 787, 788, 800, 825, 839, 842, 863, 907, 913, 977, 979, 994, 1081, 1153, 1174, 1177, 1190, 1295, 1308], "simpli": [134, 733, 751], "idx": [134, 191, 209, 282, 306, 342, 355, 539, 839, 892, 913, 958, 1147, 1230], "uint16": [134, 381, 382, 697, 800, 918, 986, 987, 1278, 1308], "u16": [134, 150, 1317], "eu": [135, 136], "central": [135, 136, 494, 632, 800, 1104, 1213, 1308], "iceberg": [136, 812], "pyiceberg": [136, 142], "secret": [136, 139], "adlf": 136, "my": [136, 140, 689, 1269], "oauth": 136, "token": 136, "ya29": 136, "dr": 136, "afm": 136, "py": 136, "impl": 136, "fsspecfileio": 136, "give": [137, 138, 211, 220, 271, 306, 407, 494, 602, 706, 800, 812, 857, 883, 913, 1010, 1104, 1288, 1308], "read_parquet": 139, "east": 139, "allow_pyarrow_filt": 140, "comparison": 140, "dset": 140, "folder": 140, "04": [140, 163, 169, 191, 275, 306, 400, 401, 420, 421, 427, 428, 431, 434, 435, 436, 439, 441, 445, 611, 612, 614, 617, 618, 619, 681, 725, 741, 744, 745, 747, 800, 818, 825, 839, 913, 918, 1004, 1018, 1024, 1027, 1028, 1029, 1034, 1038, 1041, 1042, 1043, 1046, 1048, 1052, 1261], "seed": [141, 196, 242, 306, 472, 526, 599, 622, 628, 800, 1075, 1134, 1175, 1197, 1209, 1308], "shuffl": [141, 242, 268, 292, 306, 526, 622, 800, 901, 1134, 1197, 1308], "platform": 142, "maco": 142, "arm64": 142, "arm": 142, "64bit": [142, 601, 800, 1177, 1308], "main": [142, 822, 913], "feb": 142, "2024": [142, 396, 402, 403, 408, 412, 415, 417, 422, 429, 432, 725, 741, 744, 747, 918, 999], "21": [142, 169, 221, 255, 306, 399, 611, 612, 614, 617, 618, 619, 753, 800, 825, 858, 913, 918, 1002], "clang": 142, "1500": [142, 151], "adbc_driver_manag": 142, "cloudpickl": 142, "17": [142, 150, 175, 211, 284, 306, 451, 610, 620, 753, 787, 800, 893, 981, 983, 1035, 1059, 1185, 1308, 1317], "hvplot": [142, 306, 309, 1308, 1312], "matplotlib": [142, 862, 874, 913], "nest_asyncio": 142, "26": [142, 169, 306, 406, 443, 825, 913, 1009], "pydant": 142, "torch": [142, 268, 306, 1308], "check_row_ord": [143, 144], "check_column_ord": [143, 144], "check_dtyp": [143, 144, 145, 146], "check_exact": [143, 144, 145, 146], "rtol": [143, 144, 145, 146], "atol": [143, 144, 145, 146], "categorical_as_str": [143, 144, 145, 146], "assert": [143, 144, 145, 146, 148, 150, 152, 238, 306, 812, 918], "assertionerror": [143, 144, 145, 146], "compar": [143, 144, 145, 146, 174, 184, 306, 448, 449, 469, 471, 478, 496, 546, 582, 583, 800, 971, 1056, 1200, 1308], "unsort": [143, 144], "toler": [143, 144, 145, 146, 211, 306, 848, 913], "inexact": [143, 144, 145, 146], "share": [143, 144, 145, 146, 175, 306, 1057, 1308], "assert_series_equ": [143, 146, 1056, 1308, 1317], "assert_frame_not_equ": [143, 146], "pytest": [143, 145], "worthwhil": [143, 145], "shorten": [143, 145], "traceback": [143, 144, 145, 146], "tb": [143, 145, 175, 306, 1057, 1308], "short": [143, 145], "tend": [143, 145], "unhelpfulli": [143, 145], "assert_frame_equ": [144, 145, 174, 306, 1317], "assert_series_not_equ": [144, 145], "check_nam": [145, 146], "searchstrategi": [147, 149, 150, 152], "null_prob": [147, 150, 152], "percentag": [147, 150, 152, 589, 800, 1169, 1308], "chanc": [147, 150, 152, 1317], "independ": [147, 148, 150, 152, 268, 306], "hypothesi": [147, 148, 149, 150, 151, 152, 1317], "sampled_from": [147, 1317], "unique_small_int": 147, "ccy": [147, 1317], "gbp": [147, 1317], "eur": [147, 189, 306, 1317], "jpy": [147, 1317], "min_col": [148, 150], "max_col": [148, 150], "standalon": [148, 150, 918], "mincol": 148, "assign": [148, 191, 291, 306, 355, 539, 588, 599, 672, 673, 800, 839, 900, 913, 958, 1147, 1175, 1252, 1253, 1308], "minimum": [148, 149, 150, 152, 183, 222, 223, 306, 450, 452, 453, 566, 581, 591, 599, 770, 771, 800, 859, 913, 1023, 1058, 1060, 1061, 1165, 1171, 1175, 1308, 1317], "especi": [148, 607, 800, 832, 913, 1183, 1308], "test_unique_xyz": 148, "assert_someth": 148, "punctuat": 148, "test_special_char_colname_init": 148, "inner_dtyp": [149, 152], "select_from": [149, 152], "min_siz": [149, 150, 152, 1317], "max_siz": [149, 150, 152, 1317], "anoth": [149, 163, 174, 184, 190, 211, 306, 388, 398, 512, 537, 555, 558, 603, 650, 800, 818, 838, 890, 913, 992, 1001, 1056, 1064, 1120, 1179, 1200, 1230, 1308], "randomli": 149, "innermost": 149, "2x": 149, "lst": 149, "11330": 149, "24030": 149, "116": 149, "zz": [149, 152, 169, 253, 306, 825, 913], "uint8_pair": [149, 1317], "uint": [149, 1317], "zip": [149, 1317], "131": 149, "176": 149, "149": [149, 1317], "include_col": 150, "allow_infin": [150, 152], "allowed_dtyp": [150, 152, 1317], "excluded_dtyp": [150, 152], "describ": [150, 189, 306, 913, 1308], "desir": [150, 355, 445, 539, 958, 1052, 1147, 1308], "n_chunk": [150, 152, 306, 924, 1064, 1308], "randomis": 150, "onto": 150, "pct": 150, "preced": [150, 918], "disallow": [150, 152], "inf": [150, 152, 328, 389, 474, 480, 484, 596, 706, 800, 931, 983, 993, 1077, 1085, 1090, 1153, 1169, 1173, 1295, 1308], "exclud": [150, 152, 191, 306, 365, 379, 382, 396, 478, 705, 725, 800, 839, 913, 999, 1081, 1100, 1308], "usag": [150, 152, 250, 306, 918, 1208, 1308], "deploi": [150, 152], "characterist": [150, 152], "concret": [150, 152], "test_repr": 150, "isinst": [150, 152], "0x11f561580": 150, "0565": 150, "34715": 150, "5844": 150, "33": [150, 169, 221, 306, 620, 800, 825, 858, 913, 1190, 1308], "076854": 150, "3382": 150, "48662": 150, "7540": 150, "836271": 150, "4063": 150, "06": [150, 163, 275, 306, 396, 400, 419, 426, 427, 428, 429, 442, 443, 741, 744, 818, 913, 918, 999, 1034, 1035, 1049], "39092": 150, "1889": 150, "13": [150, 164, 165, 169, 178, 179, 188, 201, 212, 224, 238, 279, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 316, 396, 402, 403, 405, 408, 409, 412, 413, 415, 416, 417, 418, 422, 423, 429, 430, 432, 559, 561, 608, 685, 727, 733, 736, 744, 751, 784, 786, 789, 800, 819, 820, 825, 833, 834, 850, 866, 888, 897, 899, 902, 903, 904, 905, 906, 907, 908, 913, 999, 1008, 1012, 1019, 1022, 1025, 1030, 1035, 1037, 1049, 1050, 1088, 1091, 1098, 1100, 1155, 1265, 1308], "41": [150, 169, 306, 618, 800, 825, 913, 1317], "874455": 150, "15836": 150, "1755e": 150, "575050513": 150, "profil": [151, 153, 821, 913], "balanc": [151, 153, 1317], "set_environ": 151, "polars_hypothesis_profil": [151, 153], "max_data_s": 152, "normal": [152, 191, 306, 447, 494, 632, 800, 839, 913, 1055, 1104, 1213, 1308], "test_repr_is_valid_str": 152, "experi": 152, "create_list_strategi": [152, 1317], "polars_max_thread": 154, "behind": 154, "lock": 154, "reason": [154, 169, 306, 539, 549, 800, 825, 913], "temporarili": [154, 157, 191, 192, 194, 195, 238, 306, 608, 800, 839, 840, 842, 843, 866, 913], "pyspark": 154, "udf": [154, 160, 214, 228, 286, 292, 306, 321, 391, 551, 592, 718, 764, 800, 826, 861, 895, 901, 913, 925, 1155, 1308], "recommend": [154, 169, 208, 228, 306, 817, 825, 913, 918], "thread_pool_s": 155, "easi": [157, 1317], "restor": 157, "restore_default": 157, "set_tbl_row": 157, "whatev": 157, "were": [157, 215, 217, 222, 255, 306, 603, 796, 800, 1179, 1308], "enter": 157, "advantag": [157, 228, 306], "set_": 157, "set_verbos": 157, "do_various_th": 157, "cleaner": 157, "breviti": 157, "vein": 157, "durat": [157, 211, 275, 306, 397, 405, 406, 409, 413, 416, 418, 423, 430, 435, 436, 437, 438, 439, 440, 441, 445, 451, 703, 742, 743, 745, 746, 787, 788, 800, 848, 913, 918, 1000, 1008, 1009, 1012, 1019, 1022, 1025, 1030, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1059, 1291, 1308], "set_ascii_t": 157, "write_ascii_frame_to_stdout": 157, "sy": 157, "stdout": [157, 189, 306, 563], "nan_as_nul": 159, "polarsdatafram": 159, "notimplementederror": 159, "num_row": 159, "get_column": [159, 266, 306], "dtypekind": 159, "inference_s": [160, 214, 306], "256": [160, 214, 306, 1169, 1308], "map_row": [160, 306], "tri": [160, 214, 306], "approxim": [161, 306, 322, 451, 719, 800, 815, 913, 1059, 1308, 1317], "hyperloglog": [161, 306, 322, 719, 800, 815, 913], "algorithm": [161, 306, 322, 640, 666, 719, 800, 815, 913, 1220, 1246], "cardin": [161, 306, 322, 719, 800, 815, 913], "k": [162, 241, 269, 270, 306, 364, 365, 378, 494, 704, 705, 800, 816, 882, 913, 966, 1104, 1292, 1308], "intoexpr": [162, 190, 191, 192, 193, 194, 195, 238, 244, 245, 248, 252, 269, 279, 280, 284, 306, 320, 339, 359, 362, 363, 365, 396, 451, 457, 474, 478, 505, 506, 527, 528, 529, 530, 588, 603, 623, 625, 626, 635, 640, 666, 671, 672, 673, 679, 680, 705, 715, 717, 723, 726, 727, 728, 729, 731, 733, 736, 737, 740, 744, 751, 766, 768, 771, 776, 779, 782, 784, 800, 816, 838, 839, 840, 841, 842, 843, 866, 868, 869, 872, 876, 882, 888, 889, 893, 913, 917, 942, 961, 964, 965, 999, 1059, 1065, 1081, 1114, 1179, 1199, 1205, 1251, 1252, 1253, 1259, 1260, 1308], "nulls_last": [162, 252, 269, 306, 331, 351, 364, 365, 533, 634, 635, 704, 705, 723, 800, 816, 876, 882, 913, 934, 954, 1141, 1215, 1308], "smallest": [162, 269, 306, 364, 365, 705, 800, 816, 882, 913, 966, 1308], "largest": [162, 269, 306, 365, 704, 705, 800, 816, 882, 913, 1292, 1308], "bottom": [162, 306, 365, 800, 816, 913], "wors": [162, 269, 306, 816, 876, 882, 913], "search": [162, 211, 269, 306, 539, 640, 666, 816, 848, 876, 882, 913, 1220, 1246], "top_k": [162, 306, 364, 365, 705, 800, 816, 913, 966, 1308], "columnnameorselector": [163, 170, 172, 220, 227, 229, 241, 262, 271, 272, 273, 306, 818, 827, 828, 857, 883, 884, 913], "due": [163, 191, 211, 238, 241, 275, 306, 316, 366, 406, 424, 428, 442, 493, 571, 572, 574, 576, 578, 579, 594, 608, 611, 612, 613, 614, 615, 617, 618, 619, 696, 725, 742, 743, 745, 746, 787, 788, 800, 818, 839, 848, 866, 913, 967, 1009, 1031, 1035, 1049, 1308], "overflow": [163, 306, 366, 381, 382, 663, 686, 697, 800, 818, 913, 967, 986, 987, 1243, 1266, 1278, 1308], "u8": [163, 262, 263, 273, 306, 603, 713, 800, 818, 913, 918, 1179, 1285, 1308, 1317], "tempor": [163, 191, 192, 194, 195, 208, 238, 240, 241, 261, 306, 371, 478, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 800, 812, 818, 839, 840, 842, 843, 866, 913, 918, 977, 1081, 1100, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "to_dict": [163, 306, 818, 913], "as_seri": [163, 260, 306, 818, 913, 993, 1173, 1308], "greater": [164, 211, 306, 469, 471, 478, 632, 661, 662, 673, 691, 800, 848, 913, 1081, 1213, 1241, 1242, 1253, 1271, 1308], "cheap": [164, 165, 245, 280, 306, 819, 820, 869, 889, 913, 976, 980, 1308], "deepcopi": [164, 306, 819, 913, 976, 1308], "appl": [166, 199, 210, 233, 236, 260, 287, 288, 290, 291, 293, 294, 295, 296, 297, 298, 299, 306, 365, 605, 645, 674, 705, 800, 847, 864, 896, 897, 899, 900, 902, 903, 904, 905, 906, 907, 908, 913, 1225, 1254], "banana": [166, 260, 288, 290, 293, 294, 295, 296, 297, 298, 299, 306, 365, 605, 645, 674, 705, 800, 897, 899, 902, 903, 904, 905, 906, 907, 908], "orang": [166, 287, 288, 290, 291, 293, 294, 296, 298, 299, 306, 365, 705, 800, 896, 897, 899, 900, 902, 903, 905, 907, 908], "pairwis": [167, 306], "pearson": [167, 306, 494, 632, 729, 800, 1104, 1213, 1308], "correl": [167, 306, 729, 777], "coeffici": [167, 306, 632, 800, 1213, 1308], "corrcoef": [167, 306], "percentil": [169, 306, 825, 913, 994, 1308], "interpol": [169, 231, 298, 306, 459, 554, 597, 615, 774, 800, 825, 863, 907, 913, 994, 1174, 1190, 1308], "rollinginterpolationmethod": [169, 231, 298, 306, 597, 615, 774, 800, 825, 863, 907, 913, 994, 1174, 1190, 1308], "summari": [169, 306, 825, 913, 994, 1308], "midpoint": [169, 231, 298, 306, 597, 615, 774, 800, 825, 863, 907, 913, 994, 1174, 1190, 1308], "linear": [169, 202, 231, 298, 306, 477, 503, 554, 597, 615, 727, 728, 774, 800, 825, 846, 863, 907, 913, 994, 1080, 1111, 1174, 1190, 1308], "deem": [169, 306, 825, 913], "programmat": [169, 306, 825, 913], "versu": [169, 306, 825, 913], "interact": [169, 306, 825, 913], "explor": [169, 306, 825, 913], "glimps": [169, 197, 306], "median": [169, 229, 306, 459, 613, 800, 825, 890, 913, 994, 1188, 1308], "null_count": [169, 172, 306, 388, 800, 825, 913, 992, 994, 1074, 1308], "266667": [169, 306, 825, 913], "666667": [169, 202, 276, 294, 306, 450, 767, 800, 825, 846, 886, 903, 913, 1058, 1308], "std": [169, 306, 617, 800, 825, 913, 994, 1192, 1308], "101514": [169, 306, 825, 913], "071068": [169, 306, 825, 913], "36": [169, 306, 825, 913], "34": [169, 306, 681, 825, 913, 1261], "43": [169, 238, 306, 382, 608, 618, 800, 825, 866, 913], "70": [169, 306, 713, 800, 825, 913, 1104, 1308], "88": [169, 306, 825, 913], "90": [169, 306, 685, 825, 913, 1265], "49": [169, 306, 825, 913], "subset": [172, 225, 271, 306, 828, 883, 913], "preserv": [172, 180, 190, 193, 210, 214, 264, 265, 306, 394, 395, 396, 460, 508, 629, 800, 828, 835, 847, 913, 997, 998, 999, 1068, 1116, 1210, 1290, 1308], "all_horizont": [172, 306, 714, 828, 913], "is_nul": [172, 306, 800, 828, 913, 1308], "null_equ": [174, 184, 306, 1056, 1200, 1308], "sizeunit": [175, 306, 1057, 1308], "heap": [175, 306, 800, 917, 1057, 1308], "bitmap": [175, 306, 1057, 1308], "therefor": [175, 306, 551, 790, 800, 1057, 1308], "structarrai": [175, 306, 1057, 1308], "constant": [175, 238, 306, 397, 451, 457, 800, 866, 913, 1000, 1057, 1059, 1065, 1308], "unchang": [175, 306, 550, 603, 703, 800, 852, 853, 895, 901, 913, 1057, 1154, 1179, 1291, 1308], "capac": [175, 250, 306, 1057, 1208, 1308], "ffi": [175, 306, 1057, 1308], "kb": [175, 306, 1057, 1308], "mb": [175, 306, 1057, 1308], "gb": [175, 306, 1057, 1308], "revers": [175, 306, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 548, 572, 574, 576, 594, 696, 732, 800, 913, 984, 985, 986, 987, 988, 989, 990, 991, 1308], "1_000_000": [175, 306, 1057, 1308], "17888890": [175, 306], "0601749420166": [175, 306], "more_column": [176, 246, 272, 306, 454, 749, 800, 831, 871, 884, 913], "long": [176, 220, 273, 306, 831, 857, 913], "letter": [176, 289, 300, 306, 454, 640, 648, 666, 749, 800, 831, 898, 909, 913, 918, 1220, 1228, 1246], "onlin": [177, 306, 1064, 1308], "rerun": [177, 306, 1064, 1308], "finish": [177, 306, 1064, 1308], "conveni": [177, 268, 306, 924, 1064, 1308], "Not": [178, 306, 487, 489, 800, 833, 913], "fillnullstrategi": [179, 306, 459, 800, 834, 913, 1067, 1308], "matches_supertyp": [179, 306, 834, 913], "forward": [179, 211, 248, 306, 350, 396, 420, 459, 465, 531, 625, 800, 834, 848, 872, 913, 953, 999, 1027, 1067, 1139, 1205, 1308], "consecut": [179, 306, 358, 459, 465, 638, 800, 834, 913, 1067, 1218, 1308], "fill_nan": [179, 306, 800, 913, 1308], "intoexprcolumn": [180, 306, 338, 342, 343, 350, 364, 365, 371, 372, 373, 428, 457, 460, 504, 513, 516, 526, 531, 589, 593, 622, 625, 647, 651, 654, 670, 676, 677, 678, 682, 686, 691, 704, 705, 720, 725, 742, 743, 745, 746, 757, 758, 787, 788, 790, 800, 835, 872, 913, 941, 945, 946, 953, 966, 977, 978, 979, 1035, 1065, 1112, 1121, 1124, 1134, 1139, 1169, 1227, 1231, 1234, 1250, 1256, 1257, 1258, 1262, 1271, 1292, 1308], "constraint": [180, 306, 460, 493, 571, 572, 574, 576, 578, 579, 594, 696, 790, 800, 835, 913], "behav": [180, 306, 460, 551, 677, 678, 800, 835, 913], "eq": [180, 306, 449, 460, 800, 835, 913, 1308], "implicitli": [180, 306, 460, 790, 800, 835, 913], "is_in": [180, 306, 800, 1308], "get_column_index": [181, 306], "reduct": [183, 306], "supercast": [183, 306], "parent": [183, 306], "arithmet": [183, 306], "zip_with": [183, 306, 1308], "foo11": [183, 306], "bar22": [183, 306], "nth": [185, 258, 306, 468, 673, 700, 800, 837, 881, 913, 1072, 1253, 1281, 1308], "th": [185, 258, 306, 468, 513, 527, 632, 651, 682, 700, 800, 837, 881, 913, 1072, 1121, 1135, 1213, 1231, 1262, 1281, 1308], "retriev": [186, 306, 336, 337, 501, 502, 692, 939, 940, 1109, 1110, 1272], "max_items_per_column": [189, 306], "max_colname_length": [189, 306], "return_as_str": [189, 306, 563], "preview": [189, 306], "few": [189, 306], "exce": [189, 306], "ellipsi": [189, 306], "head": [189, 213, 257, 306, 320, 498, 588, 800, 851, 913, 1106, 1279, 1308], "tail": [189, 197, 306, 320, 632, 800, 913, 1076, 1213, 1308], "usd": [189, 306, 1317], "named_bi": [190, 306, 838, 913], "groupbi": [190, 229, 306, 321, 551, 718, 764, 800, 913], "consist": [190, 193, 227, 306, 681, 838, 841, 913, 924, 1064, 1261, 1308], "agg": [190, 191, 194, 229, 238, 306, 315, 365, 460, 462, 467, 470, 549, 551, 562, 588, 634, 635, 705, 712, 764, 800, 821, 822, 830, 832, 838, 839, 840, 842, 843, 862, 866, 874, 913, 918], "Or": [190, 191, 211, 238, 252, 275, 284, 306, 451, 588, 608, 635, 742, 743, 745, 746, 787, 788, 790, 800, 838, 839, 848, 866, 876, 893, 913, 1059, 1308], "index_column": [191, 192, 194, 195, 238, 306, 608, 800, 839, 840, 842, 843, 866, 913], "timedelta": [191, 192, 194, 195, 211, 238, 275, 306, 424, 428, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 848, 866, 913, 918, 1015, 1023, 1031, 1035, 1049, 1059, 1164, 1165, 1217, 1297, 1308], "include_boundari": [191, 194, 306, 839, 842, 913], "closedinterv": [191, 192, 194, 195, 238, 306, 478, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 866, 913, 1081, 1308], "label": [191, 268, 306, 389, 596, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 800, 839, 862, 913, 993, 1173, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "group_bi": [191, 193, 225, 229, 238, 275, 305, 306, 315, 365, 460, 462, 467, 470, 549, 551, 588, 634, 635, 705, 712, 764, 800, 821, 822, 830, 832, 839, 841, 862, 866, 874, 912, 913, 918], "start_bi": [191, 194, 306, 839, 842, 913], "startbi": [191, 194, 306, 839, 842, 913], "check_sort": [191, 192, 194, 195, 238, 306, 451, 608, 800, 839, 840, 842, 843, 866, 913, 1059, 1308], "dynamicgroupbi": [191, 194, 306], "member": [191, 306, 839, 913, 1089, 1308], "earliest": [191, 194, 306, 427, 428, 442, 681, 684, 744, 839, 842, 913, 1034, 1035, 1049, 1261, 1264], "datapoint": [191, 194, 306, 839, 842, 913], "descript": [191, 306, 839, 913], "ascend": [191, 192, 194, 195, 238, 306, 608, 612, 613, 614, 615, 617, 619, 800, 839, 840, 842, 843, 866, 913], "dynam": [191, 194, 306, 355, 539, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 800, 839, 842, 913, 917, 958, 1147, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "matter": [191, 192, 194, 195, 208, 238, 240, 241, 261, 306, 608, 677, 678, 800, 839, 840, 842, 843, 866, 913], "interv": [191, 192, 194, 195, 238, 275, 306, 389, 428, 442, 474, 478, 596, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 840, 842, 843, 866, 913, 993, 1007, 1010, 1011, 1018, 1021, 1024, 1026, 1029, 1032, 1033, 1035, 1040, 1049, 1050, 1077, 1081, 1173, 1308], "_lower_boundari": [191, 306, 839, 913], "_upper_boundari": [191, 306, 839, 913], "harder": [191, 194, 306, 839, 842, 913], "inclus": [191, 192, 194, 195, 238, 306, 478, 608, 611, 612, 613, 614, 615, 617, 618, 619, 671, 672, 720, 742, 743, 745, 746, 757, 758, 787, 788, 800, 839, 840, 842, 843, 866, 913, 1081, 1251, 1252, 1308], "boundari": [191, 306, 371, 372, 373, 474, 800, 839, 913, 977, 978, 979, 1077, 1308], "mondai": [191, 194, 306, 396, 442, 444, 725, 839, 842, 913, 999, 1049, 1051], "tuesdai": [191, 194, 306, 839, 842, 913], "wednesdai": [191, 194, 306, 431, 434, 839, 842, 913, 1038, 1041], "thursdai": [191, 194, 306, 396, 725, 839, 842, 913, 999], "fridai": [191, 194, 306, 396, 431, 434, 725, 839, 842, 913, 999, 1038, 1041], "saturdai": [191, 194, 306, 839, 842, 913], "sundai": [191, 194, 306, 396, 431, 434, 444, 725, 839, 842, 913, 999, 1038, 1041, 1051], "weekli": [191, 194, 306, 442, 839, 842, 913, 1049], "week": [191, 194, 211, 238, 275, 306, 396, 424, 428, 442, 444, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 725, 742, 743, 745, 746, 747, 787, 788, 800, 839, 842, 848, 866, 913, 918, 999, 1031, 1035, 1049, 1051, 1059, 1308], "shift": [191, 194, 249, 306, 392, 507, 589, 626, 727, 800, 839, 842, 873, 913, 995, 1115, 1169, 1206, 1308], "front": [191, 194, 306, 839, 842, 913], "sorted": [191, 192, 194, 195, 238, 306, 839, 840, 842, 843, 866, 913], "verifi": [191, 192, 194, 195, 238, 306, 839, 840, 842, 843, 866, 913], "incorrect": [191, 192, 194, 195, 238, 306, 445, 451, 549, 608, 624, 800, 839, 840, 842, 843, 866, 895, 901, 913, 1052, 1059, 1203, 1308], "roll": [191, 192, 195, 306, 396, 420, 421, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 727, 777, 778, 800, 839, 840, 843, 913, 999, 1027, 1028, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308], "re": [191, 207, 306, 420, 421, 431, 434, 839, 913, 1027, 1028, 1038, 1041, 1316], "1d": [191, 211, 238, 275, 306, 398, 424, 428, 436, 439, 442, 445, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 761, 787, 788, 800, 839, 848, 866, 913, 918, 1001, 1010, 1017, 1031, 1035, 1040, 1043, 1046, 1049, 1059, 1308], "set_index": [191, 306, 839, 913], "resampl": [191, 306, 839, 913], "unlik": [191, 306, 839, 913], "evenli": [191, 306, 839, 913], "upsampl": [191, 306, 839, 913], "1n": [191, 211, 238, 275, 306, 424, 428, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049, 1059, 1308], "1u": [191, 211, 238, 275, 306, 424, 428, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049, 1059, 1308], "1m": [191, 211, 238, 275, 306, 424, 428, 441, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1044, 1045, 1047, 1048, 1049, 1059, 1308], "millisecond": [191, 211, 238, 275, 306, 408, 417, 424, 428, 438, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 787, 788, 800, 839, 848, 866, 913, 918, 1031, 1035, 1045, 1049, 1059, 1308], "minut": [191, 211, 238, 275, 306, 408, 412, 415, 422, 424, 428, 429, 439, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 744, 745, 746, 747, 786, 787, 788, 800, 839, 848, 866, 913, 918, 1031, 1035, 1046, 1049, 1059, 1308], "1h": [191, 211, 238, 275, 306, 406, 424, 428, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1009, 1011, 1031, 1035, 1049, 1059, 1308], "hour": [191, 211, 238, 275, 306, 412, 415, 417, 422, 424, 428, 429, 436, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 744, 745, 746, 747, 786, 787, 788, 800, 839, 848, 866, 913, 918, 1031, 1035, 1043, 1049, 1059, 1308], "1w": [191, 211, 238, 275, 306, 424, 428, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049, 1059, 1308], "1mo": [191, 211, 238, 275, 306, 401, 420, 421, 424, 427, 428, 435, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1004, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1042, 1049, 1050, 1059, 1308], "month": [191, 211, 238, 275, 306, 404, 420, 421, 424, 428, 431, 434, 442, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 741, 742, 743, 744, 745, 746, 747, 787, 788, 800, 839, 848, 866, 913, 1007, 1027, 1028, 1031, 1035, 1038, 1041, 1049, 1059, 1308], "1q": [191, 211, 238, 275, 306, 424, 428, 442, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049], "quarter": [191, 211, 238, 275, 306, 424, 428, 442, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049], "1y": [191, 211, 238, 275, 306, 424, 428, 442, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1031, 1035, 1049], "1i": [191, 238, 275, 306, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 800, 839, 866, 913, 1059, 1308], "3d12h4m25": [191, 211, 238, 275, 306, 428, 442, 451, 608, 742, 743, 745, 746, 787, 788, 800, 839, 848, 866, 913, 1035, 1049, 1059, 1308], "correspond": [191, 211, 238, 264, 275, 306, 365, 411, 424, 428, 442, 551, 599, 608, 611, 612, 613, 614, 615, 617, 618, 619, 705, 742, 743, 745, 746, 787, 788, 800, 821, 839, 848, 866, 913, 1014, 1031, 1035, 1049, 1175, 1308], "daylight": [191, 211, 238, 275, 306, 397, 406, 424, 428, 442, 608, 611, 612, 613, 614, 615, 617, 618, 619, 742, 743, 745, 746, 747, 787, 788, 800, 839, 848, 866, 913, 1009, 1031, 1035, 1049], "10i": [191, 306, 839, 913], "datetime_rang": [191, 306, 398, 401, 420, 421, 424, 427, 428, 435, 436, 437, 438, 439, 440, 441, 442, 445, 611, 612, 614, 617, 618, 619, 742, 800, 839, 913, 1000, 1001, 1004, 1009, 1010, 1011, 1017, 1018, 1021, 1024, 1027, 1028, 1029, 1031, 1034, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "30m": [191, 306, 428, 442, 839, 913, 1035, 1049], "lower_bound": [191, 306, 371, 373, 478, 800, 839, 913, 977, 979, 1081, 1295, 1308], "upper_bound": [191, 306, 371, 372, 478, 539, 800, 839, 913, 977, 978, 1081, 1153, 1308], "bys": [191, 306, 839, 913], "int_rang": [191, 273, 282, 292, 306, 720, 760, 839, 853, 892, 901, 913], "2i": [191, 306, 839, 913], "3i": [191, 306, 839, 913], "a_agg_list": [191, 306, 839, 913], "rollinggroupbi": [192, 195, 238, 306], "more_bi": [193, 227, 252, 306, 635, 800, 841, 876, 913], "group_by_dynam": [194, 238, 306, 842, 866, 913], "_lower_bound": [194, 306, 842, 913], "_upper_bound": [194, 306, 842, 913], "seed_1": [196, 306, 472, 800, 1075, 1308], "seed_2": [196, 306, 472, 800, 1075, 1308], "seed_3": [196, 306, 472, 800, 1075, 1308], "hash": [196, 306, 800, 1308], "Its": [196, 306, 472, 800, 1075, 1308], "u64": [196, 282, 306, 472, 601, 800, 862, 892, 913, 1075, 1308], "10783150408545073287": [196, 306], "1438741209321515184": [196, 306], "10047419486152048166": [196, 306], "2047317070637311557": [196, 306], "ab": [197, 213, 257, 279, 306, 692, 694, 800, 888, 913, 1076, 1106, 1279, 1308], "in_plac": [199, 250, 277, 306, 1176, 1208, 1215, 1308], "grown": [199, 306], "insert_column": [200, 306], "intermedi": [202, 306, 846, 913, 1317], "333333": [202, 306, 493, 571, 800, 846, 913, 1169, 1194, 1308], "mask": [203, 205, 306, 360, 479, 481, 482, 485, 486, 492, 590, 591, 639, 643, 650, 800, 962, 1068, 1074, 1081, 1083, 1086, 1087, 1092, 1093, 1101, 1170, 1171, 1201, 1219, 1223, 1230, 1299, 1308], "visual": [203, 205, 306, 874, 913], "scalar": [206, 214, 239, 306, 623, 651, 656, 670, 682, 718, 761, 764, 800, 917, 1103, 1199, 1231, 1236, 1250, 1262, 1308], "buffer_s": [208, 306], "fit": [208, 250, 273, 306, 627, 776, 800, 1207, 1208, 1308], "signific": [208, 214, 306, 321, 551, 621, 800, 1155, 1196, 1308], "4x": [208, 306], "materialis": [208, 209, 239, 240, 306], "rows_by_kei": [208, 240, 306], "iter_row": [209, 239, 240, 241, 306], "17_500": [209, 306], "klmnoopqrstuvwxyz": [209, 306], "__name__": [209, 306], "7500": [209, 306], "15_000": [209, 306], "record_batch": [209, 306], "to_arrow": [209, 306, 1308], "to_batch": [209, 306], "date32": [209, 306], "large_str": [209, 259, 265, 306], "15000": [209, 306], "2500": [209, 268, 306], "left_on": [210, 211, 274, 306, 847, 848, 885, 913], "right_on": [210, 211, 274, 306, 847, 848, 885, 913], "suffix": [210, 211, 244, 279, 284, 306, 316, 362, 365, 487, 489, 490, 491, 548, 572, 574, 577, 578, 579, 588, 594, 605, 645, 677, 680, 705, 800, 847, 848, 868, 888, 890, 893, 913, 918, 964, 1225, 1260], "_right": [210, 211, 306, 847, 848, 913], "joinvalid": [210, 306, 847, 913], "join_nul": [210, 306, 847, 913], "coalesc": [210, 274, 306, 681, 847, 885, 913, 1261], "fashion": [210, 306, 830, 832, 862, 874, 913], "semi": [210, 306, 847, 913], "anti": [210, 306, 847, 901, 913, 1198, 1201, 1308], "cross": [210, 306, 847, 913], "outer_coalesc": [210, 306, 847, 913], "cartesian": [210, 306, 847, 913], "many_to_mani": [210, 306, 847, 913], "one_to_on": [210, 306, 847, 913], "one_to_mani": [210, 306, 847, 913], "many_to_on": [210, 306, 847, 913], "join_asof": [210, 306, 847, 913], "other_df": [210, 306], "ham_right": [210, 306, 847, 913], "by_left": [211, 306, 848, 913], "by_right": [211, 306, 848, 913], "asofjoinstrategi": [211, 306, 848, 913], "allow_parallel": [211, 306, 847, 848, 913], "force_parallel": [211, 306, 847, 848, 913], "asof": [211, 306, 848, 913], "rather": [211, 306, 466, 549, 563, 596, 607, 691, 800, 848, 913, 1173, 1183, 1271, 1308], "asof_join": [211, 306], "distanc": [211, 306, 474, 800, 848, 913, 1077, 1308], "plan": [211, 212, 306, 391, 800, 817, 821, 826, 830, 847, 848, 870, 874, 913], "gdp": [211, 306, 848, 913], "date_rang": [211, 275, 306, 404, 407, 425, 433, 444, 1007, 1026, 1032, 1033, 1050, 1051], "2016": [211, 306, 848, 913], "4164": [211, 306, 848, 913], "4411": [211, 306, 848, 913], "4566": [211, 306, 848, 913], "4696": [211, 306, 848, 913], "4827": [211, 306], "2017": [211, 306, 848, 913], "2018": [211, 306, 427, 848, 913, 1034], "2019": [211, 306, 848, 913], "popul": [211, 306, 848, 913], "82": [211, 306, 848, 913], "66": [211, 274, 306, 618, 713, 800, 848, 885, 913, 1104, 1190, 1308], "83": [211, 306, 848, 913], "quit": [211, 306], "earlier": [211, 306], "later": [211, 306, 562, 870, 913], "countri": [211, 306, 397, 1000], "gdp_date": [211, 306], "gdp2": [211, 306], "germani": [211, 306], "netherland": [211, 306], "784": [211, 306], "833": [211, 306], "914": [211, 306], "910": [211, 306, 648, 1228], "909": [211, 306], "pop2": [211, 306], "request": [212, 306], "describe_plan": [212, 306], "unoptim": [212, 306], "describe_optimized_plan": [212, 306], "show_graph": [212, 306, 913], "un": [212, 306], "graphviz": [212, 306, 874, 913], "much": [214, 273, 292, 306, 388, 512, 537, 551, 655, 656, 764, 800, 901, 992, 1120, 1145, 1155, 1235, 1236, 1308], "intens": [214, 292, 306, 588, 800, 1155, 1308], "materi": [214, 241, 292, 306, 821, 862, 901, 913, 918, 1155, 1308], "parallelis": [214, 292, 306, 1155, 1308], "achiev": [214, 292, 306, 551, 656, 800, 993, 1155, 1173, 1236, 1308], "black": [214, 306, 359, 360, 361, 362, 363], "arbitrarili": [214, 306], "rearrang": [214, 306], "transform": [214, 253, 306, 549, 687, 689, 690, 800, 877, 913], "map_el": [214, 306, 321, 549, 713, 800, 925, 1308], "lru_cach": [214, 306, 551, 800, 1155, 1308], "column_1": [214, 270, 306], "better": [214, 264, 292, 306, 551, 656, 800, 817, 901, 913, 1198, 1201, 1236, 1308], "axi": [215, 217, 220, 222, 255, 306, 721, 722, 857, 913], "max_horizont": [215, 306, 765], "null_strategi": [217, 255, 306], "nullstrategi": [217, 255, 306], "mean_horizont": [217, 306, 767], "propag": [217, 255, 306, 343, 449, 516, 580, 581, 583, 638, 728, 800, 946, 1124, 1164, 1165, 1218, 1308], "spam": [217, 306, 648, 1228], "ignore_nul": [218, 256, 306, 317, 319, 343, 450, 452, 453, 516, 638, 714, 716, 728, 800, 922, 923, 946, 1058, 1060, 1061, 1124, 1218, 1298, 1308], "id_var": [220, 306, 857, 913], "value_var": [220, 306, 857, 913], "variable_nam": [220, 306, 857, 913], "value_nam": [220, 306, 857, 913], "unpivot": [220, 306, 857, 913], "massag": [220, 306, 857, 913], "measur": [220, 306, 857, 913], "steve": [221, 306, 858, 913], "elis": [221, 306, 858, 913], "ag": [221, 306, 858, 913], "anna": [221, 306, 858, 913], "megan": [221, 306, 858, 913], "thoma": [221, 306, 858, 913], "min_horizont": [222, 306, 770, 779], "what": [225, 306, 309, 396, 549, 640, 666, 800, 999, 1220, 1246, 1298, 1308, 1312], "pack": [225, 306], "expr_unique_subset": [225, 306], "df_nuniqu": [225, 306], "df_agg_nuniqu": [225, 306], "include_kei": [227, 241, 306], "offer": [228, 306, 592, 800, 861, 913], "fulli": [228, 242, 306], "cast_str_to_int": [228, 306, 861, 913], "col_nam": [228, 306, 790, 861, 913], "tdf": [228, 306, 861, 913], "aggregate_funct": [229, 306], "pivotagg": [229, 306], "sort_column": [229, 306], "section": [229, 306, 639, 647, 648, 650, 664, 665, 742, 743, 745, 746, 787, 788, 1219, 1227, 1228, 1230, 1244, 1245], "predefin": [229, 306], "predict": [229, 232, 275, 306], "transpos": [229, 306], "discoveri": [229, 306], "col1": [229, 306, 913, 1317], "col2": [229, 306, 913, 1317], "col3": [229, 306, 1317], "tanh": [229, 306, 800, 1308], "998347": [229, 306], "964028": [229, 306], "999954": [229, 306], "unique_column_valu": [229, 306], "column_nam": [233, 234, 270, 306, 864, 913], "coo": [233, 306, 864, 913], "car": [233, 260, 306, 605, 800, 864, 913], "cam": [233, 306, 864, 913], "replace_column": [235, 306], "t_0": [238, 306, 608, 611, 612, 613, 614, 615, 617, 618, 619, 800, 866, 913], "t_1": [238, 306, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 800, 866, 913, 1059, 1308], "t_n": [238, 306, 451, 608, 611, 612, 613, 614, 615, 617, 618, 619, 800, 866, 913, 1059, 1308], "strptime": [238, 306, 427, 608, 800, 866, 913, 1034], "set_sort": [238, 275, 306, 608, 800, 848, 866, 913, 1308], "2d": [238, 264, 268, 306, 424, 608, 761, 800, 866, 913, 1000, 1007], "sum_a": [238, 306, 608, 800, 866, 913], "min_a": [238, 306, 608, 800, 866, 913], "max_a": [238, 306, 608, 800, 866, 913], "by_pred": [239, 306], "accord": [239, 306, 550, 596, 742, 743, 745, 746, 787, 788, 800, 1014, 1173, 1308], "mutual": [239, 306], "exclus": [239, 306, 713, 720, 757, 758, 800], "clariti": [239, 306], "toomanyrowsreturnederror": [239, 306], "norowsreturnederror": [239, 306], "inherit": [239, 306, 391, 800, 826, 913], "rowserror": [239, 306], "littl": [240, 306], "peak": [240, 306, 590, 591, 800, 1170, 1171, 1308], "flat": [241, 306, 510, 604, 800, 1118, 1180, 1308], "high": [241, 306, 596, 800, 812, 1173, 1308], "cost": [241, 306], "reoconstruct": [241, 306], "defaultdict": [241, 306], "assum": [241, 306, 852, 853, 895, 901, 913], "with_replac": [242, 306, 526, 622, 800, 1134, 1197, 1308], "ordereddict": [243, 306, 573, 575, 577, 782, 867, 913], "named_expr": [244, 245, 279, 280, 306, 779, 782, 868, 869, 888, 889, 913], "threshold": [244, 306, 868, 913], "set_auto_structifi": [244, 279, 306, 868, 888, 913], "auto_structifi": [244, 279, 306, 868, 888, 913], "is_odd": [244, 306, 868, 913], "_is_odd": [244, 306, 868, 913], "sequenti": [245, 280, 306, 869, 889, 913], "fill_valu": [248, 249, 273, 306, 625, 626, 800, 872, 873, 913, 1205, 1206, 1308], "opposit": [248, 306, 350, 531, 625, 800, 872, 913, 953, 1139, 1205, 1308], "lag": [248, 306, 350, 531, 625, 727, 800, 872, 913, 953, 1139, 1205, 1308], "shrink": [250, 306, 627, 800, 1207, 1208, 1308], "hold": [250, 306], "multithread": [252, 306, 364, 365, 635, 704, 705, 723, 800, 816, 876, 882, 913, 954, 1141, 1215, 1308], "although": [253, 306, 877, 913], "sqlcontext": [253, 306, 812, 877, 913, 1316], "1999": [253, 306, 424, 918, 1031], "2010": [253, 306, 918], "2077": [253, 306], "888": [253, 306, 877, 913], "AND": [253, 306, 714, 715, 877, 913, 918, 1289, 1308], "2050": [253, 306], "alias": [253, 306, 877, 913], "a_is_even": [253, 306, 877, 913], "concat_w": [253, 306, 877, 913], "b_b": [253, 306], "float4": [253, 306, 877, 913], "ddof": [254, 276, 306, 352, 357, 534, 541, 617, 619, 637, 711, 729, 731, 777, 778, 781, 789, 800, 878, 886, 913, 955, 960, 1142, 1149, 1192, 1194, 1217, 1297, 1308], "deviat": [254, 306, 452, 617, 637, 781, 800, 878, 913, 1060, 1217, 1308], "degre": [254, 276, 306, 534, 541, 598, 617, 619, 637, 711, 722, 729, 731, 777, 778, 781, 789, 800, 878, 886, 913, 1192, 1194, 1217, 1297, 1308], "freedom": [254, 276, 306, 534, 541, 617, 619, 637, 711, 729, 731, 777, 778, 781, 789, 800, 878, 886, 913, 1192, 1194, 1217, 1297, 1308], "divisor": [254, 276, 306, 534, 541, 617, 619, 637, 711, 729, 731, 777, 778, 781, 789, 800, 878, 886, 913, 1192, 1194, 1217, 1297, 1308], "816497": [254, 306], "gather_everi": [258, 306, 700, 800, 881, 913, 1281, 1308], "mostli": [259, 306, 460, 800], "categoricaltyp": [259, 306], "fruit": [260, 306, 605, 645, 674, 682, 800, 1225, 1254, 1262], "beetl": [260, 306, 605, 800], "audi": [260, 306, 605, 800], "28": [260, 306, 314, 427, 445, 800, 1034, 1052, 1317], "300": [260, 306, 586, 800, 1186, 1187, 1189, 1308], "drop_first": [262, 306, 1285, 1308], "dummi": [262, 306, 1285, 1308], "foo_1": [262, 306], "foo_2": [262, 306], "bar_3": [262, 306], "bar_4": [262, 306], "ham_a": [262, 306], "ham_b": [262, 306], "instantiat": [263, 306, 1287, 1308], "from_repr": [263, 306, 1287, 1308], "df_from_str_repr": [263, 306], "eval": [263, 306, 748, 1287, 1308], "indexord": [264, 306], "fortran": [264, 306], "downstream": [264, 306, 624, 800, 1203, 1308], "applic": [264, 306, 551, 611, 612, 613, 614, 615, 617, 618, 619, 800], "prevent": [264, 306, 316, 381, 382, 493, 571, 697, 800, 913, 986, 987, 1278, 1308], "reshap": [264, 306, 510, 800, 1118, 1308], "immut": [264, 306, 1289, 1308], "u1": [264, 306], "f4": [264, 306], "view": [264, 306, 551, 800, 1308], "recarrai": [264, 306], "rec": [264, 306], "use_pyarrow_extension_arrai": [265, 306, 1290, 1308], "extens": [265, 306, 1290, 1308], "na": [265, 306, 674, 1290, 1308], "doubl": [265, 306], "four": [267, 306], "five": [267, 306, 1317], "return_typ": [268, 306], "torchexporttyp": [268, 306], "tensor": [268, 306, 1308], "polarsdataset": [268, 306], "pytorch": [268, 306, 1308], "tensordataset": [268, 306], "design": [268, 306], "label_column": [268, 306], "lbl": [268, 306], "feat1": [268, 306], "feat2": [268, 306], "0000": [268, 306, 1317], "5000": [268, 306], "opt": [268, 306], "half": [268, 306, 428, 450, 451, 452, 453, 800, 1035, 1058, 1059, 1060, 1061, 1308], "experiment": [268, 306], "model": [268, 306], "float16": [268, 306], "dataload": [268, 306], "util": [268, 306, 753, 832, 913, 917], "dl": [268, 306], "scikit": [268, 306], "learn": [268, 306], "sklearn": [268, 306], "fetch_california_h": [268, 306], "hous": [268, 306], "feature_nam": [268, 306], "train": [268, 306], "loader": [268, 306], "bottom_k": [269, 306, 365, 704, 705, 800, 882, 913, 1292, 1308], "header_nam": [270, 306], "perhap": [270, 306], "column_2": [270, 306], "name_gener": [270, 306], "base_nam": [270, 306], "my_column_": [270, 306], "my_column_0": [270, 306], "my_column_1": [270, 306], "my_column_2": [270, 306], "j": [270, 306], "new_id": [270, 306], "uniquekeepstrategi": [271, 306, 883, 913], "kept": [271, 306, 883, 913], "decompos": [272, 306, 884, 913], "t_a": [272, 306, 884, 913], "t_b": [272, 306, 884, 913], "t_c": [272, 306, 884, 913], "t_d": [272, 306, 884, 913], "womp": [272, 306, 884, 913], "t_": [272, 306, 451, 800, 884, 913, 1059, 1308], "t_struct": [272, 306, 884, 913], "step": [273, 306, 720, 757, 758], "unstackdirect": [273, 306], "pivot": [273, 306], "phase": [273, 306], "ascii_uppercas": [273, 306], "h": [273, 306, 314, 431, 434, 627, 664, 665, 681, 684, 688, 800, 1244, 1245, 1261, 1264, 1268], "x_0": [273, 306, 450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "x_1": [273, 306, 451, 800, 1059, 1308], "y_0": [273, 306, 450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "y_1": [273, 306], "z_0": [273, 306], "z_1": [273, 306], "include_nul": [274, 306, 885, 913], "implicit": [274, 306, 885, 913], "syntact": [274, 306, 603, 714, 716, 719, 730, 732, 735, 749, 750, 754, 755, 756, 759, 765, 767, 769, 770, 772, 773, 774, 779, 781, 783, 785, 789, 791, 800, 885, 913, 1179, 1216, 1308], "sugar": [274, 306, 603, 714, 716, 719, 730, 732, 735, 749, 750, 754, 755, 756, 759, 765, 767, 769, 770, 772, 773, 774, 779, 781, 783, 785, 789, 791, 800, 885, 913, 1179, 1216, 1308], "400": [274, 306, 437, 438, 440, 885, 913, 1186, 1187, 1189, 1308], "600": [274, 306, 437, 438, 440, 885, 913, 918], "700": [274, 306, 885, 913], "new_df": [274, 306, 885, 913], "time_column": [275, 306], "frequenc": [275, 306], "chain": [275, 306, 428, 442, 493, 571, 572, 574, 576, 578, 579, 594, 696, 790, 800, 1035, 1049], "offset_bi": [275, 306, 428, 442, 747, 1035, 1049], "forward_fil": [275, 306, 379, 382, 800], "varianc": [276, 306, 453, 494, 619, 711, 789, 800, 886, 913, 1061, 1104, 1194, 1297, 1308], "grow": [277, 306], "not_": [279, 306, 488, 800, 888, 913, 1308], "not_c": [279, 306, 888, 913], "52": [279, 306, 443, 620, 800, 848, 888, 913], "diff": [279, 306, 435, 436, 437, 438, 439, 440, 441, 527, 800, 888, 913, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1135, 1308], "_diff": [279, 306, 888, 913], "row_nr": [281, 306, 891, 913], "1001": [282, 306, 892, 913], "1002": [282, 306, 892, 913], "named_agg": [284, 893], "_sum": [284, 893], "_mean_squar": [284, 893], "b_sum": [284, 893], "c_mean_squar": [284, 893], "sub": [286, 292, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 357, 516, 524, 800, 939, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 955, 956, 960, 1124, 1132], "map_group": [286, 718, 895], "toward": [287, 497, 518, 732, 800, 896, 1105, 1126, 1308], "nr": [289, 300, 898, 909], "triangl": [292, 901], "group_df": [292, 901], "maxim": [293, 329, 800, 902, 932, 1308], "833333": [294, 903], "minim": [296, 330, 337, 502, 627, 635, 800, 905, 933, 940, 1110, 1159, 1207, 1308], "overview": [306, 800, 812, 913, 1308, 1317], "frameinittyp": [306, 913], "entri": [306, 913, 1316], "workaround": 306, "pola": 306, "2846": 306, "df4": 306, "df5": 306, "df6": 306, "approx_n_uniqu": [306, 800, 913], "corr": 306, "drop_in_plac": 306, "drop_nul": [306, 394, 800, 913, 997, 1308], "estimated_s": [306, 1308], "explod": [306, 365, 462, 588, 604, 705, 800, 913, 917, 1180, 1308], "find_idx_by_nam": 306, "fold": [306, 560, 726, 733, 734, 737, 738, 775], "frame_equ": 306, "group_by_rol": [306, 913], "groupby_dynam": [306, 913], "groupby_rol": [306, 913], "hash_row": 306, "hstack": 306, "insert_at_idx": 306, "is_dupl": [306, 800, 1308], "is_empti": [306, 1308], "is_uniqu": [306, 800, 1308], "iter_column": 306, "iter_slic": 306, "melt": [306, 913], "merge_sort": [306, 913], "n_uniqu": [306, 322, 800, 1308], "pipe": [306, 800, 913], "plot": [306, 862, 874, 913, 1308], "hvplottabularpolar": [306, 1308], "defer": [306, 309, 1308, 1312], "galleri": [306, 309, 1308, 1312], "scatter": [306, 309, 1202, 1308], "speci": [306, 309], "setosa": [306, 309], "versicolor": [306, 309], "stock_1": [306, 309], "stock_2": [306, 309], "quantil": [306, 596, 615, 800, 913, 1173, 1190, 1308], "replace_at_idx": 306, "select_seq": [306, 913], "shift_and_fil": [306, 800, 913, 1308], "shrink_to_fit": [306, 1308], "take_everi": [306, 800, 913, 1308], "to_dummi": [306, 1308], "to_numpi": [306, 549, 800, 1308], "to_panda": [306, 1308], "to_struct": [306, 648], "to_torch": [306, 1308], "unnest": [306, 389, 596, 606, 648, 649, 672, 673, 694, 800, 913, 958, 993, 1147, 1173, 1182, 1252, 1253, 1308], "unstack": 306, "with_columns_seq": [306, 913], "with_row_count": [306, 913], "write_avro": 306, "write_databas": 306, "write_delta": 306, "write_excel": 306, "write_ipc_stream": 306, "write_json": 306, "write_parquet": 306, "cum_prod": [314, 386, 800, 990, 1308], "ghi": [314, 648, 800, 918, 1228], "94": [315, 800], "to_uppercas": [316, 578, 649, 800], "confus": [317, 487, 489, 666, 800], "kleen": [317, 319, 714, 715, 716, 717, 800, 922, 923, 1308], "bitwis": [318, 587, 713, 714, 715, 716, 717, 800], "upcast": [320, 800], "skip_nul": [321, 551, 800, 925, 1155, 1308], "pass_nam": [321, 551, 800], "mapelementsstrategi": [321, 551, 800], "thread_loc": [321, 551, 800], "unknown": [321, 647, 761, 800, 1227], "alpha": [321, 450, 452, 453, 800, 830, 832, 862, 874, 913, 1058, 1060, 1061, 1308], "stage": [321, 800], "code": [321, 359, 360, 361, 362, 363, 391, 551, 624, 800, 826, 832, 850, 913, 1203, 1308], "gil": [321, 551, 800], "approx": [322, 800], "1005": [322, 800], "invers": [323, 324, 325, 326, 327, 328, 800, 926, 927, 928, 929, 930, 931, 1289, 1308], "cosin": [323, 324, 374, 375, 549, 800, 926, 927, 981, 982, 1308], "570796": [323, 325, 800, 926, 928, 1308], "hyperbol": [324, 326, 328, 375, 631, 702, 800, 927, 929, 931, 982, 1212, 1283, 1308], "sine": [325, 326, 549, 630, 631, 800, 928, 929, 1211, 1212, 1308], "881374": [326, 800, 929, 1308], "tangent": [327, 328, 701, 702, 800, 930, 931, 1282, 1283, 1308], "785398": [327, 721, 722, 800, 930, 1308], "rank": [331, 509, 723, 729, 748, 800, 934, 1117, 1308], "arg_wher": [332, 800], "subarrai": [334, 335, 937, 938], "membership": [338, 504, 941, 1112], "number_of_two": [339, 506], "null_on_oob": [342, 512, 514, 537, 945, 1120, 1122, 1145], "sublist": [342, 501, 502, 504, 507, 511, 512, 513, 514, 515, 516, 517, 527, 532, 536, 537, 539, 945, 1089, 1109, 1110, 1112, 1115, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1135, 1140, 1144, 1145, 1147, 1308], "x_y": [343, 516], "707107": [352, 452, 617, 800, 955, 1060, 1308], "i8": [354, 355, 404, 408, 412, 415, 417, 419, 422, 425, 426, 429, 443, 444, 538, 627, 773, 776, 791, 800, 957, 958, 995, 1007, 1011, 1024, 1026, 1033, 1036, 1050, 1051, 1146, 1181, 1295, 1308], "field_0": [355, 539, 958, 1147], "field_1": [355, 539, 958, 1147], "field_n": [355, 539, 958, 1147], "n0": [355, 539], "n1": [355, 539], "c1": 355, "c2": 355, "c3": 355, "seen": [358, 465, 800], "substr": [359, 362, 363, 639, 645, 650, 664, 665, 670, 671, 672, 673, 674, 918, 961, 964, 965, 1219, 1225, 1230, 1244, 1245, 1250, 1251, 1252, 1253, 1254], "ends_with": [359, 363, 639, 674, 918, 1254], "yellow": [359, 360, 361, 362, 363], "x00": [359, 360, 361, 362, 363, 643, 961, 962, 963, 964, 965, 1223], "xff": [359, 360, 361, 362, 363, 643, 961, 962, 963, 964, 965, 1223], "contains_with_lit": 359, "contains_with_expr": 359, "transferencod": [360, 361, 643, 644, 962, 963, 1223, 1224], "hex": [360, 361, 643, 644, 686, 962, 963, 1223, 1224, 1266], "base64": [360, 361, 643, 644, 962, 963, 1223, 1224], "000000": [360, 361, 643, 962, 963, 1223], "ffff00": [360, 361, 643, 962, 963, 1223], "0000ff": [360, 361, 643, 962, 963, 1223], "anywher": [362, 363, 681, 683, 684, 1261, 1263, 1264], "ends_with_lit": 362, "ends_with_expr": 362, "starts_with_lit": 363, "starts_with_expr": 363, "complex": [364, 365, 388, 704, 705, 800, 966, 992, 1292, 1308], "frac": [364, 365, 450, 452, 453, 632, 704, 705, 800, 966, 1058, 1060, 1061, 1213, 1292, 1308], "top_k_bi": [364, 365, 704, 800], "bottom_k_bi": [364, 704, 705, 800], "_btm_by_a": [365, 800], "_btm_by_b": [365, 800], "a_btm_by_a": [365, 800], "b_btm_by_a": [365, 800], "c_btm_by_a": [365, 800], "a_btm_by_b": [365, 800], "b_btm_by_b": [365, 800], "c_btm_by_b": [365, 800], "_by_ca": [365, 705, 800], "_by_cb": [365, 705, 800], "a_by_ca": [365, 705, 800], "b_by_ca": [365, 705, 800], "c_by_ca": [365, 705, 800], "a_by_cb": [365, 705, 800], "b_by_cb": [365, 705, 800], "c_by_cb": [365, 705, 800], "to_fram": [367, 407, 428, 433, 442, 681, 993, 1173, 1198, 1201, 1252, 1253, 1261, 1308], "259921": [369, 800, 973, 1308], "587401": [369, 800], "numericliter": [371, 372, 373, 800, 977, 978, 979, 1308], "temporalliter": [371, 372, 373, 800, 977, 978, 979, 1016, 1017, 1308], "outsid": [371, 800, 977, 1308], "clip": [372, 373, 800, 978, 979, 1308], "543081": [375, 800, 982, 1308], "cotang": [376, 800, 983, 1308], "cumul": [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 732, 733, 734, 735, 736, 737, 738, 739, 740, 800, 984, 985, 986, 987, 988, 989, 990, 991, 1308], "cum_count_revers": [378, 800], "cum_max_revers": [379, 800], "cum_max_all_fil": [379, 800], "cum_min_revers": [380, 800], "cum_prod_revers": [381, 800], "cum_sum_revers": [382, 800], "value_cum_sum": [382, 800], "value_cum_sum_all_fil": [382, 800], "cum_count": [383, 800, 1308], "cum_max": [384, 800, 988, 1308], "cum_min": [385, 800, 989, 1308], "cum_sum": [387, 476, 695, 736, 739, 800, 845, 913, 991, 1103, 1308], "min_period": [388, 450, 452, 453, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 777, 778, 800, 992, 1058, 1060, 1061, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "slide": [388, 800, 992, 1308], "slot": [388, 392, 507, 800, 992, 995, 1115, 1308], "realli": [388, 640, 666, 800, 992, 1220, 1246, 1308], "visit": [388, 800, 992, 1308], "left_clos": [389, 596, 800, 993, 1173, 1308], "include_break": [389, 596, 800, 993, 1173, 1308], "bin": [389, 474, 596, 686, 713, 793, 800, 993, 1077, 1173, 1266, 1302, 1308], "discret": [389, 392, 447, 474, 507, 527, 596, 800, 993, 995, 1055, 1077, 1115, 1135, 1173, 1308], "plu": [389, 544, 800, 993, 1152, 1173, 1308], "endpoint": [389, 596, 800, 993, 1173, 1308], "observ": [389, 450, 451, 452, 453, 596, 800, 993, 1058, 1059, 1060, 1061, 1173, 1308], "fall": [389, 596, 800, 993, 1173, 1308], "qcut": [389, 800, 993, 1308], "breakpoint": [389, 474, 596, 800, 993, 1077, 1173, 1308], "brk": [389, 596, 800], "foo_bin": [389, 596, 800], "radian": [390, 721, 800], "720": [390, 598, 800], "540": [390, 598, 800], "360": [390, 598, 800], "180": [390, 598, 800], "pickl": [391, 800, 826, 913], "circumst": [391, 800, 826, 913], "secur": [391, 800, 826, 913], "implic": [391, 800, 826, 913], "trust": [391, 800, 826, 913], "meta": [391, 800], "ba": [391, 454, 562, 674, 749, 800, 918], "null_behavior": [392, 507, 800, 995, 1115, 1308], "nullbehavior": [392, 507, 800, 995, 1115, 1308], "drop_nan": [395, 800, 998, 1308], "week_mask": [396, 725, 999], "holidai": [396, 725, 999], "busi": [396, 725, 999], "handi": [396, 725, 999], "pip": [396, 725, 999], "dutch": [396, 725, 999], "my_holidai": [396, 725, 999], "country_holidai": [396, 725, 999], "nl": [396, 725, 999], "2025": [396, 725, 918, 999], "business_day_count": [396, 999], "land": [396, 999], "weekend": [396, 725, 999], "rolled_forward": 396, "vari": [397, 1000, 1317], "rare": [397, 1000], "switch": [397, 1000], "samoa": [397, 1000], "apia": [397, 1000], "did": [397, 1000], "2011": [397, 1000], "dst_offset": [397, 1000], "2012": [397, 1000], "replace_time_zon": [397, 403, 406, 1005, 1006, 1039], "pacif": [397, 1000], "11h": [397, 1000], "13h": [397, 1000], "lose": [398, 1001], "time_unit_m": [398, 1001], "time_unit_n": [398, 1001], "999": [399, 414, 918, 1002, 1020, 1317], "1897": [399, 414, 1002, 1020], "3002": [399, 414, 1002, 1020], "cent": 399, "0999": [399, 414], "naiv": [400, 401, 1003, 1004, 1264], "compon": [400, 429, 681, 684, 747, 1003, 1036, 1261, 1264], "resolv": 400, "tm": [400, 918], "456000": [400, 1003], "101000": 400, "d1": 400, "d2": 400, "d3": 400, "europ": [401, 406, 427, 1004, 1009, 1034], "london": [401, 406, 427, 1004, 1009, 1034], "gmt": [401, 406, 427, 1004, 1009, 1034], "bst": [401, 406, 427, 1004, 1009, 1034], "1978": [402, 403, 408, 411, 412, 415, 417, 422, 429, 432, 446], "500_000": [402, 403, 408, 412, 415, 417, 422, 429, 432], "2065": [402, 403, 408, 412, 415, 417, 422, 429, 432], "60_000": [402, 403, 408, 412, 415, 417, 422, 429, 432], "060": [402, 403, 408, 412, 415, 417, 422, 429, 432], "weekdai": [404, 425], "ordinal_dai": [404, 444], "day_of_month": [404, 425, 444], "day_of_year": [404, 425, 444], "356": [404, 425, 444], "357": [404, 425, 444], "358": [404, 425, 444], "359": [404, 425, 444], "total_dai": [405, 1008], "base_utc_offset": [406, 1009], "0m": [406, 1009], "epochtimeunit": [407, 753, 1010], "epoch_n": [407, 1010], "epoch_": [407, 1010], "978307200000000": [407, 433, 1010, 1040], "978307200": [407, 1010], "978393600000000": [407, 433, 1010, 1040], "978393600": [407, 1010], "978480000000000": [407, 433, 1010, 1040], "978480000": [407, 1010], "total_hour": [409, 1012], "leap": [410, 424, 1013, 1031], "leap_year": 410, "iso": [411, 443, 444, 1014, 1050, 1051], "1977": [411, 446], "1979": [411, 446], "calendar_year": [411, 446], "1976": [411, 446], "500000": [412, 1018], "60000": 412, "total_microsecond": [413, 1019], "mlnm": 414, "total_millisecond": [416, 1022], "total_minut": [418, 1025], "think": [420, 421, 1027, 1028], "vectoris": [420, 421, 1027, 1028], "tseri": [420, 421, 1027, 1028], "monthend": [420, 1027], "rollforward": [420, 1027], "monthbegin": [421, 1028], "rollback": [421, 1028], "500000000": [422, 1029], "60000000": 422, "total_nanosecond": [423, 1030], "minu": [424, 584, 800, 1031], "dictat": [424, 800, 917, 1031], "2005": [424, 1031], "date_plus_1i": [424, 1031], "1y2mo": [424, 1031], "date_min": 424, "1998": [424, 1031], "2003": [424, 753, 1031], "2004": [424, 1031], "2006": [424, 1031], "new_dat": 424, "ordin": [425, 599, 800, 1032, 1175, 1308], "366": [425, 1032], "use_earliest": [427, 442, 681, 684, 744, 1034, 1049, 1261, 1264], "non_exist": [427, 1034], "nonexist": [427, 1034], "convert_time_zon": [427, 1034], "london_timezon": [427, 1034], "amsterdam": [427, 1034], "london_to_amsterdam": [427, 1034], "cet": [427, 1034], "cest": [427, 1034], "ts_local": [427, 1034], "brussel": [427, 1034], "localis": [428, 442, 1049], "dst": [428, 442, 1035, 1049], "cst": [428, 442, 1035, 1049], "cdt": [428, 442, 1035, 1049], "safe": [428, 442, 601, 800, 1035, 1049, 1177, 1264, 1288, 1289, 1308], "225": [428, 442], "10m": [428, 442, 1035, 1049], "milli": [429, 1036], "micro": [429, 1036], "total_second": [430, 1037], "to_str": [431, 1038], "datetime_str": [431, 434], "day_nam": [431, 434], "month_nam": [431, 434], "march": [431, 434, 1038, 1041], "april": [431, 434, 1038, 1041], "timestamp_u": [433, 1040], "timestamp_m": 433, "978307200000": 433, "978393600000": 433, "978480000000": 433, "strftime": [434, 1041], "days_diff": 435, "hours_diff": 436, "200m": [437, 438, 440], "milliseconds_diff": [437, 438, 440], "200": [437, 438, 440, 603, 800, 1179, 1186, 1187, 1189, 1308], "200000": [437, 853, 913], "800": [437, 438, 440], "minutes_diff": 439, "1440": [439, 1046], "200000000": 440, "seconds_diff": 441, "truncate_str": 442, "truncate_td": 442, "53": [443, 1050], "time_unit_u": 445, "32971": [445, 1052], "32974": [445, 1052], "32976": [445, 1052], "iso_year": 446, "pk": [447, 800, 1055, 1308], "probabl": [447, 596, 800, 1055, 1173, 1308], "459148": [447, 800], "754888": [447, 800], "span": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "half_lif": [450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "adjust": [450, 452, 453, 632, 800, 1058, 1060, 1061, 1213, 1308], "exponenti": [450, 451, 452, 453, 455, 593, 800, 1058, 1059, 1060, 1061, 1062, 1308], "weight": [450, 451, 452, 453, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 632, 800, 1058, 1059, 1060, 1061, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1213, 1308], "decai": [450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "term": [450, 452, 453, 651, 670, 682, 800, 1058, 1060, 1061, 1231, 1250, 1262, 1308], "mass": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "gamma": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "foral": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "geq": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "theta": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "life": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "exp": [450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "ln": [450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "smooth": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "factor": [450, 452, 453, 703, 800, 1058, 1060, 1061, 1291, 1308], "leq": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "imbal": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "ew": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "w_i": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "recurs": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "y_t": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "y_": [450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "x_t": [450, 452, 453, 800, 1058, 1060, 1061, 1308], "x_2": [450, 451, 452, 453, 800, 1058, 1059, 1060, 1061, 1308], "428571": [450, 800, 1058, 1308], "ldot": [451, 800, 1059, 1308], "x_n": [451, 800, 1059, 1308], "t_2": [451, 800, 1059, 1308], "ewma": [451, 800, 1059, 1308], "alpha_i": [451, 800, 1059, 1308], "t_i": [451, 800, 1059, 1308], "y_i": [451, 800, 1059, 1308], "x_i": [451, 800, 1059, 1308], "quad": [451, 800, 1059, 1308], "370h": [451, 800, 1059, 1308], "4d": [451, 800, 1059, 1308], "292893": [451, 800, 1059, 1308], "492474": [451, 800, 1059, 1308], "254508": [451, 800, 1059, 1308], "bia": [452, 453, 494, 616, 632, 800, 1060, 1061, 1104, 1191, 1213, 1308], "unbias": [452, 453, 800, 1060, 1061, 1308], "963624": [452, 800, 1060, 1308], "928571": [453, 800, 1061, 1308], "wildcard": [454, 733, 734, 737, 738, 751, 775, 800, 917], "regex": [454, 557, 639, 641, 642, 645, 647, 648, 649, 650, 664, 665, 674, 749, 800, 918, 1219, 1221, 1222, 1225, 1227, 1228, 1229, 1230, 1244, 1245, 1254], "aa": [454, 639, 650, 749, 800, 994, 1219, 1230, 1308], "cc": [454, 749, 800, 994, 1308], "718282": [455, 800, 1062, 1308], "389056": [455, 800, 1062, 1308], "54": [455, 800, 1104, 1308, 1317], "59815": [455, 800], "extrem": [457, 610, 800, 1065, 1185, 1308], "expressioin": [457, 800, 1065, 1308], "group_col": [460, 712, 800], "g1": [460, 712, 800], "g2": [460, 712, 800], "lt": [460, 712, 800, 1308], "gte": [460, 712, 800], "n_1": [460, 800], "n_2": [460, 800], "n_3": [460, 800], "exprlistnamespac": [462, 800], "divis": [464, 706, 800], "truediv": [464, 800], "deseri": [466, 562, 800, 870, 913], "enclos": [466, 800], "9774092659964970114": [472, 800], "13614470193936745724": [472, 800], "1101441246220388612": [472, 800], "11638928888656214026": [472, 800], "13382926553367784577": [472, 800], "bin_count": [474, 800, 1077, 1308], "include_categori": [474, 800, 1077, 1308], "include_breakpoint": [474, 800, 1077, 1308], "occurr": [474, 481, 482, 485, 486, 710, 800, 1077, 1086, 1087, 1092, 1093, 1296, 1308], "interpolationmethod": [477, 800, 1080, 1308], "regrid": [477, 800], "grid": [477, 800], "df_original_grid": [477, 800], "grid_point": [477, 800], "df_new_grid": [477, 800], "satisfi": [478, 800, 1081, 1308], "conflat": [478, 800], "between_ab": [478, 800], "finit": [480, 706, 729, 800, 1085, 1308], "is_first_distinct": [481, 800, 1086, 1308], "optional_memb": [483, 800, 1089, 1308], "infinit": [484, 706, 800, 1090, 1308], "is_last_distinct": [485, 800, 1092, 1308], "_isnan": [487, 800], "b_isnan": [487, 800], "negat": [488, 585, 800, 1167, 1308], "_is_not_nan": [489, 800], "b_is_not_nan": [489, 800], "_not_nul": [490, 800], "a_not_nul": [490, 800], "b_not_nul": [490, 800], "_isnul": [491, 800], "a_isnul": [491, 800], "b_isnul": [491, 800], "undo": [493, 564, 571, 572, 574, 576, 578, 579, 594, 696, 800], "fisher": [494, 632, 800, 1104, 1213, 1308], "fourth": [494, 800, 1104, 1308], "subtract": [494, 695, 800, 1104, 1308], "distribut": [494, 632, 800, 1104, 1213, 1308], "elimin": [494, 800, 1104, 1308], "bias": [494, 632, 800, 1104, 1213, 1308], "scipi": [494, 632, 800, 1104, 1213, 1308, 1312], "stat": [494, 632, 800, 870, 913, 1104, 1213, 1308], "153061": [494, 800], "blindli": [509, 1117], "worth": [509, 1117], "enough": [509, 632, 800, 1117, 1213, 1308], "concat_list": [509, 748], "exprnamespac": 510, "cheaper": [512, 537, 1120, 1145], "symmetr": [529, 1137], "sdiff": 529, "taken": [532, 670, 1140, 1250], "363961": [534, 1142], "n_field_strategi": [539, 1147], "tostructstrategi": [539, 1147], "first_non_nul": [539, 1147], "max_width": [539, 1147], "pre": [539, 551, 596, 773, 776, 791, 800, 1173, 1308], "obtain": 539, "ok": 539, "longest": 539, "logarithm": [542, 543, 544, 800, 1150, 1151, 1152, 1308], "584963": [542, 800], "30103": [543, 800], "60206": [543, 800], "natur": [544, 800, 1152, 1308], "693147": [544, 800, 1150, 1152, 1308], "098612": [544, 800, 1150, 1152, 1308], "386294": [544, 800, 1152, 1308], "lowest": [545, 800], "9223372036854775808": [545, 800], "agg_list": [547, 549, 800], "map_batch": [547, 762, 800, 852, 913], "keep_nam": [548, 800], "a_revers": [548, 572, 576, 605, 696, 800], "b_revers": [548, 572, 576, 605, 696, 800], "rstrip": [548, 572, 800], "_revers": [548, 572, 576, 605, 696, 800], "is_elementwis": [549, 800, 917], "whole": [549, 634, 635, 647, 800, 901, 913, 1227], "elementwis": [549, 609, 610, 611, 612, 614, 618, 800, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "third": [549, 800], "parti": [549, 800], "book": [549, 800], "invok": [549, 800], "bug": [549, 551, 800, 852, 853, 895, 901, 913, 1155, 1308], "argmax": [549, 800], "remap": [550, 800, 1154, 1308], "lookup": [550, 796, 800, 1154, 1308], "discourag": [551, 800], "loop": [551, 800], "a_times_2": [551, 800], "tip": [551, 800], "again": [551, 800], "exprmetanamespac": [555, 558], "foo_bar2": [555, 558], "raise_if_undetermin": 559, "computeerror": [559, 663, 686, 1243, 1266], "e_filt": [559, 561], "e_sum_ov": [559, 561], "e_sum_slic": [559, 561], "groupstorow": 562, "tree": [563, 830, 913], "modulu": [567, 800], "xlog2": [569, 593, 800], "purpos": [570, 800, 821, 832, 913], "x_uniqu": [570, 800], "y_uniqu": [570, 800], "reverse_": [574, 594, 800], "reverse_a": [574, 594, 800], "reverse_b": [574, 594, 800], "prefix_": 575, "prefix_a": 575, "prefix_b": 575, "_suffix": 577, "a_suffix": 577, "b_suffix": 577, "lowercas": [578, 687, 1267], "uppercas": [579, 690, 1270], "to_lowercas": 579, "poison": [580, 581, 800, 1164, 1165, 1308], "nanmax": [580, 581, 800, 1164, 1165, 1308], "inequ": [582, 800], "ne": [583, 800, 1308], "unari": [584, 800], "350": [586, 800, 1187, 1308], "650": [586, 800], "850": [586, 800], "more_expr": [588, 723, 726, 727, 728, 800], "mapping_strategi": [588, 800], "windowmappingstrategi": [588, 800], "group_to_row": [588, 800], "outcom": [588, 800], "group_dtyp": [588, 800], "warn": [588, 611, 612, 613, 614, 615, 617, 618, 619, 800, 1308], "_max": [588, 800], "c_max": [588, 800], "_min": [588, 800], "c_min": [588, 800], "sort_bi": [588, 800], "percent": [589, 800, 1169, 1308], "090909": [589, 800], "extract_numb": [592, 800], "scale_negative_even": [592, 800], "expon": [593, 800, 1308], "allow_dupl": [596, 800, 1173, 1308], "duplicateerror": [596, 800, 1173, 1308], "cut": [596, 800, 1173, 1308], "566371": [598, 800], "424778": [598, 800], "283185": [598, 800], "141593": [598, 800, 926, 1308], "rankmethod": [599, 800, 1175, 1308], "ti": [599, 800, 1175, 1308], "competit": [599, 800, 1175, 1308], "highest": [599, 709, 729, 800, 913, 1175, 1308], "immedi": [599, 720, 724, 742, 743, 745, 746, 757, 758, 773, 776, 782, 787, 788, 791, 800, 1175, 1308], "nodefault": [603, 800, 1179, 1308], "_nodefault": [603, 800, 1179, 1308], "no_default": [603, 800, 1179, 1308], "fruits_revers": [605, 800], "cars_revers": [605, 800], "rle_id": [606, 800, 1308], "rle": [607, 800, 1183, 1308], "rle_id_a": [607, 800], "rle_id_ab": [607, 800], "window_s": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 777, 778, 800, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1308], "rolling_map": [609, 800, 1184, 1308], "multipli": [609, 610, 611, 612, 614, 617, 618, 619, 800, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1308], "rolling_sum": [610, 800, 1185, 1308], "nansum": [610, 800, 1185, 1308], "warn_if_unsort": [611, 612, 613, 614, 615, 617, 618, 619, 800], "travers": [611, 612, 614, 618, 800, 1186, 1187, 1189, 1192, 1193, 1194, 1308], "vector": [611, 612, 614, 618, 800, 1186, 1187, 1189, 1192, 1193, 1194, 1308], "5h": [611, 612, 613, 614, 615, 617, 618, 619, 800], "df_tempor": [611, 612, 614, 617, 618, 619, 800], "rolling_row_max": [611, 800], "2h": [611, 612, 614, 617, 618, 619, 800], "closur": [611, 612, 617, 618, 619, 800], "rolling_row_mean": [612, 800], "rolling_row_min": [614, 800], "625": [615, 800], "skew": [616, 800, 1191, 1308], "381802": [616, 800, 1191, 1308], "47033": [616, 800, 1191, 1308], "38180177416060584": [616, 800, 1191, 1308], "47033046033698594": [616, 800, 1191, 1308], "433013": [617, 800, 878, 913], "rolling_row_std": [617, 800], "rolling_row_sum": [618, 800], "39": [618, 753, 800], "57": [618, 800, 1195, 1308, 1317], "63": [618, 800], "69": [618, 800, 1104, 1308], "1875": [619, 800, 886, 913], "rolling_row_var": [619, 800], "figur": [621, 800, 874, 913, 1196, 1308], "01234": [621, 800, 1196, 1308], "012": [621, 800, 1196, 1308], "1200": [621, 800, 1196, 1308], "searchsortedsid": [623, 800, 1199, 1308], "leftmost": [623, 800, 1199, 1308], "rightmost": [623, 800, 1199, 1308], "six": [623, 800], "extrema": [627, 800, 1207, 1308], "112": [627, 800, 1317], "129": [627, 800], "8589934592": [627, 800], "1073741824": [627, 800], "175201": [631, 800, 1212, 1308], "unimod": [632, 800, 1213, 1308], "skewtest": [632, 800, 1213, 1308], "speak": [632, 800, 1213, 1308], "g_1": [632, 800, 1213, 1308], "m_3": [632, 800, 1213, 1308], "m_2": [632, 800, 1213, 1308], "m_i": [632, 800, 1213, 1308], "sum_": [632, 800, 1213, 1308], "texttt": [632, 800, 1213, 1308], "k_3": [632, 800, 1213, 1308], "k_2": [632, 800, 1213, 1308], "sqrt": [632, 721, 722, 800, 1213, 1308], "343622": [632, 800], "value1": [635, 800], "value2": [635, 800], "attain": [635, 800], "414214": [636, 800, 1216, 1308], "sensit": [639, 648, 650, 664, 665, 1219, 1228, 1230, 1244, 1245], "ilmsuxu": [639, 647, 648, 650, 664, 665, 1219, 1227, 1228, 1230, 1244, 1245], "default_match": [639, 650], "insensitive_match": [639, 650], "crab": [639, 650, 1219, 1230], "dog": [639, 687, 690, 728, 1219, 1267, 1270], "rab": [639, 667, 1219, 1247], "ascii_case_insensit": [640, 666, 1220, 1246], "aho": [640, 666, 1220, 1246], "corasick": [640, 666, 1220, 1246], "insensit": [640, 648, 664, 665, 666, 918, 1219, 1220, 1228, 1230, 1244, 1245, 1246], "set_fmt_str_length": [640, 666, 1220, 1246], "lyric": [640, 666, 1220, 1246], "everybodi": [640, 666, 1220, 1246], "tell": [640, 666, 1220, 1246], "me": [640, 666, 1220, 1246], "feel": [640, 666, 1220, 1246], "love": [640, 666, 1220, 1246], "tonight": [640, 666, 1220, 1246], "success": [641, 642, 648, 1221, 1222, 1228], "overlap": [641, 642, 648, 1221, 1222, 1228], "bla": [642, 648, 1222, 1228], "asd": [642, 648, 1222, 1228], "678": [642, 648, 1222, 1228], "910t": [642, 648, 1222, 1228], "count_digit": 642, "dbc": [642, 1222], "3xy": [642, 1222], "1zy3": [642, 1222], "strings_hex": 644, "666f6f": [644, 1224], "626172": [644, 1224], "mango": [645, 674, 1225, 1254], "has_suffix": 645, "le": [645, 800, 1308], "nu": 645, "group_index": [647, 1227], "captur": [647, 649, 664, 665, 1227, 1229, 1244, 1245], "nthose": [647, 1227], "nodd": [647, 1227], "nthe": [647, 1227], "odd": 647, "vote": [647, 649, 1227, 1229], "ballon_dor": [647, 649, 1227, 1229], "404": [647, 649, 1227, 1229], "ref": [647, 649, 1227, 1229], "candid": [647, 649, 1227, 1229], "messi": [647, 649, 1227, 1229], "ronaldo": [647, 1227], "haystack": [648, 1228], "email": [648, 1228], "real": [648, 1228], "some_account": [648, 1228], "somewher": [648, 1228], "net": [648, 1228], "jkl": [648, 1228], "uvw": [648, 1228], "co": [648, 800, 1228, 1308], "uk": [648, 1228], "address": 648, "xi": [648, 1228], "quantifi": [648, 1228], "email_part": [648, 1228], "extracted_nr": 648, "unnam": [649, 1229], "weghorst": [649, 1229], "err": 649, "lobster": [650, 1230], "crustaceon": [650, 1230], "pat": [650, 1230], "bc": [650, 665, 783, 1230], "aeiuo": [650, 1230], "find_pat": 650, "fewer": [651, 682, 832, 913, 1231, 1262], "pear": [651, 670, 682, 1231, 1250, 1262], "papaya": [651, 670, 682, 1231, 1250, 1262], "dragonfruit": [651, 670, 682, 1231, 1250, 1262], "s_head_5": 651, "papai": [651, 1231], "drago": [651, 1231], "s_head_n": 651, "pea": 651, "papa": 651, "dragon": 651, "json_path_match": [652, 1232], "jsonpath": [652, 654, 1232, 1234], "json_decod": [653, 1233], "json_path": [654, 1234], "json_val": [654, 1234], "len_char": [655, 660, 1235, 1240], "_o": [655, 656, 1235, 1236], "caf\u00e9": [655, 656, 1235, 1236], "345": [655, 656, 1235, 1236], "\u6771\u4eac": [655, 656, 1235, 1236], "n_byte": [655, 656], "n_char": [655, 656], "fill_char": [658, 661, 662, 668, 1238, 1241, 1242, 1248], "justifi": [658, 668, 1238, 1248], "pad_end": [658, 662, 1238, 1242], "strip_chars_start": [659, 677, 679, 1239], "pad": [661, 662, 691, 1241, 1242, 1271], "reach": [661, 662, 691, 1241, 1242, 1271], "pad_start": [661, 668, 691, 1241, 1248, 1271], "cow": [661, 662, 1241, 1242], "monkei": [661, 662, 1241, 1242], "hippopotamu": [661, 662, 1241, 1242], "zfill": [662, 713, 800, 1242], "radix": [663, 686, 1243, 1266], "parseerror": [663, 686, 1243, 1266], "to_integ": [663, 1243], "silent": [663, 686, 1243, 1266], "replace_al": [664, 1244], "dollar": [664, 665, 1244, 1245], "123abc": [664, 1244, 1245], "abc456": [664, 1244, 1245], "hat": [664, 665, 1244, 1245], "hut": [664, 665, 1244, 1245], "vowel": [664, 665, 1244, 1245], "bad": [664, 665, 1244, 1245], "bud": [664, 665, 1244, 1245], "citi": [664, 665], "philadelphia": [664, 665], "season": [664, 665], "spring": [664, 665], "summer": [664, 665], "autumn": [664, 665], "winter": [664, 665], "weather": [664, 665, 1244, 1245], "raini": [664, 665, 1244, 1245], "sunni": [664, 665, 1244, 1245], "cloudi": [664, 665], "snowi": [664, 665], "foggi": [664, 665, 1244, 1245], "abcabc": 665, "123a123": 665, "replace_with": [666, 1246], "broadcast": [666, 918, 1246], "removes_pronoun": 666, "man": [667, 1247], "ana": [667, 1247], "oof": [667, 1247], "anan": [667, 1247], "am": [667, 1247], "strip_chars_end": [669, 678, 680, 1249], "ear": [670, 682, 1250], "aya": [670, 1250, 1262], "uit": [670, 1250], "ya": [670, 1250], "onf": [670, 1250], "foo_bar_baz": 671, "split_inclus": 671, "foo_": [671, 752], "bar_": 671, "a_1": [672, 1252, 1285, 1308], "d_4": [672, 1252], "rename_field": [672, 673, 993, 1173, 1252, 1253, 1308], "first_part": [672, 673, 1252, 1253], "second_part": [672, 673, 1252, 1253], "remaind": [673, 1253], "app": [674, 1254], "has_prefix": 674, "strip_char": [675, 1255], "nworld": 676, "foo_strip": 676, "ow": 676, "hell": [676, 1256], "rld": [676, 678, 1258], "strip_suffix": [677, 679], "foo_strip_end": 677, "oldw": 677, "he": 677, "abcdeff": 677, "fed": 677, "strip_prefix": [678, 680], "tworld": [678, 1256, 1258], "foo_strip_start": 678, "wod": [678, 1258], "aabcdef": 678, "cba": 678, "foobar": [679, 680, 1259, 1260], "foofoobar": [679, 1259], "foobarbar": [680, 1260], "polarstemporaltyp": [681, 1261], "penalti": [681, 683, 684, 1261, 1263, 1264], "clean": [681, 683, 684, 1261, 1263, 1264], "beforehand": [681, 683, 684, 1261, 1263, 1264], "certainli": [681, 683, 684, 1261, 1263, 1264], "00z": [681, 684, 1261, 1264], "sun": [681, 1261], "jul": [681, 1261], "s_tail_5": 682, "apaya": [682, 1262], "s_tail_n": 682, "paya": 682, "nfruit": 682, "inference_length": [685, 1265], "3420": [685, 1265], "120134": [685, 1265], "3212": [685, 1265], "143": [685, 1265, 1317], "numbers_decim": 685, "110": [686, 1266], "fa1e": [686, 1266], "ff00": [686, 1266], "cafe": [686, 1266], "64030": [686, 1266], "65280": [686, 1266], "51966": [686, 1266], "variant": [687, 689, 690, 1091, 1308], "foo_low": 687, "titlecas": [689, 1269], "sing": [689, 1269], "welcom": [689, 1269], "THERE": [689, 1269], "NO": [689, 918, 1269], "foo_titl": 689, "There": [689, 1269], "foo_upp": 690, "999999": [691, 744, 786, 787, 788, 918, 1271], "0123": [691, 1271], "cd": [692, 694], "struct_col": [692, 694], "www": 694, "xxx": 694, "yyi": 694, "zzz": 694, "obvious": 694, "structfieldnotfounderror": 694, "761594": [702, 800, 1283, 1308], "replic": [703, 800, 1291, 1308], "vals_phys": [703, 800], "_top_by_a": [705, 800], "_top_by_b": [705, 800], "a_top_by_a": [705, 800], "b_top_by_a": [705, 800], "c_top_by_a": [705, 800], "a_top_by_b": [705, 800], "b_top_by_b": [705, 800], "c_top_by_b": [705, 800], "floordiv": [706, 800], "ieee": [706, 800], "754": [706, 800], "mathemat": [706, 748, 800], "undefin": [706, 800], "On": [706, 800], "operand": [706, 800], "infin": [706, 800], "value_count": [708, 800, 1308], "9223372036854775807": [709, 800], "binary_str": [713, 800], "250": [713, 800, 1187, 1308, 1317], "bin_x": [713, 800], "bin_i": [713, 800], "xor_xi": [713, 800], "bin_xor_xi": [713, 800], "00001010": [713, 800], "00001011": [713, 800], "00001000": [713, 800], "00000010": [713, 800], "11111010": [713, 800], "00000011": [713, 800], "249": [713, 800], "11111001": [713, 800], "01000010": [713, 800], "00000100": [713, 800], "01000110": [713, 800], "OR": [716, 717, 835, 913, 918], "any_horizont": 716, "returns_scalar": [718, 764, 800, 917], "polarsintegertyp": [720, 757, 758], "arctan": [721, 722, 800, 1308], "angl": [721, 722], "plane": [721, 722], "rai": [721, 722], "tworoottwo": [721, 722], "arctan2d": 721, "atan2d": [721, 722], "atan2": [721, 722], "135": [721, 722], "356194": [721, 722], "arctan2": 722, "arg_tru": [724, 800, 1308], "oppos": 725, "mimic": 727, "a_lag_": 727, "a_rol": 727, "swim": 728, "walk": 728, "full_sent": 728, "correlationmethod": 729, "propagate_nan": 729, "spearman": 729, "544705": 729, "covari": [731, 778, 800, 917], "acc": [733, 734, 737, 738, 751, 775], "include_init": [733, 737], "accumul": [733, 734, 737, 738, 751, 775], "fn": [733, 734, 737, 738, 751, 775], "new_valu": [733, 734, 737, 738, 751, 775], "cum_reduc": 733, "cumsum_horizont": 735, "cum_sum_horizont": 740, "granular": 742, "finer": 742, "permut": 742, "1985": [742, 745], "australia": 744, "sydnei": 744, "aedt": 744, "america": 745, "new_york": 745, "est": 745, "contrast": 747, "sometim": [747, 799], "tbl_width_char": 747, "120": 747, "add_week": 747, "add_dai": 747, "add_second": 747, "add_milli": 747, "add_hour": 747, "002": [747, 1044, 1045, 1047], "add_calendar_dai": 747, "add_calendar_month": 747, "mo": 747, "add_calendar_year": 747, "a_b_doubl": 748, "f_string": 752, "placehold": 752, "hello_": 752, "_world": 752, "_bar_": 752, "foo_a_bar_1": 752, "foo_b_bar_2": 752, "foo_c_bar_3": 752, "timestep": 753, "1666683077": 753, "1666683099": 753, "12345": [753, 974, 1070, 1195, 1308], "12346": 753, "agg_group": [754, 800], "allow_object": 761, "valueexcept": 761, "test_func": 763, "list_of_seri": 764, "my_custom_aggreg": 764, "understood": 764, "power": [780, 1308], "a_a": 780, "a_txt": 780, "605551": 781, "605551275463989": 781, "my_struct": 782, "elif": 790, "pick": 790, "met": 790, "own": [790, 1317], "isn": 790, "arr": [792, 1289, 1300, 1308], "technic": 796, "further": 796, "columnfactori": 796, "more_nam": 796, "__call__": 796, "helper": 796, "__getattr__": 796, "idiomat": [796, 901], "quick": [796, 994, 1308, 1317], "prototyp": 796, "keystrok": 796, "drawback": 796, "readabl": 796, "and_": 800, "arcco": [800, 1308], "arccosh": [800, 1308], "arcsin": [800, 1308], "arcsinh": [800, 1308], "arctanh": [800, 1308], "arg_max": [800, 1308], "arg_min": [800, 1308], "arg_sort": [800, 1308], "arg_uniqu": [800, 1308], "backward_fil": 800, "cbrt": [800, 1308], "clip_max": [800, 1308], "clip_min": [800, 1308], "cosh": [800, 1308], "cot": [800, 1308], "cumcount": 800, "cummax": [800, 1308], "cummin": [800, 1308], "cumprod": [800, 1308], "cumsum": [800, 1308], "cumulative_ev": [800, 1308], "entropi": [800, 1308], "eq_miss": [800, 1308], "ewm_mean": [800, 1308], "ewm_mean_bi": [800, 1308], "ewm_std": [800, 1308], "ewm_var": [800, 1308], "extend_const": [800, 1308], "flatten": 800, "from_json": 800, "ge": [800, 1308], "gt": [800, 1308], "hist": [800, 1308, 1312], "implod": [800, 1308], "inspect": [800, 913], "is_between": [800, 1308], "is_finit": [800, 1308], "is_first": [800, 1308], "is_infinit": [800, 1308], "is_last": [800, 1308], "is_nan": [800, 1308], "is_not": 800, "is_not_nan": [800, 1308], "is_not_nul": [800, 1308], "kurtosi": [800, 1308], "log10": [800, 1308], "log1p": [800, 1308], "map_alia": 800, "map_dict": [800, 1308], "mod": 800, "mul": 800, "nan_max": [800, 1308], "nan_min": [800, 1308], "ne_miss": [800, 1308], "or_": 800, "pct_chang": [800, 1308], "peak_max": [800, 1308], "peak_min": [800, 1308], "pow": [800, 1308], "register_plugin": 800, "lib": [800, 1284, 1308], "input_wildcard_expans": [800, 917], "cast_to_supertyp": [800, 917], "pass_name_to_appli": [800, 917], "changes_length": [800, 917], "register_plugin_funct": [800, 917], "guid": [800, 917, 1317], "serializ": [800, 917], "ran": [800, 917], "highli": [800, 917], "unsaf": [800, 917], "reinterpret": [800, 1308], "repeat_bi": 800, "rolling_appli": [800, 1308], "rolling_max": [800, 1308], "rolling_mean": [800, 1308], "rolling_median": [800, 1308], "rolling_min": [800, 1308], "rolling_quantil": [800, 1308], "rolling_skew": [800, 1308], "rolling_std": [800, 1308], "rolling_var": [800, 1308], "round_sig_fig": [800, 1308], "search_sort": [800, 1308], "shrink_dtyp": [800, 1308], "sin": [800, 1308], "sinh": [800, 1308], "tan": [800, 1308], "to_phys": [800, 971, 1308], "unique_count": [800, 1308], "xor": 800, "expos": 812, "miscellan": 812, "parametr": 812, "hit": [817, 913], "node": [817, 821, 845, 852, 853, 857, 862, 864, 913], "job": [817, 913], "background": [821, 913], "_eager": [821, 913], "_kwarg": [821, 913], "inprocessqueri": [821, 913], "cancel": [821, 913], "set_streaming_chunk_s": [821, 913], "collect_all_async": [822, 913], "snippet": [828, 913], "tree_format": [830, 913], "Be": [832, 913], "suscept": [832, 913], "lazygroupbi": [838, 839, 840, 841, 842, 843, 866, 913], "other_lf": [847, 913], "jan": [848, 913], "1st": [848, 913], "12th": [848, 913], "validate_output_schema": [852, 853, 913], "streamabl": [852, 853, 857, 913], "paramount": [852, 853, 913], "elig": [852, 853, 913], "invari": [853, 913], "upheld": [853, 913], "100_000": [853, 913], "199998": [853, 913], "199996": [853, 913], "199994": [853, 913], "199992": [853, 913], "show_plot": [862, 913], "truncate_nod": [862, 913], "figsiz": [862, 874, 913], "gantt": [862, 913], "group_by_partit": [862, 913], "470": [862, 913], "475": [862, 913], "1964": [862, 913], "swap": [864, 913], "mapfunct": [870, 913], "dataframescan": [870, 913], "output_schema": [870, 913], "output_path": [874, 913], "raw_output": [874, 913], "render": [874, 913], "download": [874, 913], "freeli": [877, 913], "c_c_c": [877, 913], "290994": [878, 913], "118034": [878, 913], "new_lf": [885, 913], "extern": [890, 913], "lf_other": [890, 913], "afoo": [890, 913], "cfoo": [890, 913], "train_lf": [890, 913], "feature_0": [890, 913], "feature_1": [890, 913], "test_lf": [890, 913], "_train": [890, 913], "feature_0_train": [890, 913], "opaqu": 901, "my_column": 901, "struct_seri": 901, "lf5": 913, "lf6": 913, "sink_csv": 913, "sink_ipc": 913, "sink_ndjson": 913, "sink_parquet": 913, "with_context": 913, "resourc": 917, "plugin_path": 917, "function_nam": 917, "intuit": 918, "emploi": 918, "complement": 918, "plenti": 918, "cde": 918, "fgg": 918, "jjk": 918, "lmn": 918, "opp": 918, "qqr": 918, "by_dtyp": 918, "as_expr": 918, "dispatch": 918, "1_234_500": 918, "5_000_555": 918, "1234500": 918, "5000555": 918, "by_nam": 918, "4_500_000": 918, "4500000": 918, "3265500": 918, "zap": 918, "2031": 918, "tstamp_tokyo": 918, "123465": 918, "tstamp_utc": 918, "999000": 918, "666000": 918, "tstamp": 918, "600000": 918, "123000": 918, "666": 918, "td1": 918, "987000": 918, "td2": 918, "456789": [918, 1036], "td3": 918, "2m": [918, 1024], "456m": 918, "7d": 918, "456789\u00b5": 918, "18d": 918, "999999\u00b5": 918, "23h": 918, "987m": 918, "14d": 918, "16h": 918, "39m": 918, "21d": 918, "456001\u00b5": 918, "expand_selector": 918, "colz": [918, 1317], "everyth": 918, "signed_integ": 918, "unsigned_integ": 918, "is_selector": 918, "obj": 918, "include_categor": 918, "2345": 918, "3456": 918, "292432": [927, 1308], "549306": [931, 1308], "innter": 945, "field_2": [958, 1147], "n00": [958, 1147], "n01": [958, 1147], "n02": [958, 1147], "hexadecim": [962, 963], "aaaa": [962, 963], "8a": [962, 963], "aad": [962, 963], "invalid_valu": 962, "44225": [973, 1308], "56789": [974, 1070, 1195, 1308], "901234": [974, 1070, 1195, 1308], "1232e": [981, 983, 1308], "1656e15": [983, 1308], "break_point_label": [993, 1173, 1308], "break_point": [993, 1077, 1173, 1308], "category_label": [993, 1173, 1308], "581139": [994, 1308], "bb": [994, 1308], "arraylik": [996, 1308], "ser": [1005, 1006, 1039], "kathmandu": [1005, 1006, 1039], "0545": [1005, 1006, 1039], "500m": [1018, 1021, 1029], "date_minus_1y_2mon": 1031, "165": [1035, 1049], "round_str": 1035, "round_td": 1035, "111110": 1036, "765431": 1036, "11111": 1036, "timestamp_n": 1040, "978307200000000000": 1040, "978393600000000000": 1040, "978480000000000000": 1040, "005": [1055, 1308], "06293300616044681": [1055, 1308], "65": [1055, 1308], "8568409950394724": [1055, 1308], "4000000": [1057, 1308], "814697265625": [1057, 1308], "085537": [1062, 1308], "bitmask": [1074, 1308], "absenc": [1074, 1308], "presenc": [1074, 1308], "confirm": [1074, 1308], "10734580197236529959": [1075, 1308], "3022416320763508302": [1075, 1308], "13756996518000038261": [1075, 1308], "is_signed_integ": [1091, 1308], "is_unsigned_integ": [1091, 1308], "grade": [1104, 1308], "79": [1104, 1308], "93": [1104, 1308], "0522623626787952": [1104, 1308], "9477376373212048": [1104, 1308], "1040361802642726": [1104, 1308], "2147483648": [1153, 1308], "pythonliter": [1156, 1157, 1158, 1159, 1198, 1308], "166667": [1169, 1308], "142857": [1169, 1308], "150": [1187, 1308], "450": [1187, 1308], "dev": [1192, 1308], "527525": [1192, 1308], "frequent": [1198, 1201, 1308], "2246e": [1211, 1282, 1308], "34776706224699483": [1213, 1308], "732051": [1216, 1308], "idx_rx": 1230, "idx_lit": 1230, "3rd": [1231, 1262], "pap": 1231, "dragonfr": 1231, "orld": 1257, "gonfruit": 1262, "6331e16": [1282, 1308], "int64arrai": [1284, 1308], "a_2": [1285, 1308], "a_3": [1285, 1308], "s_from_str_repr": [1287, 1308], "zero_copy_onli": [1289, 1308], "127": [1295, 1308], "seriesview": [1298, 1308], "dtype_if_empti": 1308, "position": 1308, "scenario": 1308, "chunk_length": 1308, "get_chunk": 1308, "has_valid": 1308, "is_boolean": 1308, "is_float": 1308, "is_integ": 1308, "is_numer": [1308, 1317], "is_sort": 1308, "is_tempor": 1308, "is_utf8": 1308, "new_from_index": 1308, "histogram": [1308, 1312], "kde": [1308, 1312], "series_equ": 1308, "set_at_idx": 1308, "two_a": 1316, "__enter__": 1316, "__exit__": 1316, "exc_typ": 1316, "baseexcept": 1316, "exc_val": 1316, "exc_tb": 1316, "tracebacktyp": 1316, "machin": 1317, "xdist": 1317, "hardwar": 1317, "setup": 1317, "sec": 1317, "numeric_dtyp": 1317, "null_probabililti": 1317, "test_numer": 1317, "col0": 1317, "col4": 1317, "29096": 1317, "485": 1317, "2147483647": 1317, "8257e14": 1317, "7508": 1317, "37338": 1317, "7264": 1317, "16996": 1317, "121": 1317, "361": 1317, "63204": 1317, "1443e235": 1317, "conform": 1317, "ascii_lett": 1317, "id_char": 1317, "alphabet": 1317, "price": 1317, "min_valu": 1317, "max_valu": 1317, "test_price_calcul": 1317, "a101": 1317, "8nin": 1317, "qhoo": 1317, "714": 1317, "544": 1317, "i0e0": 1317, "test_miscellan": 1317, "235": 1317, "87": 1317, "186": 1317, "174": 1317, "179": 1317, "213": 1317, "221": 1317, "86": 1317, "255": 1317}, "objects": {"polars.Config": [[2, 0, 1, "", "activate_decimals"], [3, 0, 1, "", "load"], [4, 0, 1, "", "load_from_file"], [5, 0, 1, "", "restore_defaults"], [6, 0, 1, "", "save"], [7, 0, 1, "", "save_to_file"], [8, 0, 1, "", "set_ascii_tables"], [9, 0, 1, "", "set_auto_structify"], [10, 0, 1, "", "set_decimal_separator"], [11, 0, 1, "", "set_float_precision"], [12, 0, 1, "", "set_fmt_float"], [13, 0, 1, "", "set_fmt_str_lengths"], [14, 0, 1, "", "set_fmt_table_cell_list_len"], [15, 0, 1, "", "set_streaming_chunk_size"], [16, 0, 1, "", "set_tbl_cell_alignment"], [17, 0, 1, "", "set_tbl_cell_numeric_alignment"], [18, 0, 1, "", "set_tbl_cols"], [19, 0, 1, "", "set_tbl_column_data_type_inline"], [20, 0, 1, "", "set_tbl_dataframe_shape_below"], [21, 0, 1, "", "set_tbl_formatting"], [22, 0, 1, "", "set_tbl_hide_column_data_types"], [23, 0, 1, "", "set_tbl_hide_column_names"], [24, 0, 1, "", "set_tbl_hide_dataframe_shape"], [25, 0, 1, "", "set_tbl_hide_dtype_separator"], [26, 0, 1, "", "set_tbl_rows"], [27, 0, 1, "", "set_tbl_width_chars"], [28, 0, 1, "", "set_thousands_separator"], [29, 0, 1, "", "set_trim_decimal_zeros"], [30, 0, 1, "", "set_verbose"], [31, 0, 1, "", "state"]], "polars.DataFrame": [[159, 0, 1, "", "__dataframe__"], [160, 0, 1, "", "apply"], [161, 0, 1, "", "approx_n_unique"], [162, 0, 1, "", "bottom_k"], [163, 0, 1, "", "cast"], [164, 0, 1, "", "clear"], [165, 0, 1, "", "clone"], [166, 1, 1, "", "columns"], [167, 0, 1, "", "corr"], [168, 0, 1, "", "count"], [169, 0, 1, "", "describe"], [170, 0, 1, "", "drop"], [171, 0, 1, "", "drop_in_place"], [172, 0, 1, "", "drop_nulls"], [173, 1, 1, "", "dtypes"], [174, 0, 1, "", "equals"], [175, 0, 1, "", "estimated_size"], [176, 0, 1, "", "explode"], [177, 0, 1, "", "extend"], [178, 0, 1, "", "fill_nan"], [179, 0, 1, "", "fill_null"], [180, 0, 1, "", "filter"], [181, 0, 1, "", "find_idx_by_name"], [182, 1, 1, "", "flags"], [183, 0, 1, "", "fold"], [184, 0, 1, "", "frame_equal"], [185, 0, 1, "", "gather_every"], [186, 0, 1, "", "get_column"], [187, 0, 1, "", "get_column_index"], [188, 0, 1, "", "get_columns"], [189, 0, 1, "", "glimpse"], [190, 0, 1, "", "group_by"], [191, 0, 1, "", "group_by_dynamic"], [192, 0, 1, "", "group_by_rolling"], [193, 0, 1, "", "groupby"], [194, 0, 1, "", "groupby_dynamic"], [195, 0, 1, "", "groupby_rolling"], [196, 0, 1, "", "hash_rows"], [197, 0, 1, "", "head"], [198, 1, 1, "", "height"], [199, 0, 1, "", "hstack"], [200, 0, 1, "", "insert_at_idx"], [201, 0, 1, "", "insert_column"], [202, 0, 1, "", "interpolate"], [203, 0, 1, "", "is_duplicated"], [204, 0, 1, "", "is_empty"], [205, 0, 1, "", "is_unique"], [206, 0, 1, "", "item"], [207, 0, 1, "", "iter_columns"], [208, 0, 1, "", "iter_rows"], [209, 0, 1, "", "iter_slices"], [210, 0, 1, "", "join"], [211, 0, 1, "", "join_asof"], [212, 0, 1, "", "lazy"], [213, 0, 1, "", "limit"], [214, 0, 1, "", "map_rows"], [215, 0, 1, "", "max"], [216, 0, 1, "", "max_horizontal"], [217, 0, 1, "", "mean"], [218, 0, 1, "", "mean_horizontal"], [219, 0, 1, "", "median"], [220, 0, 1, "", "melt"], [221, 0, 1, "", "merge_sorted"], [222, 0, 1, "", "min"], [223, 0, 1, "", "min_horizontal"], [224, 0, 1, "", "n_chunks"], [225, 0, 1, "", "n_unique"], [226, 0, 1, "", "null_count"], [227, 0, 1, "", "partition_by"], [228, 0, 1, "", "pipe"], [229, 0, 1, "", "pivot"], [230, 0, 1, "", "product"], [231, 0, 1, "", "quantile"], [232, 0, 1, "", "rechunk"], [233, 0, 1, "", "rename"], [234, 0, 1, "", "replace"], [235, 0, 1, "", "replace_at_idx"], [236, 0, 1, "", "replace_column"], [237, 0, 1, "", "reverse"], [238, 0, 1, "", "rolling"], [239, 0, 1, "", "row"], [240, 0, 1, "", "rows"], [241, 0, 1, "", "rows_by_key"], [242, 0, 1, "", "sample"], [243, 1, 1, "", "schema"], [244, 0, 1, "", "select"], [245, 0, 1, "", "select_seq"], [246, 0, 1, "", "set_sorted"], [247, 1, 1, "", "shape"], [248, 0, 1, "", "shift"], [249, 0, 1, "", "shift_and_fill"], [250, 0, 1, "", "shrink_to_fit"], [251, 0, 1, "", "slice"], [252, 0, 1, "", "sort"], [253, 0, 1, "", "sql"], [254, 0, 1, "", "std"], [255, 0, 1, "", "sum"], [256, 0, 1, "", "sum_horizontal"], [257, 0, 1, "", "tail"], [258, 0, 1, "", "take_every"], [259, 0, 1, "", "to_arrow"], [260, 0, 1, "", "to_dict"], [261, 0, 1, "", "to_dicts"], [262, 0, 1, "", "to_dummies"], [263, 0, 1, "", "to_init_repr"], [264, 0, 1, "", "to_numpy"], [265, 0, 1, "", "to_pandas"], [266, 0, 1, "", "to_series"], [267, 0, 1, "", "to_struct"], [268, 0, 1, "", "to_torch"], [269, 0, 1, "", "top_k"], [270, 0, 1, "", "transpose"], [271, 0, 1, "", "unique"], [272, 0, 1, "", "unnest"], [273, 0, 1, "", "unstack"], [274, 0, 1, "", "update"], [275, 0, 1, "", "upsample"], [276, 0, 1, "", "var"], [277, 0, 1, "", "vstack"], [278, 1, 1, "", "width"], [279, 0, 1, "", "with_columns"], [280, 0, 1, "", "with_columns_seq"], [281, 0, 1, "", "with_row_count"], [282, 0, 1, "", "with_row_index"], [32, 0, 1, "", "write_avro"], [33, 0, 1, "", "write_clipboard"], [34, 0, 1, "", "write_csv"], [35, 0, 1, "", "write_database"], [36, 0, 1, "", "write_delta"], [37, 0, 1, "", "write_excel"], [38, 0, 1, "", "write_ipc"], [39, 0, 1, "", "write_ipc_stream"], [40, 0, 1, "", "write_json"], [41, 0, 1, "", "write_ndjson"], [42, 0, 1, "", "write_parquet"]], "polars.Expr": [[313, 0, 1, "", "abs"], [314, 0, 1, "", "add"], [315, 0, 1, "", "agg_groups"], [316, 0, 1, "", "alias"], [317, 0, 1, "", "all"], [318, 0, 1, "", "and_"], [319, 0, 1, "", "any"], [320, 0, 1, "", "append"], [321, 0, 1, "", "apply"], [322, 0, 1, "", "approx_n_unique"], [323, 0, 1, "", "arccos"], [324, 0, 1, "", "arccosh"], [325, 0, 1, "", "arcsin"], [326, 0, 1, "", "arcsinh"], [327, 0, 1, "", "arctan"], [328, 0, 1, "", "arctanh"], [329, 0, 1, "", "arg_max"], [330, 0, 1, "", "arg_min"], [331, 0, 1, "", "arg_sort"], [332, 0, 1, "", "arg_true"], [333, 0, 1, "", "arg_unique"], [358, 0, 1, "", "backward_fill"], [364, 0, 1, "", "bottom_k"], [365, 0, 1, "", "bottom_k_by"], [366, 0, 1, "", "cast"], [369, 0, 1, "", "cbrt"], [370, 0, 1, "", "ceil"], [371, 0, 1, "", "clip"], [372, 0, 1, "", "clip_max"], [373, 0, 1, "", "clip_min"], [374, 0, 1, "", "cos"], [375, 0, 1, "", "cosh"], [376, 0, 1, "", "cot"], [377, 0, 1, "", "count"], [378, 0, 1, "", "cum_count"], [379, 0, 1, "", "cum_max"], [380, 0, 1, "", "cum_min"], [381, 0, 1, "", "cum_prod"], [382, 0, 1, "", "cum_sum"], [383, 0, 1, "", "cumcount"], [384, 0, 1, "", "cummax"], [385, 0, 1, "", "cummin"], [386, 0, 1, "", "cumprod"], [387, 0, 1, "", "cumsum"], [388, 0, 1, "", "cumulative_eval"], [389, 0, 1, "", "cut"], [390, 0, 1, "", "degrees"], [391, 0, 1, "", "deserialize"], [392, 0, 1, "", "diff"], [393, 0, 1, "", "dot"], [394, 0, 1, "", "drop_nans"], [395, 0, 1, "", "drop_nulls"], [447, 0, 1, "", "entropy"], [448, 0, 1, "", "eq"], [449, 0, 1, "", "eq_missing"], [450, 0, 1, "", "ewm_mean"], [451, 0, 1, "", "ewm_mean_by"], [452, 0, 1, "", "ewm_std"], [453, 0, 1, "", "ewm_var"], [454, 0, 1, "", "exclude"], [455, 0, 1, "", "exp"], [456, 0, 1, "", "explode"], [457, 0, 1, "", "extend_constant"], [458, 0, 1, "", "fill_nan"], [459, 0, 1, "", "fill_null"], [460, 0, 1, "", "filter"], [461, 0, 1, "", "first"], [462, 0, 1, "", "flatten"], [463, 0, 1, "", "floor"], [464, 0, 1, "", "floordiv"], [465, 0, 1, "", "forward_fill"], [466, 0, 1, "", "from_json"], [467, 0, 1, "", "gather"], [468, 0, 1, "", "gather_every"], [469, 0, 1, "", "ge"], [470, 0, 1, "", "get"], [471, 0, 1, "", "gt"], [472, 0, 1, "", "hash"], [473, 0, 1, "", "head"], [474, 0, 1, "", "hist"], [475, 0, 1, "", "implode"], [476, 0, 1, "", "inspect"], [477, 0, 1, "", "interpolate"], [478, 0, 1, "", "is_between"], [479, 0, 1, "", "is_duplicated"], [480, 0, 1, "", "is_finite"], [481, 0, 1, "", "is_first"], [482, 0, 1, "", "is_first_distinct"], [483, 0, 1, "", "is_in"], [484, 0, 1, "", "is_infinite"], [485, 0, 1, "", "is_last"], [486, 0, 1, "", "is_last_distinct"], [487, 0, 1, "", "is_nan"], [488, 0, 1, "", "is_not"], [489, 0, 1, "", "is_not_nan"], [490, 0, 1, "", "is_not_null"], [491, 0, 1, "", "is_null"], [492, 0, 1, "", "is_unique"], [493, 0, 1, "", "keep_name"], [494, 0, 1, "", "kurtosis"], [495, 0, 1, "", "last"], [496, 0, 1, "", "le"], [497, 0, 1, "", "len"], [498, 0, 1, "", "limit"], [542, 0, 1, "", "log"], [543, 0, 1, "", "log10"], [544, 0, 1, "", "log1p"], [545, 0, 1, "", "lower_bound"], [546, 0, 1, "", "lt"], [547, 0, 1, "", "map"], [548, 0, 1, "", "map_alias"], [549, 0, 1, "", "map_batches"], [550, 0, 1, "", "map_dict"], [551, 0, 1, "", "map_elements"], [552, 0, 1, "", "max"], [553, 0, 1, "", "mean"], [554, 0, 1, "", "median"], [566, 0, 1, "", "min"], [567, 0, 1, "", "mod"], [568, 0, 1, "", "mode"], [569, 0, 1, "", "mul"], [570, 0, 1, "", "n_unique"], [580, 0, 1, "", "nan_max"], [581, 0, 1, "", "nan_min"], [582, 0, 1, "", "ne"], [583, 0, 1, "", "ne_missing"], [584, 0, 1, "", "neg"], [585, 0, 1, "", "not_"], [586, 0, 1, "", "null_count"], [587, 0, 1, "", "or_"], [588, 0, 1, "", "over"], [589, 0, 1, "", "pct_change"], [590, 0, 1, "", "peak_max"], [591, 0, 1, "", "peak_min"], [592, 0, 1, "", "pipe"], [593, 0, 1, "", "pow"], [594, 0, 1, "", "prefix"], [595, 0, 1, "", "product"], [596, 0, 1, "", "qcut"], [597, 0, 1, "", "quantile"], [598, 0, 1, "", "radians"], [599, 0, 1, "", "rank"], [600, 0, 1, "", "rechunk"], [601, 0, 1, "", "reinterpret"], [602, 0, 1, "", "repeat_by"], [603, 0, 1, "", "replace"], [604, 0, 1, "", "reshape"], [605, 0, 1, "", "reverse"], [606, 0, 1, "", "rle"], [607, 0, 1, "", "rle_id"], [608, 0, 1, "", "rolling"], [609, 0, 1, "", "rolling_apply"], [610, 0, 1, "", "rolling_map"], [611, 0, 1, "", "rolling_max"], [612, 0, 1, "", "rolling_mean"], [613, 0, 1, "", "rolling_median"], [614, 0, 1, "", "rolling_min"], [615, 0, 1, "", "rolling_quantile"], [616, 0, 1, "", "rolling_skew"], [617, 0, 1, "", "rolling_std"], [618, 0, 1, "", "rolling_sum"], [619, 0, 1, "", "rolling_var"], [620, 0, 1, "", "round"], [621, 0, 1, "", "round_sig_figs"], [622, 0, 1, "", "sample"], [623, 0, 1, "", "search_sorted"], [624, 0, 1, "", "set_sorted"], [625, 0, 1, "", "shift"], [626, 0, 1, "", "shift_and_fill"], [627, 0, 1, "", "shrink_dtype"], [628, 0, 1, "", "shuffle"], [629, 0, 1, "", "sign"], [630, 0, 1, "", "sin"], [631, 0, 1, "", "sinh"], [632, 0, 1, "", "skew"], [633, 0, 1, "", "slice"], [634, 0, 1, "", "sort"], [635, 0, 1, "", "sort_by"], [636, 0, 1, "", "sqrt"], [637, 0, 1, "", "std"], [695, 0, 1, "", "sub"], [696, 0, 1, "", "suffix"], [697, 0, 1, "", "sum"], [698, 0, 1, "", "tail"], [699, 0, 1, "", "take"], [700, 0, 1, "", "take_every"], [701, 0, 1, "", "tan"], [702, 0, 1, "", "tanh"], [703, 0, 1, "", "to_physical"], [704, 0, 1, "", "top_k"], [705, 0, 1, "", "top_k_by"], [706, 0, 1, "", "truediv"], [707, 0, 1, "", "unique"], [708, 0, 1, "", "unique_counts"], [709, 0, 1, "", "upper_bound"], [710, 0, 1, "", "value_counts"], [711, 0, 1, "", "var"], [712, 0, 1, "", "where"], [713, 0, 1, "", "xor"]], "polars.Expr.arr": [[334, 0, 1, "", "all"], [335, 0, 1, "", "any"], [336, 0, 1, "", "arg_max"], [337, 0, 1, "", "arg_min"], [338, 0, 1, "", "contains"], [339, 0, 1, "", "count_matches"], [340, 0, 1, "", "explode"], [341, 0, 1, "", "first"], [342, 0, 1, "", "get"], [343, 0, 1, "", "join"], [344, 0, 1, "", "last"], [345, 0, 1, "", "max"], [346, 0, 1, "", "median"], [347, 0, 1, "", "min"], [348, 0, 1, "", "n_unique"], [349, 0, 1, "", "reverse"], [350, 0, 1, "", "shift"], [351, 0, 1, "", "sort"], [352, 0, 1, "", "std"], [353, 0, 1, "", "sum"], [354, 0, 1, "", "to_list"], [355, 0, 1, "", "to_struct"], [356, 0, 1, "", "unique"], [357, 0, 1, "", "var"]], "polars.Expr.bin": [[359, 0, 1, "", "contains"], [360, 0, 1, "", "decode"], [361, 0, 1, "", "encode"], [362, 0, 1, "", "ends_with"], [363, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[367, 0, 1, "", "get_categories"], [368, 0, 1, "", "set_ordering"]], "polars.Expr.dt": [[396, 0, 1, "", "add_business_days"], [397, 0, 1, "", "base_utc_offset"], [398, 0, 1, "", "cast_time_unit"], [399, 0, 1, "", "century"], [400, 0, 1, "", "combine"], [401, 0, 1, "", "convert_time_zone"], [402, 0, 1, "", "date"], [403, 0, 1, "", "datetime"], [404, 0, 1, "", "day"], [405, 0, 1, "", "days"], [406, 0, 1, "", "dst_offset"], [407, 0, 1, "", "epoch"], [408, 0, 1, "", "hour"], [409, 0, 1, "", "hours"], [410, 0, 1, "", "is_leap_year"], [411, 0, 1, "", "iso_year"], [412, 0, 1, "", "microsecond"], [413, 0, 1, "", "microseconds"], [414, 0, 1, "", "millennium"], [415, 0, 1, "", "millisecond"], [416, 0, 1, "", "milliseconds"], [417, 0, 1, "", "minute"], [418, 0, 1, "", "minutes"], [419, 0, 1, "", "month"], [420, 0, 1, "", "month_end"], [421, 0, 1, "", "month_start"], [422, 0, 1, "", "nanosecond"], [423, 0, 1, "", "nanoseconds"], [424, 0, 1, "", "offset_by"], [425, 0, 1, "", "ordinal_day"], [426, 0, 1, "", "quarter"], [427, 0, 1, "", "replace_time_zone"], [428, 0, 1, "", "round"], [429, 0, 1, "", "second"], [430, 0, 1, "", "seconds"], [431, 0, 1, "", "strftime"], [432, 0, 1, "", "time"], [433, 0, 1, "", "timestamp"], [434, 0, 1, "", "to_string"], [435, 0, 1, "", "total_days"], [436, 0, 1, "", "total_hours"], [437, 0, 1, "", "total_microseconds"], [438, 0, 1, "", "total_milliseconds"], [439, 0, 1, "", "total_minutes"], [440, 0, 1, "", "total_nanoseconds"], [441, 0, 1, "", "total_seconds"], [442, 0, 1, "", "truncate"], [443, 0, 1, "", "week"], [444, 0, 1, "", "weekday"], [445, 0, 1, "", "with_time_unit"], [446, 0, 1, "", "year"]], "polars.Expr.list": [[499, 0, 1, "", "all"], [500, 0, 1, "", "any"], [501, 0, 1, "", "arg_max"], [502, 0, 1, "", "arg_min"], [503, 0, 1, "", "concat"], [504, 0, 1, "", "contains"], [505, 0, 1, "", "count_match"], [506, 0, 1, "", "count_matches"], [507, 0, 1, "", "diff"], [508, 0, 1, "", "drop_nulls"], [509, 0, 1, "", "eval"], [510, 0, 1, "", "explode"], [511, 0, 1, "", "first"], [512, 0, 1, "", "gather"], [513, 0, 1, "", "gather_every"], [514, 0, 1, "", "get"], [515, 0, 1, "", "head"], [516, 0, 1, "", "join"], [517, 0, 1, "", "last"], [518, 0, 1, "", "len"], [519, 0, 1, "", "lengths"], [520, 0, 1, "", "max"], [521, 0, 1, "", "mean"], [522, 0, 1, "", "median"], [523, 0, 1, "", "min"], [524, 0, 1, "", "n_unique"], [525, 0, 1, "", "reverse"], [526, 0, 1, "", "sample"], [527, 0, 1, "", "set_difference"], [528, 0, 1, "", "set_intersection"], [529, 0, 1, "", "set_symmetric_difference"], [530, 0, 1, "", "set_union"], [531, 0, 1, "", "shift"], [532, 0, 1, "", "slice"], [533, 0, 1, "", "sort"], [534, 0, 1, "", "std"], [535, 0, 1, "", "sum"], [536, 0, 1, "", "tail"], [537, 0, 1, "", "take"], [538, 0, 1, "", "to_array"], [539, 0, 1, "", "to_struct"], [540, 0, 1, "", "unique"], [541, 0, 1, "", "var"]], "polars.Expr.meta": [[555, 0, 1, "", "eq"], [556, 0, 1, "", "has_multiple_outputs"], [557, 0, 1, "", "is_regex_projection"], [558, 0, 1, "", "ne"], [559, 0, 1, "", "output_name"], [560, 0, 1, "", "pop"], [561, 0, 1, "", "root_names"], [562, 0, 1, "", "serialize"], [563, 0, 1, "", "tree_format"], [564, 0, 1, "", "undo_aliases"], [565, 0, 1, "", "write_json"]], "polars.Expr.name": [[571, 0, 1, "", "keep"], [572, 0, 1, "", "map"], [573, 0, 1, "", "map_fields"], [574, 0, 1, "", "prefix"], [575, 0, 1, "", "prefix_fields"], [576, 0, 1, "", "suffix"], [577, 0, 1, "", "suffix_fields"], [578, 0, 1, "", "to_lowercase"], [579, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[638, 0, 1, "", "concat"], [639, 0, 1, "", "contains"], [640, 0, 1, "", "contains_any"], [641, 0, 1, "", "count_match"], [642, 0, 1, "", "count_matches"], [643, 0, 1, "", "decode"], [644, 0, 1, "", "encode"], [645, 0, 1, "", "ends_with"], [646, 0, 1, "", "explode"], [647, 0, 1, "", "extract"], [648, 0, 1, "", "extract_all"], [649, 0, 1, "", "extract_groups"], [650, 0, 1, "", "find"], [651, 0, 1, "", "head"], [652, 0, 1, "", "json_decode"], [653, 0, 1, "", "json_extract"], [654, 0, 1, "", "json_path_match"], [655, 0, 1, "", "len_bytes"], [656, 0, 1, "", "len_chars"], [657, 0, 1, "", "lengths"], [658, 0, 1, "", "ljust"], [659, 0, 1, "", "lstrip"], [660, 0, 1, "", "n_chars"], [661, 0, 1, "", "pad_end"], [662, 0, 1, "", "pad_start"], [663, 0, 1, "", "parse_int"], [664, 0, 1, "", "replace"], [665, 0, 1, "", "replace_all"], [666, 0, 1, "", "replace_many"], [667, 0, 1, "", "reverse"], [668, 0, 1, "", "rjust"], [669, 0, 1, "", "rstrip"], [670, 0, 1, "", "slice"], [671, 0, 1, "", "split"], [672, 0, 1, "", "split_exact"], [673, 0, 1, "", "splitn"], [674, 0, 1, "", "starts_with"], [675, 0, 1, "", "strip"], [676, 0, 1, "", "strip_chars"], [677, 0, 1, "", "strip_chars_end"], [678, 0, 1, "", "strip_chars_start"], [679, 0, 1, "", "strip_prefix"], [680, 0, 1, "", "strip_suffix"], [681, 0, 1, "", "strptime"], [682, 0, 1, "", "tail"], [683, 0, 1, "", "to_date"], [684, 0, 1, "", "to_datetime"], [685, 0, 1, "", "to_decimal"], [686, 0, 1, "", "to_integer"], [687, 0, 1, "", "to_lowercase"], [688, 0, 1, "", "to_time"], [689, 0, 1, "", "to_titlecase"], [690, 0, 1, "", "to_uppercase"], [691, 0, 1, "", "zfill"]], "polars.Expr.struct": [[692, 0, 1, "", "field"], [693, 0, 1, "", "json_encode"], [694, 0, 1, "", "rename_fields"]], "polars.LazyFrame": [[815, 0, 1, "", "approx_n_unique"], [816, 0, 1, "", "bottom_k"], [817, 0, 1, "", "cache"], [818, 0, 1, "", "cast"], [819, 0, 1, "", "clear"], [820, 0, 1, "", "clone"], [821, 0, 1, "", "collect"], [822, 0, 1, "", "collect_async"], [823, 1, 1, "", "columns"], [824, 0, 1, "", "count"], [825, 0, 1, "", "describe"], [826, 0, 1, "", "deserialize"], [827, 0, 1, "", "drop"], [828, 0, 1, "", "drop_nulls"], [829, 1, 1, "", "dtypes"], [830, 0, 1, "", "explain"], [831, 0, 1, "", "explode"], [832, 0, 1, "", "fetch"], [833, 0, 1, "", "fill_nan"], [834, 0, 1, "", "fill_null"], [835, 0, 1, "", "filter"], [836, 0, 1, "", "first"], [837, 0, 1, "", "gather_every"], [838, 0, 1, "", "group_by"], [839, 0, 1, "", "group_by_dynamic"], [840, 0, 1, "", "group_by_rolling"], [841, 0, 1, "", "groupby"], [842, 0, 1, "", "groupby_dynamic"], [843, 0, 1, "", "groupby_rolling"], [844, 0, 1, "", "head"], [845, 0, 1, "", "inspect"], [846, 0, 1, "", "interpolate"], [847, 0, 1, "", "join"], [848, 0, 1, "", "join_asof"], [849, 0, 1, "", "last"], [850, 0, 1, "", "lazy"], [851, 0, 1, "", "limit"], [852, 0, 1, "", "map"], [853, 0, 1, "", "map_batches"], [854, 0, 1, "", "max"], [855, 0, 1, "", "mean"], [856, 0, 1, "", "median"], [857, 0, 1, "", "melt"], [858, 0, 1, "", "merge_sorted"], [859, 0, 1, "", "min"], [860, 0, 1, "", "null_count"], [861, 0, 1, "", "pipe"], [862, 0, 1, "", "profile"], [863, 0, 1, "", "quantile"], [864, 0, 1, "", "rename"], [865, 0, 1, "", "reverse"], [866, 0, 1, "", "rolling"], [867, 1, 1, "", "schema"], [868, 0, 1, "", "select"], [869, 0, 1, "", "select_seq"], [870, 0, 1, "", "serialize"], [871, 0, 1, "", "set_sorted"], [872, 0, 1, "", "shift"], [873, 0, 1, "", "shift_and_fill"], [874, 0, 1, "", "show_graph"], [43, 0, 1, "", "sink_csv"], [44, 0, 1, "", "sink_ipc"], [45, 0, 1, "", "sink_ndjson"], [46, 0, 1, "", "sink_parquet"], [875, 0, 1, "", "slice"], [876, 0, 1, "", "sort"], [877, 0, 1, "", "sql"], [878, 0, 1, "", "std"], [879, 0, 1, "", "sum"], [880, 0, 1, "", "tail"], [881, 0, 1, "", "take_every"], [882, 0, 1, "", "top_k"], [883, 0, 1, "", "unique"], [884, 0, 1, "", "unnest"], [885, 0, 1, "", "update"], [886, 0, 1, "", "var"], [887, 1, 1, "", "width"], [888, 0, 1, "", "with_columns"], [889, 0, 1, "", "with_columns_seq"], [890, 0, 1, "", "with_context"], [891, 0, 1, "", "with_row_count"], [892, 0, 1, "", "with_row_index"]], "polars": [[1316, 2, 1, "", "SQLContext"], [53, 2, 1, "", "StringCache"], [54, 4, 1, "", "align_frames"], [714, 4, 1, "", "all"], [715, 4, 1, "", "all_horizontal"], [716, 4, 1, "", "any"], [717, 4, 1, "", "any_horizontal"], [718, 4, 1, "", "apply"], [719, 4, 1, "", "approx_n_unique"], [720, 4, 1, "", "arange"], [721, 4, 1, "", "arctan2"], [722, 4, 1, "", "arctan2d"], [723, 4, 1, "", "arg_sort_by"], [724, 4, 1, "", "arg_where"], [59, 4, 1, "", "build_info"], [725, 4, 1, "", "business_day_count"], [726, 4, 1, "", "coalesce"], [60, 4, 1, "", "collect_all"], [61, 4, 1, "", "collect_all_async"], [62, 4, 1, "", "concat"], [727, 4, 1, "", "concat_list"], [728, 4, 1, "", "concat_str"], [729, 4, 1, "", "corr"], [730, 4, 1, "", "count"], [731, 4, 1, "", "cov"], [732, 4, 1, "", "cum_count"], [733, 4, 1, "", "cum_fold"], [734, 4, 1, "", "cum_reduce"], [735, 4, 1, "", "cum_sum"], [736, 4, 1, "", "cum_sum_horizontal"], [737, 4, 1, "", "cumfold"], [738, 4, 1, "", "cumreduce"], [739, 4, 1, "", "cumsum"], [740, 4, 1, "", "cumsum_horizontal"], [741, 4, 1, "", "date"], [742, 4, 1, "", "date_range"], [743, 4, 1, "", "date_ranges"], [744, 4, 1, "", "datetime"], [745, 4, 1, "", "datetime_range"], [746, 4, 1, "", "datetime_ranges"], [91, 4, 1, "", "disable_string_cache"], [747, 4, 1, "", "duration"], [748, 4, 1, "", "element"], [92, 4, 1, "", "enable_string_cache"], [749, 4, 1, "", "exclude"], [750, 4, 1, "", "first"], [751, 4, 1, "", "fold"], [752, 4, 1, "", "format"], [108, 4, 1, "", "from_arrow"], [109, 4, 1, "", "from_dataframe"], [110, 4, 1, "", "from_dict"], [111, 4, 1, "", "from_dicts"], [753, 4, 1, "", "from_epoch"], [112, 4, 1, "", "from_numpy"], [113, 4, 1, "", "from_pandas"], [114, 4, 1, "", "from_records"], [115, 4, 1, "", "from_repr"], [116, 4, 1, "", "get_index_type"], [754, 4, 1, "", "groups"], [755, 4, 1, "", "head"], [756, 4, 1, "", "implode"], [757, 4, 1, "", "int_range"], [758, 4, 1, "", "int_ranges"], [759, 4, 1, "", "last"], [760, 4, 1, "", "len"], [761, 4, 1, "", "lit"], [762, 4, 1, "", "map"], [763, 4, 1, "", "map_batches"], [764, 4, 1, "", "map_groups"], [765, 4, 1, "", "max"], [766, 4, 1, "", "max_horizontal"], [767, 4, 1, "", "mean"], [768, 4, 1, "", "mean_horizontal"], [769, 4, 1, "", "median"], [770, 4, 1, "", "min"], [771, 4, 1, "", "min_horizontal"], [772, 4, 1, "", "n_unique"], [773, 4, 1, "", "ones"], [917, 6, 0, "-", "plugins"], [774, 4, 1, "", "quantile"], [118, 4, 1, "", "read_avro"], [119, 4, 1, "", "read_clipboard"], [120, 4, 1, "", "read_csv"], [121, 4, 1, "", "read_csv_batched"], [122, 4, 1, "", "read_database"], [123, 4, 1, "", "read_database_uri"], [124, 4, 1, "", "read_delta"], [125, 4, 1, "", "read_excel"], [126, 4, 1, "", "read_ipc"], [127, 4, 1, "", "read_ipc_schema"], [128, 4, 1, "", "read_ipc_stream"], [129, 4, 1, "", "read_json"], [130, 4, 1, "", "read_ndjson"], [131, 4, 1, "", "read_ods"], [132, 4, 1, "", "read_parquet"], [133, 4, 1, "", "read_parquet_schema"], [775, 4, 1, "", "reduce"], [776, 4, 1, "", "repeat"], [777, 4, 1, "", "rolling_corr"], [778, 4, 1, "", "rolling_cov"], [134, 4, 1, "", "scan_csv"], [135, 4, 1, "", "scan_delta"], [136, 4, 1, "", "scan_iceberg"], [137, 4, 1, "", "scan_ipc"], [138, 4, 1, "", "scan_ndjson"], [139, 4, 1, "", "scan_parquet"], [140, 4, 1, "", "scan_pyarrow_dataset"], [779, 4, 1, "", "select"], [918, 6, 0, "-", "selectors"], [141, 4, 1, "", "set_random_seed"], [142, 4, 1, "", "show_versions"], [780, 4, 1, "", "sql_expr"], [781, 4, 1, "", "std"], [782, 4, 1, "", "struct"], [783, 4, 1, "", "sum"], [784, 4, 1, "", "sum_horizontal"], [785, 4, 1, "", "tail"], [154, 4, 1, "", "thread_pool_size"], [155, 4, 1, "", "threadpool_size"], [786, 4, 1, "", "time"], [787, 4, 1, "", "time_range"], [788, 4, 1, "", "time_ranges"], [156, 4, 1, "", "using_string_cache"], [789, 4, 1, "", "var"], [790, 4, 1, "", "when"], [791, 4, 1, "", "zeros"]], "polars.SQLContext": [[1316, 0, 1, "", "__enter__"], [1316, 0, 1, "", "__exit__"], [1316, 0, 1, "", "__init__"], [47, 0, 1, "", "execute"], [48, 0, 1, "", "register"], [49, 0, 1, "", "register_globals"], [50, 0, 1, "", "register_many"], [51, 0, 1, "", "tables"], [52, 0, 1, "", "unregister"]], "polars.Series": [[920, 0, 1, "", "abs"], [921, 0, 1, "", "alias"], [922, 0, 1, "", "all"], [923, 0, 1, "", "any"], [924, 0, 1, "", "append"], [925, 0, 1, "", "apply"], [926, 0, 1, "", "arccos"], [927, 0, 1, "", "arccosh"], [928, 0, 1, "", "arcsin"], [929, 0, 1, "", "arcsinh"], [930, 0, 1, "", "arctan"], [931, 0, 1, "", "arctanh"], [932, 0, 1, "", "arg_max"], [933, 0, 1, "", "arg_min"], [934, 0, 1, "", "arg_sort"], [935, 0, 1, "", "arg_true"], [936, 0, 1, "", "arg_unique"], [966, 0, 1, "", "bottom_k"], [967, 0, 1, "", "cast"], [973, 0, 1, "", "cbrt"], [974, 0, 1, "", "ceil"], [975, 0, 1, "", "chunk_lengths"], [976, 0, 1, "", "clear"], [977, 0, 1, "", "clip"], [978, 0, 1, "", "clip_max"], [979, 0, 1, "", "clip_min"], [980, 0, 1, "", "clone"], [981, 0, 1, "", "cos"], [982, 0, 1, "", "cosh"], [983, 0, 1, "", "cot"], [984, 0, 1, "", "cum_max"], [985, 0, 1, "", "cum_min"], [986, 0, 1, "", "cum_prod"], [987, 0, 1, "", "cum_sum"], [988, 0, 1, "", "cummax"], [989, 0, 1, "", "cummin"], [990, 0, 1, "", "cumprod"], [991, 0, 1, "", "cumsum"], [992, 0, 1, "", "cumulative_eval"], [993, 0, 1, "", "cut"], [994, 0, 1, "", "describe"], [995, 0, 1, "", "diff"], [996, 0, 1, "", "dot"], [997, 0, 1, "", "drop_nans"], [998, 0, 1, "", "drop_nulls"], [1054, 3, 1, "", "dtype"], [1055, 0, 1, "", "entropy"], [1056, 0, 1, "", "equals"], [1057, 0, 1, "", "estimated_size"], [1058, 0, 1, "", "ewm_mean"], [1059, 0, 1, "", "ewm_mean_by"], [1060, 0, 1, "", "ewm_std"], [1061, 0, 1, "", "ewm_var"], [1062, 0, 1, "", "exp"], [1063, 0, 1, "", "explode"], [1064, 0, 1, "", "extend"], [1065, 0, 1, "", "extend_constant"], [1066, 0, 1, "", "fill_nan"], [1067, 0, 1, "", "fill_null"], [1068, 0, 1, "", "filter"], [1069, 3, 1, "", "flags"], [1070, 0, 1, "", "floor"], [1071, 0, 1, "", "gather"], [1072, 0, 1, "", "gather_every"], [1073, 0, 1, "", "get_chunks"], [1074, 0, 1, "", "has_validity"], [1075, 0, 1, "", "hash"], [1076, 0, 1, "", "head"], [1077, 0, 1, "", "hist"], [1078, 0, 1, "", "implode"], [1079, 3, 1, "", "inner_dtype"], [1080, 0, 1, "", "interpolate"], [1081, 0, 1, "", "is_between"], [1082, 0, 1, "", "is_boolean"], [1083, 0, 1, "", "is_duplicated"], [1084, 0, 1, "", "is_empty"], [1085, 0, 1, "", "is_finite"], [1086, 0, 1, "", "is_first"], [1087, 0, 1, "", "is_first_distinct"], [1088, 0, 1, "", "is_float"], [1089, 0, 1, "", "is_in"], [1090, 0, 1, "", "is_infinite"], [1091, 0, 1, "", "is_integer"], [1092, 0, 1, "", "is_last"], [1093, 0, 1, "", "is_last_distinct"], [1094, 0, 1, "", "is_nan"], [1095, 0, 1, "", "is_not_nan"], [1096, 0, 1, "", "is_not_null"], [1097, 0, 1, "", "is_null"], [1098, 0, 1, "", "is_numeric"], [1099, 0, 1, "", "is_sorted"], [1100, 0, 1, "", "is_temporal"], [1101, 0, 1, "", "is_unique"], [1102, 0, 1, "", "is_utf8"], [1103, 0, 1, "", "item"], [1104, 0, 1, "", "kurtosis"], [1105, 0, 1, "", "len"], [1106, 0, 1, "", "limit"], [1150, 0, 1, "", "log"], [1151, 0, 1, "", "log10"], [1152, 0, 1, "", "log1p"], [1153, 0, 1, "", "lower_bound"], [1154, 0, 1, "", "map_dict"], [1155, 0, 1, "", "map_elements"], [1156, 0, 1, "", "max"], [1157, 0, 1, "", "mean"], [1158, 0, 1, "", "median"], [1159, 0, 1, "", "min"], [1160, 0, 1, "", "mode"], [1161, 0, 1, "", "n_chunks"], [1162, 0, 1, "", "n_unique"], [1163, 3, 1, "", "name"], [1164, 0, 1, "", "nan_max"], [1165, 0, 1, "", "nan_min"], [1166, 0, 1, "", "new_from_index"], [1167, 0, 1, "", "not_"], [1168, 0, 1, "", "null_count"], [1169, 0, 1, "", "pct_change"], [1170, 0, 1, "", "peak_max"], [1171, 0, 1, "", "peak_min"], [1172, 0, 1, "", "product"], [1173, 0, 1, "", "qcut"], [1174, 0, 1, "", "quantile"], [1175, 0, 1, "", "rank"], [1176, 0, 1, "", "rechunk"], [1177, 0, 1, "", "reinterpret"], [1178, 0, 1, "", "rename"], [1179, 0, 1, "", "replace"], [1180, 0, 1, "", "reshape"], [1181, 0, 1, "", "reverse"], [1182, 0, 1, "", "rle"], [1183, 0, 1, "", "rle_id"], [1184, 0, 1, "", "rolling_apply"], [1185, 0, 1, "", "rolling_map"], [1186, 0, 1, "", "rolling_max"], [1187, 0, 1, "", "rolling_mean"], [1188, 0, 1, "", "rolling_median"], [1189, 0, 1, "", "rolling_min"], [1190, 0, 1, "", "rolling_quantile"], [1191, 0, 1, "", "rolling_skew"], [1192, 0, 1, "", "rolling_std"], [1193, 0, 1, "", "rolling_sum"], [1194, 0, 1, "", "rolling_var"], [1195, 0, 1, "", "round"], [1196, 0, 1, "", "round_sig_figs"], [1197, 0, 1, "", "sample"], [1198, 0, 1, "", "scatter"], [1199, 0, 1, "", "search_sorted"], [1200, 0, 1, "", "series_equal"], [1201, 0, 1, "", "set"], [1202, 0, 1, "", "set_at_idx"], [1203, 0, 1, "", "set_sorted"], [1204, 3, 1, "", "shape"], [1205, 0, 1, "", "shift"], [1206, 0, 1, "", "shift_and_fill"], [1207, 0, 1, "", "shrink_dtype"], [1208, 0, 1, "", "shrink_to_fit"], [1209, 0, 1, "", "shuffle"], [1210, 0, 1, "", "sign"], [1211, 0, 1, "", "sin"], [1212, 0, 1, "", "sinh"], [1213, 0, 1, "", "skew"], [1214, 0, 1, "", "slice"], [1215, 0, 1, "", "sort"], [1216, 0, 1, "", "sqrt"], [1217, 0, 1, "", "std"], [1278, 0, 1, "", "sum"], [1279, 0, 1, "", "tail"], [1280, 0, 1, "", "take"], [1281, 0, 1, "", "take_every"], [1282, 0, 1, "", "tan"], [1283, 0, 1, "", "tanh"], [1284, 0, 1, "", "to_arrow"], [1285, 0, 1, "", "to_dummies"], [1286, 0, 1, "", "to_frame"], [1287, 0, 1, "", "to_init_repr"], [1288, 0, 1, "", "to_list"], [1289, 0, 1, "", "to_numpy"], [1290, 0, 1, "", "to_pandas"], [1291, 0, 1, "", "to_physical"], [1292, 0, 1, "", "top_k"], [1293, 0, 1, "", "unique"], [1294, 0, 1, "", "unique_counts"], [1295, 0, 1, "", "upper_bound"], [1296, 0, 1, "", "value_counts"], [1297, 0, 1, "", "var"], [1298, 0, 1, "", "view"], [1299, 0, 1, "", "zip_with"]], "polars.Series.arr": [[937, 0, 1, "", "all"], [938, 0, 1, "", "any"], [939, 0, 1, "", "arg_max"], [940, 0, 1, "", "arg_min"], [941, 0, 1, "", "contains"], [942, 0, 1, "", "count_matches"], [943, 0, 1, "", "explode"], [944, 0, 1, "", "first"], [945, 0, 1, "", "get"], [946, 0, 1, "", "join"], [947, 0, 1, "", "last"], [948, 0, 1, "", "max"], [949, 0, 1, "", "median"], [950, 0, 1, "", "min"], [951, 0, 1, "", "n_unique"], [952, 0, 1, "", "reverse"], [953, 0, 1, "", "shift"], [954, 0, 1, "", "sort"], [955, 0, 1, "", "std"], [956, 0, 1, "", "sum"], [957, 0, 1, "", "to_list"], [958, 0, 1, "", "to_struct"], [959, 0, 1, "", "unique"], [960, 0, 1, "", "var"]], "polars.Series.bin": [[961, 0, 1, "", "contains"], [962, 0, 1, "", "decode"], [963, 0, 1, "", "encode"], [964, 0, 1, "", "ends_with"], [965, 0, 1, "", "starts_with"]], "polars.Series.cat": [[968, 0, 1, "", "get_categories"], [969, 0, 1, "", "is_local"], [970, 0, 1, "", "set_ordering"], [971, 0, 1, "", "to_local"], [972, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[999, 0, 1, "", "add_business_days"], [1000, 0, 1, "", "base_utc_offset"], [1001, 0, 1, "", "cast_time_unit"], [1002, 0, 1, "", "century"], [1003, 0, 1, "", "combine"], [1004, 0, 1, "", "convert_time_zone"], [1005, 0, 1, "", "date"], [1006, 0, 1, "", "datetime"], [1007, 0, 1, "", "day"], [1008, 0, 1, "", "days"], [1009, 0, 1, "", "dst_offset"], [1010, 0, 1, "", "epoch"], [1011, 0, 1, "", "hour"], [1012, 0, 1, "", "hours"], [1013, 0, 1, "", "is_leap_year"], [1014, 0, 1, "", "iso_year"], [1015, 0, 1, "", "max"], [1016, 0, 1, "", "mean"], [1017, 0, 1, "", "median"], [1018, 0, 1, "", "microsecond"], [1019, 0, 1, "", "microseconds"], [1020, 0, 1, "", "millennium"], [1021, 0, 1, "", "millisecond"], [1022, 0, 1, "", "milliseconds"], [1023, 0, 1, "", "min"], [1024, 0, 1, "", "minute"], [1025, 0, 1, "", "minutes"], [1026, 0, 1, "", "month"], [1027, 0, 1, "", "month_end"], [1028, 0, 1, "", "month_start"], [1029, 0, 1, "", "nanosecond"], [1030, 0, 1, "", "nanoseconds"], [1031, 0, 1, "", "offset_by"], [1032, 0, 1, "", "ordinal_day"], [1033, 0, 1, "", "quarter"], [1034, 0, 1, "", "replace_time_zone"], [1035, 0, 1, "", "round"], [1036, 0, 1, "", "second"], [1037, 0, 1, "", "seconds"], [1038, 0, 1, "", "strftime"], [1039, 0, 1, "", "time"], [1040, 0, 1, "", "timestamp"], [1041, 0, 1, "", "to_string"], [1042, 0, 1, "", "total_days"], [1043, 0, 1, "", "total_hours"], [1044, 0, 1, "", "total_microseconds"], [1045, 0, 1, "", "total_milliseconds"], [1046, 0, 1, "", "total_minutes"], [1047, 0, 1, "", "total_nanoseconds"], [1048, 0, 1, "", "total_seconds"], [1049, 0, 1, "", "truncate"], [1050, 0, 1, "", "week"], [1051, 0, 1, "", "weekday"], [1052, 0, 1, "", "with_time_unit"], [1053, 0, 1, "", "year"]], "polars.Series.list": [[1107, 0, 1, "", "all"], [1108, 0, 1, "", "any"], [1109, 0, 1, "", "arg_max"], [1110, 0, 1, "", "arg_min"], [1111, 0, 1, "", "concat"], [1112, 0, 1, "", "contains"], [1113, 0, 1, "", "count_match"], [1114, 0, 1, "", "count_matches"], [1115, 0, 1, "", "diff"], [1116, 0, 1, "", "drop_nulls"], [1117, 0, 1, "", "eval"], [1118, 0, 1, "", "explode"], [1119, 0, 1, "", "first"], [1120, 0, 1, "", "gather"], [1121, 0, 1, "", "gather_every"], [1122, 0, 1, "", "get"], [1123, 0, 1, "", "head"], [1124, 0, 1, "", "join"], [1125, 0, 1, "", "last"], [1126, 0, 1, "", "len"], [1127, 0, 1, "", "lengths"], [1128, 0, 1, "", "max"], [1129, 0, 1, "", "mean"], [1130, 0, 1, "", "median"], [1131, 0, 1, "", "min"], [1132, 0, 1, "", "n_unique"], [1133, 0, 1, "", "reverse"], [1134, 0, 1, "", "sample"], [1135, 0, 1, "", "set_difference"], [1136, 0, 1, "", "set_intersection"], [1137, 0, 1, "", "set_symmetric_difference"], [1138, 0, 1, "", "set_union"], [1139, 0, 1, "", "shift"], [1140, 0, 1, "", "slice"], [1141, 0, 1, "", "sort"], [1142, 0, 1, "", "std"], [1143, 0, 1, "", "sum"], [1144, 0, 1, "", "tail"], [1145, 0, 1, "", "take"], [1146, 0, 1, "", "to_array"], [1147, 0, 1, "", "to_struct"], [1148, 0, 1, "", "unique"], [1149, 0, 1, "", "var"]], "polars.Series.str": [[1218, 0, 1, "", "concat"], [1219, 0, 1, "", "contains"], [1220, 0, 1, "", "contains_any"], [1221, 0, 1, "", "count_match"], [1222, 0, 1, "", "count_matches"], [1223, 0, 1, "", "decode"], [1224, 0, 1, "", "encode"], [1225, 0, 1, "", "ends_with"], [1226, 0, 1, "", "explode"], [1227, 0, 1, "", "extract"], [1228, 0, 1, "", "extract_all"], [1229, 0, 1, "", "extract_groups"], [1230, 0, 1, "", "find"], [1231, 0, 1, "", "head"], [1232, 0, 1, "", "json_decode"], [1233, 0, 1, "", "json_extract"], [1234, 0, 1, "", "json_path_match"], [1235, 0, 1, "", "len_bytes"], [1236, 0, 1, "", "len_chars"], [1237, 0, 1, "", "lengths"], [1238, 0, 1, "", "ljust"], [1239, 0, 1, "", "lstrip"], [1240, 0, 1, "", "n_chars"], [1241, 0, 1, "", "pad_end"], [1242, 0, 1, "", "pad_start"], [1243, 0, 1, "", "parse_int"], [1244, 0, 1, "", "replace"], [1245, 0, 1, "", "replace_all"], [1246, 0, 1, "", "replace_many"], [1247, 0, 1, "", "reverse"], [1248, 0, 1, "", "rjust"], [1249, 0, 1, "", "rstrip"], [1250, 0, 1, "", "slice"], [1251, 0, 1, "", "split"], [1252, 0, 1, "", "split_exact"], [1253, 0, 1, "", "splitn"], [1254, 0, 1, "", "starts_with"], [1255, 0, 1, "", "strip"], [1256, 0, 1, "", "strip_chars"], [1257, 0, 1, "", "strip_chars_end"], [1258, 0, 1, "", "strip_chars_start"], [1259, 0, 1, "", "strip_prefix"], [1260, 0, 1, "", "strip_suffix"], [1261, 0, 1, "", "strptime"], [1262, 0, 1, "", "tail"], [1263, 0, 1, "", "to_date"], [1264, 0, 1, "", "to_datetime"], [1265, 0, 1, "", "to_decimal"], [1266, 0, 1, "", "to_integer"], [1267, 0, 1, "", "to_lowercase"], [1268, 0, 1, "", "to_time"], [1269, 0, 1, "", "to_titlecase"], [1270, 0, 1, "", "to_uppercase"], [1271, 0, 1, "", "zfill"]], "polars.Series.struct": [[1272, 0, 1, "", "field"], [1273, 3, 1, "", "fields"], [1274, 0, 1, "", "json_encode"], [1275, 0, 1, "", "rename_fields"], [1276, 3, 1, "", "schema"], [1277, 0, 1, "", "unnest"]], "polars.StringCache": [[53, 0, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[283, 0, 1, "", "__iter__"], [284, 0, 1, "", "agg"], [285, 0, 1, "", "all"], [286, 0, 1, "", "apply"], [287, 0, 1, "", "count"], [288, 0, 1, "", "first"], [289, 0, 1, "", "head"], [290, 0, 1, "", "last"], [291, 0, 1, "", "len"], [292, 0, 1, "", "map_groups"], [293, 0, 1, "", "max"], [294, 0, 1, "", "mean"], [295, 0, 1, "", "median"], [296, 0, 1, "", "min"], [297, 0, 1, "", "n_unique"], [298, 0, 1, "", "quantile"], [299, 0, 1, "", "sum"], [300, 0, 1, "", "tail"]], "polars.datatypes": [[63, 2, 1, "", "Array"], [64, 2, 1, "", "Binary"], [65, 2, 1, "", "Boolean"], [66, 2, 1, "", "Categorical"], [67, 2, 1, "", "DataType"], [68, 2, 1, "", "Date"], [69, 2, 1, "", "Datetime"], [70, 2, 1, "", "Decimal"], [71, 2, 1, "", "Duration"], [72, 2, 1, "", "Enum"], [73, 2, 1, "", "Float32"], [74, 2, 1, "", "Float64"], [75, 2, 1, "", "Int16"], [76, 2, 1, "", "Int32"], [77, 2, 1, "", "Int64"], [78, 2, 1, "", "Int8"], [79, 2, 1, "", "List"], [80, 2, 1, "", "Null"], [81, 2, 1, "", "Object"], [82, 2, 1, "", "String"], [83, 2, 1, "", "Struct"], [84, 2, 1, "", "Time"], [85, 2, 1, "", "UInt16"], [86, 2, 1, "", "UInt32"], [87, 2, 1, "", "UInt64"], [88, 2, 1, "", "UInt8"], [89, 2, 1, "", "Unknown"], [90, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[66, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[78, 0, 1, "", "__init__"]], "polars.datatypes.List": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[81, 0, 1, "", "__init__"]], "polars.datatypes.String": [[82, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[83, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[86, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[87, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[88, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[89, 0, 1, "", "__init__"]], "polars.exceptions": [[93, 5, 1, "", "ArrowError"], [94, 5, 1, "", "ColumnNotFoundError"], [95, 5, 1, "", "ComputeError"], [96, 5, 1, "", "DuplicateError"], [97, 5, 1, "", "InvalidOperationError"], [98, 5, 1, "", "NoDataError"], [99, 5, 1, "", "NoRowsReturnedError"], [100, 5, 1, "", "PolarsError"], [101, 5, 1, "", "PolarsPanicError"], [102, 5, 1, "", "RowsError"], [103, 5, 1, "", "SchemaError"], [104, 5, 1, "", "SchemaFieldNotFoundError"], [105, 5, 1, "", "ShapeError"], [106, 5, 1, "", "StructFieldNotFoundError"], [107, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[117, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[893, 0, 1, "", "agg"], [894, 0, 1, "", "all"], [895, 0, 1, "", "apply"], [896, 0, 1, "", "count"], [897, 0, 1, "", "first"], [898, 0, 1, "", "head"], [899, 0, 1, "", "last"], [900, 0, 1, "", "len"], [901, 0, 1, "", "map_groups"], [902, 0, 1, "", "max"], [903, 0, 1, "", "mean"], [904, 0, 1, "", "median"], [905, 0, 1, "", "min"], [906, 0, 1, "", "n_unique"], [907, 0, 1, "", "quantile"], [908, 0, 1, "", "sum"], [909, 0, 1, "", "tail"]], "polars.plugins": [[917, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[918, 4, 1, "", "all"], [918, 4, 1, "", "by_dtype"], [918, 4, 1, "", "by_name"], [918, 4, 1, "", "categorical"], [918, 4, 1, "", "contains"], [918, 4, 1, "", "date"], [918, 4, 1, "", "datetime"], [918, 4, 1, "", "duration"], [918, 4, 1, "", "ends_with"], [918, 4, 1, "", "expand_selector"], [918, 4, 1, "", "first"], [918, 4, 1, "", "float"], [918, 4, 1, "", "integer"], [918, 4, 1, "", "is_selector"], [918, 4, 1, "", "last"], [918, 4, 1, "", "matches"], [918, 4, 1, "", "numeric"], [918, 4, 1, "", "starts_with"], [918, 4, 1, "", "string"], [918, 4, 1, "", "temporal"], [918, 4, 1, "", "time"]], "polars.testing": [[143, 4, 1, "", "assert_frame_equal"], [144, 4, 1, "", "assert_frame_not_equal"], [145, 4, 1, "", "assert_series_equal"], [146, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[147, 2, 1, "", "column"], [148, 4, 1, "", "columns"], [149, 4, 1, "", "create_list_strategy"], [150, 4, 1, "", "dataframes"], [151, 4, 1, "", "load_profile"], [152, 4, 1, "", "series"], [153, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[147, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 177, 1064], "api": [1, 55, 56, 57, 58, 812], "provid": 1, "new": 1, "function": [1, 799, 811, 918], "avail": 1, "registr": 1, "exampl": [1, 309, 918, 1312, 1317], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1317], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 157], "activate_decim": 2, "load": [3, 157], "load_from_fil": 4, "restore_default": 5, "save": [6, 157], "save_to_fil": 7, "set_ascii_t": 8, "set_auto_structifi": 9, "set_decimal_separ": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_verbos": 30, "state": [31, 157], "datafram": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 150, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 306], "write_avro": 32, "write_clipboard": 33, "write_csv": 34, "write_databas": 35, "write_delta": 36, "write_excel": 37, "write_ipc": 38, "write_ipc_stream": 39, "write_json": [40, 565], "write_ndjson": 41, "write_parquet": 42, "lazyfram": [43, 44, 45, 46, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913], "sink_csv": 43, "sink_ipc": 44, "sink_ndjson": 45, "sink_parquet": 46, "sqlcontext": [47, 48, 49, 50, 51, 52], "execut": 47, "regist": 48, "register_glob": 49, "register_mani": 50, "tabl": 51, "unregist": 52, "stringcach": [53, 811], "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "build_info": 59, "collect_al": 60, "collect_all_async": 61, "concat": [62, 503, 638, 1111, 1218], "datatyp": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 310], "arrai": [63, 792, 1300], "binari": [64, 793, 806, 1302], "boolean": [65, 794, 1303], "categor": 66, "date": [68, 402, 741, 1005], "datetim": [69, 403, 744, 1006], "decim": 70, "durat": [71, 747], "enum": 72, "float32": 73, "float64": 74, "int16": 75, "int32": 76, "int64": 77, "int8": 78, "list": [79, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 801, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1309], "null": 80, "object": 81, "string": [82, 310, 807, 1313], "struct": [83, 692, 693, 694, 782, 808, 1272, 1273, 1274, 1275, 1276, 1277, 1314], "time": [84, 432, 786, 1039], "uint16": 85, "uint32": 86, "uint64": 87, "uint8": 88, "unknown": 89, "utf8": 90, "disable_string_cach": 91, "enable_string_cach": 92, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 311], "arrowerror": 93, "columnnotfounderror": 94, "computeerror": 95, "duplicateerror": 96, "invalidoperationerror": 97, "nodataerror": 98, "norowsreturnederror": 99, "polarserror": 100, "polarspanicerror": 101, "rowserror": 102, "schemaerror": 103, "schemafieldnotfounderror": 104, "shapeerror": 105, "structfieldnotfounderror": 106, "toomanyrowsreturnederror": 107, "from_arrow": 108, "from_datafram": 109, "from_dict": [110, 111], "from_numpi": 112, "from_panda": 113, "from_record": 114, "from_repr": 115, "get_index_typ": 116, "io": 117, "csv": [117, 813], "batched_read": 117, "batchedcsvread": 117, "next_batch": 117, "read_avro": 118, "read_clipboard": 119, "read_csv": 120, "read_csv_batch": 121, "read_databas": 122, "read_database_uri": 123, "read_delta": 124, "read_excel": 125, "read_ipc": 126, "read_ipc_schema": 127, "read_ipc_stream": 128, "read_json": 129, "read_ndjson": 130, "read_od": 131, "read_parquet": 132, "read_parquet_schema": 133, "scan_csv": 134, "scan_delta": 135, "scan_iceberg": 136, "scan_ipc": 137, "scan_ndjson": 138, "scan_parquet": 139, "scan_pyarrow_dataset": 140, "set_random_se": 141, "show_vers": 142, "test": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 1317], "assert_frame_equ": 143, "assert_frame_not_equ": 144, "assert_series_equ": 145, "assert_series_not_equ": 146, "parametr": [147, 148, 149, 150, 151, 152, 153, 1317], "column": [147, 148, 166, 797, 823], "create_list_strategi": 149, "load_profil": 151, "seri": [152, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1308], "set_profil": 153, "thread_pool_s": 154, "threadpool_s": 155, "using_string_cach": 156, "option": 157, "us": 157, "context": 157, "manag": 157, "decor": 157, "aggreg": [158, 312, 814, 919], "__dataframe__": 159, "appli": [160, 286, 321, 718, 895, 925], "approx_n_uniqu": [161, 322, 719, 815], "bottom_k": [162, 364, 816, 966], "cast": [163, 366, 818, 967], "clear": [164, 819, 976], "clone": [165, 820, 980], "corr": [167, 729], "count": [168, 287, 377, 730, 824, 896], "describ": [169, 825, 994], "drop": [170, 827], "drop_in_plac": 171, "drop_nul": [172, 395, 508, 828, 998, 1116], "dtype": [173, 829, 1054], "equal": [174, 1056], "estimated_s": [175, 1057], "explod": [176, 340, 456, 510, 646, 831, 943, 1063, 1118, 1226], "fill_nan": [178, 458, 833, 1066], "fill_nul": [179, 459, 834, 1067], "filter": [180, 460, 835, 1068], "find_idx_by_nam": 181, "flag": [182, 1069], "fold": [183, 751], "frame_equ": 184, "gather_everi": [185, 468, 513, 837, 1072, 1121], "get_column": [186, 188], "get_column_index": 187, "glimps": 189, "group_bi": [190, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 838, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909], "group_by_dynam": [191, 839], "group_by_rol": [192, 840], "groupbi": [193, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 305, 841, 912], "groupby_dynam": [194, 842], "groupby_rol": [195, 843], "hash_row": 196, "head": [197, 289, 473, 515, 651, 755, 844, 898, 1076, 1123, 1231], "height": 198, "hstack": 199, "insert_at_idx": 200, "insert_column": 201, "interpol": [202, 477, 846, 1080], "is_dupl": [203, 479, 1083], "is_empti": [204, 1084], "is_uniqu": [205, 492, 1101], "item": [206, 1103], "iter_column": 207, "iter_row": 208, "iter_slic": 209, "join": [210, 343, 516, 847, 946, 1124], "join_asof": [211, 848], "lazi": [212, 850], "limit": [213, 498, 851, 1106], "map_row": 214, "max": [215, 293, 345, 520, 552, 765, 854, 902, 948, 1015, 1128, 1156], "max_horizont": [216, 766], "mean": [217, 294, 521, 553, 767, 855, 903, 1016, 1129, 1157], "mean_horizont": [218, 768], "median": [219, 295, 346, 522, 554, 769, 856, 904, 949, 1017, 1130, 1158], "melt": [220, 857], "merge_sort": [221, 858], "min": [222, 296, 347, 523, 566, 770, 859, 905, 950, 1023, 1131, 1159], "min_horizont": [223, 771], "n_chunk": [224, 1161], "n_uniqu": [225, 297, 348, 524, 570, 772, 906, 951, 1132, 1162], "null_count": [226, 586, 860, 1168], "partition_bi": 227, "pipe": [228, 592, 861], "pivot": 229, "product": [230, 595, 1172], "quantil": [231, 298, 597, 774, 863, 907, 1174], "rechunk": [232, 600, 1176], "renam": [233, 864, 1178], "replac": [234, 603, 664, 1179, 1244], "replace_at_idx": 235, "replace_column": 236, "revers": [237, 349, 525, 605, 667, 865, 952, 1133, 1181, 1247], "roll": [238, 608, 866], "row": [239, 240], "rows_by_kei": 241, "sampl": [242, 526, 622, 1134, 1197], "schema": [243, 867, 1276], "select": [244, 308, 779, 804, 868, 915, 1311], "select_seq": [245, 869], "set_sort": [246, 624, 871, 1203], "shape": [247, 1204], "shift": [248, 350, 531, 625, 872, 953, 1139, 1205], "shift_and_fil": [249, 626, 873, 1206], "shrink_to_fit": [250, 1208], "slice": [251, 532, 633, 670, 875, 1140, 1214, 1250], "sort": [252, 351, 533, 634, 876, 954, 1141, 1215], "sql": [253, 877, 1316], "std": [254, 352, 534, 637, 781, 878, 955, 1142, 1217], "sum": [255, 299, 353, 535, 697, 783, 879, 908, 956, 1143, 1278], "sum_horizont": [256, 784], "tail": [257, 300, 536, 682, 698, 785, 880, 909, 1144, 1262, 1279], "take_everi": [258, 700, 881, 1281], "to_arrow": [259, 1284], "to_dict": [260, 261], "to_dummi": [262, 1285], "to_init_repr": [263, 1287], "to_numpi": [264, 1289], "to_panda": [265, 1290], "to_seri": 266, "to_struct": [267, 355, 539, 958, 1147], "to_torch": 268, "top_k": [269, 704, 882, 1292], "transpos": 270, "uniqu": [271, 356, 540, 707, 883, 959, 1148, 1293], "unnest": [272, 884, 1277], "unstack": 273, "updat": [274, 885], "upsampl": 275, "var": [276, 357, 541, 711, 789, 886, 960, 1149, 1297], "vstack": 277, "width": [278, 887], "with_column": [279, 888], "with_columns_seq": [280, 889], "with_row_count": [281, 891], "with_row_index": [282, 892], "__iter__": 283, "agg": [284, 893], "all": [285, 317, 334, 499, 714, 894, 922, 937, 1107], "first": [288, 341, 461, 511, 750, 836, 897, 944, 1119], "last": [290, 344, 495, 517, 759, 849, 899, 947, 1125], "len": [291, 497, 518, 760, 900, 1105, 1126], "map_group": [292, 764, 901], "attribut": [301, 910, 1301], "comput": [302, 798, 1305], "descript": [303, 911, 1306], "export": [304, 1307], "miscellan": [307, 803, 811, 914, 1310], "manipul": [308, 804, 915, 1311], "plot": [309, 1312], "data": 310, "type": 310, "numer": [310, 806], "tempor": [310, 809, 1315], "nest": 310, "other": 310, "expr": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713], "ab": [313, 920], "add": 314, "agg_group": 315, "alia": [316, 921], "and_": 318, "ani": [319, 335, 500, 716, 923, 938, 1108], "append": [320, 924], "arcco": [323, 926], "arccosh": [324, 927], "arcsin": [325, 928], "arcsinh": [326, 929], "arctan": [327, 930], "arctanh": [328, 931], "arg_max": [329, 336, 501, 932, 939, 1109], "arg_min": [330, 337, 502, 933, 940, 1110], "arg_sort": [331, 934], "arg_tru": [332, 935], "arg_uniqu": [333, 936], "arr": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960], "contain": [338, 359, 504, 639, 941, 961, 1112, 1219], "count_match": [339, 505, 506, 641, 642, 942, 1113, 1114, 1221, 1222], "get": [342, 470, 514, 945, 1122], "to_list": [354, 957, 1288], "backward_fil": 358, "bin": [359, 360, 361, 362, 363, 961, 962, 963, 964, 965], "decod": [360, 643, 962, 1223], "encod": [361, 644, 963, 1224], "ends_with": [362, 645, 964, 1225], "starts_with": [363, 674, 965, 1254], "bottom_k_bi": 365, "cat": [367, 368, 968, 969, 970, 971, 972], "get_categori": [367, 968], "set_ord": [368, 970], "cbrt": [369, 973], "ceil": [370, 974], "clip": [371, 977], "clip_max": [372, 978], "clip_min": [373, 979], "co": [374, 981], "cosh": [375, 982], "cot": [376, 983], "cum_count": [378, 732], "cum_max": [379, 984], "cum_min": [380, 985], "cum_prod": [381, 986], "cum_sum": [382, 735, 987], "cumcount": 383, "cummax": [384, 988], "cummin": [385, 989], "cumprod": [386, 990], "cumsum": [387, 739, 991], "cumulative_ev": [388, 992], "cut": [389, 993], "degre": 390, "deseri": [391, 826], "diff": [392, 507, 995, 1115], "dot": [393, 996], "drop_nan": [394, 997], "dt": [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "add_business_dai": [396, 999], "base_utc_offset": [397, 1000], "cast_time_unit": [398, 1001], "centuri": [399, 1002], "combin": [400, 1003], "convert_time_zon": [401, 1004], "dai": [404, 405, 1007, 1008], "dst_offset": [406, 1009], "epoch": [407, 1010], "hour": [408, 409, 1011, 1012], "is_leap_year": [410, 1013], "iso_year": [411, 1014], "microsecond": [412, 413, 1018, 1019], "millennium": [414, 1020], "millisecond": [415, 416, 1021, 1022], "minut": [417, 418, 1024, 1025], "month": [419, 1026], "month_end": [420, 1027], "month_start": [421, 1028], "nanosecond": [422, 423, 1029, 1030], "offset_bi": [424, 1031], "ordinal_dai": [425, 1032], "quarter": [426, 1033], "replace_time_zon": [427, 1034], "round": [428, 620, 1035, 1195], "second": [429, 430, 1036, 1037], "strftime": [431, 1038], "timestamp": [433, 1040], "to_str": [434, 1041], "total_dai": [435, 1042], "total_hour": [436, 1043], "total_microsecond": [437, 1044], "total_millisecond": [438, 1045], "total_minut": [439, 1046], "total_nanosecond": [440, 1047], "total_second": [441, 1048], "truncat": [442, 1049], "week": [443, 1050], "weekdai": [444, 1051], "with_time_unit": [445, 1052], "year": [446, 1053], "entropi": [447, 1055], "eq": [448, 555], "eq_miss": 449, "ewm_mean": [450, 1058], "ewm_mean_bi": [451, 1059], "ewm_std": [452, 1060], "ewm_var": [453, 1061], "exclud": [454, 749], "exp": [455, 1062], "extend_const": [457, 1065], "flatten": 462, "floor": [463, 1070], "floordiv": 464, "forward_fil": 465, "from_json": 466, "gather": [467, 512, 1071, 1120], "ge": 469, "gt": 471, "hash": [472, 1075], "hist": [474, 1077], "implod": [475, 756, 1078], "inspect": [476, 845], "is_between": [478, 1081], "is_finit": [480, 1085], "is_first": [481, 1086], "is_first_distinct": [482, 1087], "is_in": [483, 1089], "is_infinit": [484, 1090], "is_last": [485, 1092], "is_last_distinct": [486, 1093], "is_nan": [487, 1094], "is_not": 488, "is_not_nan": [489, 1095], "is_not_nul": [490, 1096], "is_nul": [491, 1097], "keep_nam": 493, "kurtosi": [494, 1104], "le": 496, "eval": [509, 1117], "length": [519, 657, 1127, 1237], "set_differ": [527, 1135], "set_intersect": [528, 1136], "set_symmetric_differ": [529, 1137], "set_union": [530, 1138], "take": [537, 699, 1145, 1280], "to_arrai": [538, 1146], "log": [542, 1150], "log10": [543, 1151], "log1p": [544, 1152], "lower_bound": [545, 1153], "lt": 546, "map": [547, 572, 762, 852], "map_alia": 548, "map_batch": [549, 763, 853], "map_dict": [550, 1154], "map_el": [551, 1155], "meta": [555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 802], "has_multiple_output": 556, "is_regex_project": 557, "ne": [558, 582], "output_nam": 559, "pop": 560, "root_nam": 561, "serial": [562, 870], "tree_format": 563, "undo_alias": 564, "mod": 567, "mode": [568, 1160], "mul": 569, "name": [571, 572, 573, 574, 575, 576, 577, 578, 579, 797, 805, 1163], "keep": 571, "map_field": 573, "prefix": [574, 594], "prefix_field": 575, "suffix": [576, 696], "suffix_field": 577, "to_lowercas": [578, 687, 1267], "to_uppercas": [579, 690, 1270], "nan_max": [580, 1164], "nan_min": [581, 1165], "ne_miss": 583, "neg": 584, "not_": [585, 1167], "or_": 587, "over": 588, "pct_chang": [589, 1169], "peak_max": [590, 1170], "peak_min": [591, 1171], "pow": 593, "qcut": [596, 1173], "radian": 598, "rank": [599, 1175], "reinterpret": [601, 1177], "repeat_bi": 602, "reshap": [604, 1180], "rle": [606, 1182], "rle_id": [607, 1183], "rolling_appli": [609, 1184], "rolling_map": [610, 1185], "rolling_max": [611, 1186], "rolling_mean": [612, 1187], "rolling_median": [613, 1188], "rolling_min": [614, 1189], "rolling_quantil": [615, 1190], "rolling_skew": [616, 1191], "rolling_std": [617, 1192], "rolling_sum": [618, 1193], "rolling_var": [619, 1194], "round_sig_fig": [621, 1196], "search_sort": [623, 1199], "shrink_dtyp": [627, 1207], "shuffl": [628, 1209], "sign": [629, 1210], "sin": [630, 1211], "sinh": [631, 1212], "skew": [632, 1213], "sort_bi": 635, "sqrt": [636, 1216], "str": [638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271], "contains_ani": [640, 1220], "extract": [647, 1227], "extract_al": [648, 1228], "extract_group": [649, 1229], "find": [650, 1230], "json_decod": [652, 1232], "json_extract": [653, 1233], "json_path_match": [654, 1234], "len_byt": [655, 1235], "len_char": [656, 1236], "ljust": [658, 1238], "lstrip": [659, 1239], "n_char": [660, 1240], "pad_end": [661, 1241], "pad_start": [662, 1242], "parse_int": [663, 1243], "replace_al": [665, 1245], "replace_mani": [666, 1246], "rjust": [668, 1248], "rstrip": [669, 1249], "split": [671, 1251], "split_exact": [672, 1252], "splitn": [673, 1253], "strip": [675, 1255], "strip_char": [676, 1256], "strip_chars_end": [677, 1257], "strip_chars_start": [678, 1258], "strip_prefix": [679, 1259], "strip_suffix": [680, 1260], "strptime": [681, 1261], "to_dat": [683, 1263], "to_datetim": [684, 1264], "to_decim": [685, 1265], "to_integ": [686, 1266], "to_tim": [688, 1268], "to_titlecas": [689, 1269], "zfill": [691, 1271], "field": [692, 1272, 1273], "json_encod": [693, 1274], "rename_field": [694, 1275], "sub": 695, "tan": [701, 1282], "tanh": [702, 1283], "to_phys": [703, 1291], "top_k_bi": 705, "truediv": 706, "unique_count": [708, 1294], "upper_bound": [709, 1295], "value_count": [710, 1296], "where": 712, "xor": 713, "all_horizont": 715, "any_horizont": 717, "arang": 720, "arctan2": 721, "arctan2d": 722, "arg_sort_bi": 723, "arg_wher": 724, "business_day_count": 725, "coalesc": 726, "concat_list": 727, "concat_str": 728, "cov": 731, "cum_fold": 733, "cum_reduc": 734, "cum_sum_horizont": 736, "cumfold": 737, "cumreduc": 738, "cumsum_horizont": 740, "date_rang": [742, 743], "datetime_rang": [745, 746], "element": 748, "format": 752, "from_epoch": 753, "group": 754, "int_rang": [757, 758], "lit": 761, "ones": 773, "reduc": 775, "repeat": 776, "rolling_corr": 777, "rolling_cov": 778, "sql_expr": 780, "time_rang": [787, 788], "when": 790, "zero": 791, "categori": [795, 1304], "col": 796, "express": 800, "oper": [806, 918], "conjunct": 806, "comparison": 806, "window": 810, "convers": 811, "parallel": 811, "random": 811, "python": 812, "refer": 812, "input": 813, "output": 813, "avro": 813, "clipboard": 813, "databas": 813, "delta": 813, "lake": 813, "excel": 813, "od": 813, "feather": 813, "ipc": 813, "iceberg": 813, "json": 813, "parquet": 813, "pyarrow": 813, "dataset": 813, "cach": 817, "collect": 821, "collect_async": 822, "explain": 830, "fetch": 832, "profil": [862, 1317], "show_graph": 874, "with_context": 890, "lazygroupbi": [893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909], "read": 914, "write": 914, "logic": 914, "plan": 914, "metadata": 916, "plugin": 917, "selector": 918, "import": 918, "set": [918, 1201], "is_loc": 969, "to_loc": 971, "uses_lexical_ord": 972, "chunk_length": 975, "get_chunk": 1073, "has_valid": 1074, "inner_dtyp": 1079, "is_boolean": 1082, "is_float": 1088, "is_integ": 1091, "is_numer": 1098, "is_sort": 1099, "is_tempor": 1100, "is_utf8": 1102, "new_from_index": 1166, "scatter": 1198, "series_equ": 1200, "set_at_idx": 1202, "to_fram": 1286, "view": 1298, "zip_with": 1299, "interfac": 1316, "method": 1316, "assert": 1317, "primit": 1317, "strategi": 1317, "helper": 1317}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.find_idx_by_name": [[181, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.group_by_rolling": [[192, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.join_asof": [[211, "polars-dataframe-join-asof"]], "polars.DataFrame.dtypes": [[173, "polars-dataframe-dtypes"]], "polars.DataFrame.lazy": [[212, "polars-dataframe-lazy"]], "polars.DataFrame.head": [[197, "polars-dataframe-head"]], "polars.DataFrame.insert_column": [[201, "polars-dataframe-insert-column"]], "polars.DataFrame.get_column": [[186, "polars-dataframe-get-column"]], "polars.DataFrame.is_empty": [[204, "polars-dataframe-is-empty"]], "polars.DataFrame.gather_every": [[185, "polars-dataframe-gather-every"]], "polars.DataFrame.fill_nan": [[178, "polars-dataframe-fill-nan"]], "polars.DataFrame.median": [[219, "polars-dataframe-median"]], "polars.DataFrame.map_rows": [[214, "polars-dataframe-map-rows"]], "polars.DataFrame.mean": [[217, "polars-dataframe-mean"]], "polars.DataFrame.min": [[222, "polars-dataframe-min"]], "polars.DataFrame.hstack": [[199, "polars-dataframe-hstack"]], "polars.DataFrame.merge_sorted": [[221, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_columns": [[188, "polars-dataframe-get-columns"]], "polars.DataFrame.filter": [[180, "polars-dataframe-filter"]], "polars.DataFrame.estimated_size": [[175, "polars-dataframe-estimated-size"]], "polars.DataFrame.iter_slices": [[209, "polars-dataframe-iter-slices"]], "polars.DataFrame.extend": [[177, "polars-dataframe-extend"]], "polars.DataFrame.groupby": [[193, "polars-dataframe-groupby"]], "polars.DataFrame.limit": [[213, "polars-dataframe-limit"]], "polars.DataFrame.max": [[215, "polars-dataframe-max"]], "polars.DataFrame.iter_rows": [[208, "polars-dataframe-iter-rows"]], "polars.DataFrame.group_by_dynamic": [[191, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.null_count": [[226, "polars-dataframe-null-count"]], "polars.DataFrame.drop_nulls": [[172, "polars-dataframe-drop-nulls"]], "polars.DataFrame.n_chunks": [[224, "polars-dataframe-n-chunks"]], "polars.DataFrame.interpolate": [[202, "polars-dataframe-interpolate"]], "polars.DataFrame.n_unique": [[225, "polars-dataframe-n-unique"]], "polars.DataFrame.is_unique": [[205, "polars-dataframe-is-unique"]], "polars.DataFrame.flags": [[182, "polars-dataframe-flags"]], "polars.DataFrame.groupby_rolling": [[195, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.height": [[198, "polars-dataframe-height"]], "polars.DataFrame.fold": [[183, "polars-dataframe-fold"]], "polars.DataFrame.explode": [[176, "polars-dataframe-explode"]], "polars.DataFrame.iter_columns": [[207, "polars-dataframe-iter-columns"]], "polars.DataFrame.min_horizontal": [[223, "polars-dataframe-min-horizontal"]], "polars.DataFrame.partition_by": [[227, "polars-dataframe-partition-by"]], "polars.DataFrame.item": [[206, "polars-dataframe-item"]], "polars.DataFrame.group_by": [[190, "polars-dataframe-group-by"]], "polars.DataFrame.join": [[210, "polars-dataframe-join"]], "polars.DataFrame.glimpse": [[189, "polars-dataframe-glimpse"]], "polars.DataFrame.get_column_index": [[187, "polars-dataframe-get-column-index"]], "polars.DataFrame.is_duplicated": [[203, "polars-dataframe-is-duplicated"]], "polars.DataFrame.mean_horizontal": [[218, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.frame_equal": [[184, "polars-dataframe-frame-equal"]], "polars.DataFrame.melt": [[220, "polars-dataframe-melt"]], "polars.DataFrame.max_horizontal": [[216, "polars-dataframe-max-horizontal"]], "polars.DataFrame.hash_rows": [[196, "polars-dataframe-hash-rows"]], "polars.DataFrame.drop_in_place": [[171, "polars-dataframe-drop-in-place"]], "polars.DataFrame.insert_at_idx": [[200, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.groupby_dynamic": [[194, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.equals": [[174, "polars-dataframe-equals"]], "polars.DataFrame.fill_null": [[179, "polars-dataframe-fill-null"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.LazyFrame.sink_parquet": [[46, "polars-lazyframe-sink-parquet"]], "polars.SQLContext.register_many": [[50, "polars-sqlcontext-register-many"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.StringCache": [[53, "polars-stringcache"]], "polars.Config.set_thousands_separator": [[28, "polars-config-set-thousands-separator"]], "polars.DataFrame.write_ipc": [[38, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.LazyFrame.sink_ndjson": [[45, "polars-lazyframe-sink-ndjson"]], "polars.SQLContext.tables": [[51, "polars-sqlcontext-tables"]], "polars.Config.state": [[31, "polars-config-state"]], "polars.Config.set_fmt_float": [[12, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.LazyFrame.sink_csv": [[43, "polars-lazyframe-sink-csv"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Config.set_verbose": [[30, "polars-config-set-verbose"]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_decimal_separator": [[10, "polars-config-set-decimal-separator"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.SQLContext.register": [[48, "polars-sqlcontext-register"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_json": [[40, "polars-dataframe-write-json"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.Config.set_fmt_str_lengths": [[13, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1317, "examples"], [1312, "examples"], [918, "examples"], [309, "examples"]], "polars.DataFrame.write_ipc_stream": [[39, "polars-dataframe-write-ipc-stream"]], "polars.SQLContext.execute": [[47, "polars-sqlcontext-execute"]], "polars.Config.set_auto_structify": [[9, "polars-config-set-auto-structify"]], "polars.Config.load_from_file": [[4, "polars-config-load-from-file"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_avro": [[32, "polars-dataframe-write-avro"]], "polars.Config.set_trim_decimal_zeros": [[29, "polars-config-set-trim-decimal-zeros"]], "polars.Config.activate_decimals": [[2, "polars-config-activate-decimals"]], "Index": [[0, "index"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.Config.load": [[3, "polars-config-load"]], "polars.DataFrame.write_delta": [[36, "polars-dataframe-write-delta"]], "polars.Config.set_float_precision": [[11, "polars-config-set-float-precision"]], "polars.LazyFrame.sink_ipc": [[44, "polars-lazyframe-sink-ipc"]], "polars.DataFrame.write_database": [[35, "polars-dataframe-write-database"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_csv": [[34, "polars-dataframe-write-csv"]], "polars.SQLContext.register_globals": [[49, "polars-sqlcontext-register-globals"]], "polars.DataFrame.write_excel": [[37, "polars-dataframe-write-excel"]], "polars.DataFrame.write_parquet": [[42, "polars-dataframe-write-parquet"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_ndjson": [[41, "polars-dataframe-write-ndjson"]], "polars.Config.save_to_file": [[7, "polars-config-save-to-file"]], "polars.SQLContext.unregister": [[52, "polars-sqlcontext-unregister"]], "polars.Config.set_fmt_table_cell_list_len": [[14, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_clipboard": [[33, "polars-dataframe-write-clipboard"]], "polars.from_records": [[114, "polars-from-records"]], "polars.show_versions": [[142, "polars-show-versions"]], "polars.testing.assert_frame_equal": [[143, "polars-testing-assert-frame-equal"]], "polars.read_clipboard": [[119, "polars-read-clipboard"]], "polars.read_excel": [[125, "polars-read-excel"]], "polars.testing.parametric.dataframes": [[150, "polars-testing-parametric-dataframes"]], "polars.DataFrame.apply": [[160, "polars-dataframe-apply"]], "polars.read_parquet": [[132, "polars-read-parquet"]], "polars.DataFrame.count": [[168, "polars-dataframe-count"]], "polars.testing.parametric.series": [[152, "polars-testing-parametric-series"]], "polars.read_database_uri": [[123, "polars-read-database-uri"]], "polars.scan_ipc": [[137, "polars-scan-ipc"]], "polars.using_string_cache": [[156, "polars-using-string-cache"]], "polars.DataFrame.approx_n_unique": [[161, "polars-dataframe-approx-n-unique"]], "polars.testing.parametric.column": [[147, "polars-testing-parametric-column"]], "polars.scan_parquet": [[139, "polars-scan-parquet"]], "polars.DataFrame.corr": [[167, "polars-dataframe-corr"]], "polars.set_random_seed": [[141, "polars-set-random-seed"]], "polars.testing.parametric.create_list_strategy": [[149, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.load_profile": [[151, "polars-testing-parametric-load-profile"]], "polars.from_repr": [[115, "polars-from-repr"]], "polars.thread_pool_size": [[154, "polars-thread-pool-size"]], "polars.DataFrame.clear": [[164, "polars-dataframe-clear"]], "polars.DataFrame.columns": [[166, "polars-dataframe-columns"]], "polars.read_delta": [[124, "polars-read-delta"]], "polars.read_ipc_stream": [[128, "polars-read-ipc-stream"]], "polars.read_ipc": [[126, "polars-read-ipc"]], "polars.read_parquet_schema": [[133, "polars-read-parquet-schema"]], "polars.read_json": [[129, "polars-read-json"]], "polars.read_ndjson": [[130, "polars-read-ndjson"]], "Aggregation": [[158, "aggregation"], [919, "aggregation"], [814, "aggregation"], [312, "aggregation"]], "polars.scan_csv": [[134, "polars-scan-csv"]], "polars.read_avro": [[118, "polars-read-avro"]], "polars.testing.assert_series_equal": [[145, "polars-testing-assert-series-equal"]], "polars.scan_delta": [[135, "polars-scan-delta"]], "polars.DataFrame.bottom_k": [[162, "polars-dataframe-bottom-k"]], "polars.read_ods": [[131, "polars-read-ods"]], "polars.testing.assert_series_not_equal": [[146, "polars-testing-assert-series-not-equal"]], "Config": [[157, "config"]], "Config options": [[157, "config-options"]], "Config load, save, state": [[157, "config-load-save-state"]], "Use as a context manager": [[157, "use-as-a-context-manager"]], "Use as a decorator": [[157, "use-as-a-decorator"]], "polars.scan_pyarrow_dataset": [[140, "polars-scan-pyarrow-dataset"]], "polars.read_csv": [[120, "polars-read-csv"]], "polars.DataFrame.clone": [[165, "polars-dataframe-clone"]], "polars.get_index_type": [[116, "polars-get-index-type"]], "polars.scan_iceberg": [[136, "polars-scan-iceberg"]], "polars.read_ipc_schema": [[127, "polars-read-ipc-schema"]], "polars.read_csv_batched": [[121, "polars-read-csv-batched"]], "polars.threadpool_size": [[155, "polars-threadpool-size"]], "polars.read_database": [[122, "polars-read-database"]], "polars.testing.parametric.columns": [[148, "polars-testing-parametric-columns"]], "polars.DataFrame.cast": [[163, "polars-dataframe-cast"]], "polars.scan_ndjson": [[138, "polars-scan-ndjson"]], "polars.DataFrame.__dataframe__": [[159, "polars-dataframe-dataframe"]], "polars.DataFrame.describe": [[169, "polars-dataframe-describe"]], "polars.testing.assert_frame_not_equal": [[144, "polars-testing-assert-frame-not-equal"]], "polars.testing.parametric.set_profile": [[153, "polars-testing-parametric-set-profile"]], "polars.DataFrame.drop": [[170, "polars-dataframe-drop"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[117, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.Series.slice": [[1214, "polars-series-slice"]], "polars.Series.str.lengths": [[1237, "polars-series-str-lengths"]], "polars.Series.str.slice": [[1250, "polars-series-str-slice"]], "polars.Series.sort": [[1215, "polars-series-sort"]], "polars.Series.str.lstrip": [[1239, "polars-series-str-lstrip"]], "polars.Series.str.rjust": [[1248, "polars-series-str-rjust"]], "polars.Series.skew": [[1213, "polars-series-skew"]], "polars.Series.str.replace_all": [[1245, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1246, "polars-series-str-replace-many"]], "polars.Series.set": [[1201, "polars-series-set"]], "polars.Series.set_at_idx": [[1202, "polars-series-set-at-idx"]], "polars.Series.str.json_path_match": [[1234, "polars-series-str-json-path-match"]], "polars.Series.str.reverse": [[1247, "polars-series-str-reverse"]], "polars.Series.set_sorted": [[1203, "polars-series-set-sorted"]], "polars.Series.shrink_dtype": [[1207, "polars-series-shrink-dtype"]], "polars.Series.sinh": [[1212, "polars-series-sinh"]], "polars.Series.str.decode": [[1223, "polars-series-str-decode"]], "polars.Series.str.len_bytes": [[1235, "polars-series-str-len-bytes"]], "polars.Series.str.parse_int": [[1243, "polars-series-str-parse-int"]], "polars.Series.str.split_exact": [[1252, "polars-series-str-split-exact"]], "polars.Series.str.count_match": [[1221, "polars-series-str-count-match"]], "polars.Series.str.splitn": [[1253, "polars-series-str-splitn"]], "polars.Series.search_sorted": [[1199, "polars-series-search-sorted"]], "polars.Series.shape": [[1204, "polars-series-shape"]], "polars.Series.str.json_decode": [[1232, "polars-series-str-json-decode"]], "polars.Series.str.contains": [[1219, "polars-series-str-contains"]], "polars.Series.shuffle": [[1209, "polars-series-shuffle"]], "polars.Series.str.explode": [[1226, "polars-series-str-explode"]], "polars.Series.str.contains_any": [[1220, "polars-series-str-contains-any"]], "polars.Series.str.len_chars": [[1236, "polars-series-str-len-chars"]], "polars.Series.str.encode": [[1224, "polars-series-str-encode"]], "polars.Series.str.replace": [[1244, "polars-series-str-replace"]], "polars.Series.sign": [[1210, "polars-series-sign"]], "polars.Series.sqrt": [[1216, "polars-series-sqrt"]], "polars.Series.shrink_to_fit": [[1208, "polars-series-shrink-to-fit"]], "polars.Series.str.concat": [[1218, "polars-series-str-concat"]], "polars.Series.str.extract_all": [[1228, "polars-series-str-extract-all"]], "polars.Series.str.find": [[1230, "polars-series-str-find"]], "polars.Series.str.pad_start": [[1242, "polars-series-str-pad-start"]], "polars.Series.str.extract": [[1227, "polars-series-str-extract"]], "polars.Series.shift_and_fill": [[1206, "polars-series-shift-and-fill"]], "polars.Series.series_equal": [[1200, "polars-series-series-equal"]], "polars.Series.str.pad_end": [[1241, "polars-series-str-pad-end"]], "polars.Series.scatter": [[1198, "polars-series-scatter"]], "polars.Series.shift": [[1205, "polars-series-shift"]], "polars.Series.str.count_matches": [[1222, "polars-series-str-count-matches"]], "polars.Series.std": [[1217, "polars-series-std"]], "polars.Series.sin": [[1211, "polars-series-sin"]], "polars.Series.str.ends_with": [[1225, "polars-series-str-ends-with"]], "polars.Series.str.ljust": [[1238, "polars-series-str-ljust"]], "polars.Series.str.extract_groups": [[1229, "polars-series-str-extract-groups"]], "polars.Series.sample": [[1197, "polars-series-sample"]], "polars.Series.str.rstrip": [[1249, "polars-series-str-rstrip"]], "polars.Series.str.n_chars": [[1240, "polars-series-str-n-chars"]], "polars.Series.str.head": [[1231, "polars-series-str-head"]], "polars.Series.str.split": [[1251, "polars-series-str-split"]], "polars.Series.str.json_extract": [[1233, "polars-series-str-json-extract"]], "String": [[1313, "string"], [807, "string"], [310, "string"]], "Testing": [[1317, "testing"]], "Asserts": [[1317, "asserts"]], "Parametric testing": [[1317, "parametric-testing"]], "Polars primitives": [[1317, "polars-primitives"]], "Strategy helpers": [[1317, "strategy-helpers"]], "Profiles": [[1317, "profiles"]], "Manipulation/selection": [[1311, "manipulation-selection"], [915, "manipulation-selection"], [804, "manipulation-selection"], [308, "manipulation-selection"]], "Temporal": [[1315, "temporal"], [809, "temporal"], [310, "temporal"]], "SQL Interface": [[1316, "sql-interface"]], "Methods": [[1316, "methods"]], "Struct": [[1314, "struct"], [808, "struct"]], "Plot": [[1312, "plot"], [309, "plot"]], "polars.Series.pct_change": [[1169, "polars-series-pct-change"]], "polars.Series.rename": [[1178, "polars-series-rename"]], "polars.Series.list.slice": [[1140, "polars-series-list-slice"]], "polars.Series.qcut": [[1173, "polars-series-qcut"]], "polars.Series.rolling_mean": [[1187, "polars-series-rolling-mean"]], "polars.Series.rolling_std": [[1192, "polars-series-rolling-std"]], "polars.Series.not_": [[1167, "polars-series-not"]], "polars.Series.rechunk": [[1176, "polars-series-rechunk"]], "polars.Series.rolling_quantile": [[1190, "polars-series-rolling-quantile"]], "polars.Series.round": [[1195, "polars-series-round"]], "polars.Series.rle_id": [[1183, "polars-series-rle-id"]], "polars.Series.log": [[1150, "polars-series-log"]], "polars.Series.replace": [[1179, "polars-series-replace"]], "polars.Series.n_unique": [[1162, "polars-series-n-unique"]], "polars.Series.map_elements": [[1155, "polars-series-map-elements"]], "polars.Series.list.take": [[1145, "polars-series-list-take"]], "polars.Series.log10": [[1151, "polars-series-log10"]], "polars.Series.nan_max": [[1164, "polars-series-nan-max"]], "polars.Series.peak_min": [[1171, "polars-series-peak-min"]], "polars.Series.list.var": [[1149, "polars-series-list-var"]], "polars.Series.round_sig_figs": [[1196, "polars-series-round-sig-figs"]], "polars.Series.list.to_struct": [[1147, "polars-series-list-to-struct"]], "polars.Series.product": [[1172, "polars-series-product"]], "polars.Series.list.sort": [[1141, "polars-series-list-sort"]], "polars.Series.lower_bound": [[1153, "polars-series-lower-bound"]], "polars.Series.rolling_map": [[1185, "polars-series-rolling-map"]], "polars.Series.reverse": [[1181, "polars-series-reverse"]], "polars.Series.new_from_index": [[1166, "polars-series-new-from-index"]], "polars.Series.list.unique": [[1148, "polars-series-list-unique"]], "polars.Series.rolling_median": [[1188, "polars-series-rolling-median"]], "polars.Series.list.tail": [[1144, "polars-series-list-tail"]], "polars.Series.list.std": [[1142, "polars-series-list-std"]], "polars.Series.name": [[1163, "polars-series-name"]], "polars.Series.rolling_min": [[1189, "polars-series-rolling-min"]], "polars.Series.rolling_skew": [[1191, "polars-series-rolling-skew"]], "polars.Series.n_chunks": [[1161, "polars-series-n-chunks"]], "polars.Series.rolling_apply": [[1184, "polars-series-rolling-apply"]], "polars.Series.quantile": [[1174, "polars-series-quantile"]], "polars.Series.list.sum": [[1143, "polars-series-list-sum"]], "polars.Series.map_dict": [[1154, "polars-series-map-dict"]], "polars.Series.max": [[1156, "polars-series-max"]], "polars.Series.mean": [[1157, "polars-series-mean"]], "polars.Series.reshape": [[1180, "polars-series-reshape"]], "polars.Series.peak_max": [[1170, "polars-series-peak-max"]], "polars.Series.rolling_max": [[1186, "polars-series-rolling-max"]], "polars.Series.reinterpret": [[1177, "polars-series-reinterpret"]], "polars.Series.nan_min": [[1165, "polars-series-nan-min"]], "polars.Series.rle": [[1182, "polars-series-rle"]], "polars.Series.mode": [[1160, "polars-series-mode"]], "polars.Series.rolling_sum": [[1193, "polars-series-rolling-sum"]], "polars.Series.null_count": [[1168, "polars-series-null-count"]], "polars.Series.rank": [[1175, "polars-series-rank"]], "polars.Series.min": [[1159, "polars-series-min"]], "polars.Series.median": [[1158, "polars-series-median"]], "polars.Series.log1p": [[1152, "polars-series-log1p"]], "polars.Series.rolling_var": [[1194, "polars-series-rolling-var"]], "polars.Series.list.to_array": [[1146, "polars-series-list-to-array"]], "polars.Series.is_unique": [[1101, "polars-series-is-unique"]], "polars.Series.list.arg_max": [[1109, "polars-series-list-arg-max"]], "polars.Series.is_infinite": [[1090, "polars-series-is-infinite"]], "polars.Series.list.all": [[1107, "polars-series-list-all"]], "polars.Series.list.count_matches": [[1114, "polars-series-list-count-matches"]], "polars.Series.list.n_unique": [[1132, "polars-series-list-n-unique"]], "polars.Series.list.sample": [[1134, "polars-series-list-sample"]], "polars.Series.list.gather_every": [[1121, "polars-series-list-gather-every"]], "polars.Series.list.median": [[1130, "polars-series-list-median"]], "polars.Series.list.get": [[1122, "polars-series-list-get"]], "polars.Series.len": [[1105, "polars-series-len"]], "polars.Series.kurtosis": [[1104, "polars-series-kurtosis"]], "polars.Series.list.join": [[1124, "polars-series-list-join"]], "polars.Series.is_numeric": [[1098, "polars-series-is-numeric"]], "polars.Series.list.max": [[1128, "polars-series-list-max"]], "polars.Series.is_not_null": [[1096, "polars-series-is-not-null"]], "polars.Series.list.arg_min": [[1110, "polars-series-list-arg-min"]], "polars.Series.is_integer": [[1091, "polars-series-is-integer"]], "polars.Series.is_finite": [[1085, "polars-series-is-finite"]], "polars.Series.item": [[1103, "polars-series-item"]], "polars.Series.list.shift": [[1139, "polars-series-list-shift"]], "polars.Series.list.set_difference": [[1135, "polars-series-list-set-difference"]], "polars.Series.list.head": [[1123, "polars-series-list-head"]], "polars.Series.is_utf8": [[1102, "polars-series-is-utf8"]], "polars.Series.is_last": [[1092, "polars-series-is-last"]], "polars.Series.list.mean": [[1129, "polars-series-list-mean"]], "polars.Series.is_null": [[1097, "polars-series-is-null"]], "polars.Series.list.min": [[1131, "polars-series-list-min"]], "polars.Series.list.any": [[1108, "polars-series-list-any"]], "polars.Series.list.set_symmetric_difference": [[1137, "polars-series-list-set-symmetric-difference"]], "polars.Series.is_sorted": [[1099, "polars-series-is-sorted"]], "polars.Series.is_temporal": [[1100, "polars-series-is-temporal"]], "polars.Series.is_empty": [[1084, "polars-series-is-empty"]], "polars.Series.list.diff": [[1115, "polars-series-list-diff"]], "polars.Series.list.gather": [[1120, "polars-series-list-gather"]], "polars.Series.list.set_intersection": [[1136, "polars-series-list-set-intersection"]], "polars.Series.is_first": [[1086, "polars-series-is-first"]], "polars.Series.is_in": [[1089, "polars-series-is-in"]], "polars.Series.list.first": [[1119, "polars-series-list-first"]], "polars.Series.list.reverse": [[1133, "polars-series-list-reverse"]], "polars.Series.is_not_nan": [[1095, "polars-series-is-not-nan"]], "polars.Series.limit": [[1106, "polars-series-limit"]], "polars.Series.is_float": [[1088, "polars-series-is-float"]], "polars.Series.list.last": [[1125, "polars-series-list-last"]], "polars.Series.is_duplicated": [[1083, "polars-series-is-duplicated"]], "polars.Series.is_last_distinct": [[1093, "polars-series-is-last-distinct"]], "polars.Series.list.drop_nulls": [[1116, "polars-series-list-drop-nulls"]], "polars.Series.list.explode": [[1118, "polars-series-list-explode"]], "polars.Series.list.len": [[1126, "polars-series-list-len"]], "polars.Series.list.concat": [[1111, "polars-series-list-concat"]], "polars.Series.is_nan": [[1094, "polars-series-is-nan"]], "polars.Series.list.set_union": [[1138, "polars-series-list-set-union"]], "polars.Series.list.contains": [[1112, "polars-series-list-contains"]], "polars.Series.list.count_match": [[1113, "polars-series-list-count-match"]], "polars.Series.list.eval": [[1117, "polars-series-list-eval"]], "polars.Series.is_first_distinct": [[1087, "polars-series-is-first-distinct"]], "polars.Series.list.lengths": [[1127, "polars-series-list-lengths"]], "polars.from_dict": [[110, "polars-from-dict"]], "polars.datatypes.Unknown": [[89, "polars-datatypes-unknown"]], "polars.datatypes.Categorical": [[66, "polars-datatypes-categorical"]], "polars.from_pandas": [[113, "polars-from-pandas"]], "polars.datatypes.Float64": [[74, "polars-datatypes-float64"]], "polars.datatypes.Time": [[84, "polars-datatypes-time"]], "polars.enable_string_cache": [[92, "polars-enable-string-cache"]], "polars.exceptions.PolarsError": [[100, "polars-exceptions-polarserror"]], "polars.datatypes.Float32": [[73, "polars-datatypes-float32"]], "polars.exceptions.ArrowError": [[93, "polars-exceptions-arrowerror"]], "polars.datatypes.Null": [[80, "polars-datatypes-null"]], "polars.datatypes.UInt8": [[88, "polars-datatypes-uint8"]], "polars.datatypes.String": [[82, "polars-datatypes-string"]], "polars.datatypes.Int32": [[76, "polars-datatypes-int32"]], "polars.exceptions.PolarsPanicError": [[101, "polars-exceptions-polarspanicerror"]], "polars.exceptions.TooManyRowsReturnedError": [[107, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dicts": [[111, "polars-from-dicts"]], "polars.exceptions.NoRowsReturnedError": [[99, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.NoDataError": [[98, "polars-exceptions-nodataerror"]], "polars.disable_string_cache": [[91, "polars-disable-string-cache"]], "polars.exceptions.ShapeError": [[105, "polars-exceptions-shapeerror"]], "polars.datatypes.Datetime": [[69, "polars-datatypes-datetime"]], "polars.exceptions.DuplicateError": [[96, "polars-exceptions-duplicateerror"]], "polars.exceptions.SchemaError": [[103, "polars-exceptions-schemaerror"]], "polars.datatypes.Array": [[63, "polars-datatypes-array"]], "polars.collect_all": [[60, "polars-collect-all"]], "polars.exceptions.ComputeError": [[95, "polars-exceptions-computeerror"]], "polars.exceptions.StructFieldNotFoundError": [[106, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.InvalidOperationError": [[97, "polars-exceptions-invalidoperationerror"]], "polars.from_arrow": [[108, "polars-from-arrow"]], "polars.datatypes.Date": [[68, "polars-datatypes-date"]], "polars.build_info": [[59, "polars-build-info"]], "polars.exceptions.RowsError": [[102, "polars-exceptions-rowserror"]], "polars.datatypes.UInt32": [[86, "polars-datatypes-uint32"]], "polars.datatypes.DataType": [[67, "polars-datatypes-datatype"]], "polars.datatypes.Duration": [[71, "polars-datatypes-duration"]], "polars.datatypes.List": [[79, "polars-datatypes-list"]], "polars.datatypes.Utf8": [[90, "polars-datatypes-utf8"]], "polars.datatypes.Boolean": [[65, "polars-datatypes-boolean"]], "polars.datatypes.Object": [[81, "polars-datatypes-object"]], "polars.datatypes.Enum": [[72, "polars-datatypes-enum"]], "polars.datatypes.Struct": [[83, "polars-datatypes-struct"]], "polars.concat": [[62, "polars-concat"]], "polars.from_dataframe": [[109, "polars-from-dataframe"]], "polars.datatypes.Int8": [[78, "polars-datatypes-int8"]], "polars.datatypes.Int64": [[77, "polars-datatypes-int64"]], "polars.datatypes.UInt16": [[85, "polars-datatypes-uint16"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.from_numpy": [[112, "polars-from-numpy"]], "polars.collect_all_async": [[61, "polars-collect-all-async"]], "polars.exceptions.SchemaFieldNotFoundError": [[104, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ColumnNotFoundError": [[94, "polars-exceptions-columnnotfounderror"]], "polars.datatypes.Int16": [[75, "polars-datatypes-int16"]], "polars.datatypes.UInt64": [[87, "polars-datatypes-uint64"]], "polars.datatypes.Binary": [[64, "polars-datatypes-binary"]], "polars.datatypes.Decimal": [[70, "polars-datatypes-decimal"]], "polars.Series.ewm_std": [[1060, "polars-series-ewm-std"]], "polars.Series.is_between": [[1081, "polars-series-is-between"]], "polars.Series.dt.round": [[1035, "polars-series-dt-round"]], "polars.Series.dt.month": [[1026, "polars-series-dt-month"]], "polars.Series.dt.year": [[1053, "polars-series-dt-year"]], "polars.Series.entropy": [[1055, "polars-series-entropy"]], "polars.Series.dt.seconds": [[1037, "polars-series-dt-seconds"]], "polars.Series.dt.nanoseconds": [[1030, "polars-series-dt-nanoseconds"]], "polars.Series.extend": [[1064, "polars-series-extend"]], "polars.Series.dt.total_hours": [[1043, "polars-series-dt-total-hours"]], "polars.Series.get_chunks": [[1073, "polars-series-get-chunks"]], "polars.Series.head": [[1076, "polars-series-head"]], "polars.Series.dt.nanosecond": [[1029, "polars-series-dt-nanosecond"]], "polars.Series.equals": [[1056, "polars-series-equals"]], "polars.Series.explode": [[1063, "polars-series-explode"]], "polars.Series.fill_null": [[1067, "polars-series-fill-null"]], "polars.Series.estimated_size": [[1057, "polars-series-estimated-size"]], "polars.Series.flags": [[1069, "polars-series-flags"]], "polars.Series.dt.month_start": [[1028, "polars-series-dt-month-start"]], "polars.Series.dt.ordinal_day": [[1032, "polars-series-dt-ordinal-day"]], "polars.Series.dt.strftime": [[1038, "polars-series-dt-strftime"]], "polars.Series.dt.week": [[1050, "polars-series-dt-week"]], "polars.Series.dt.replace_time_zone": [[1034, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.total_days": [[1042, "polars-series-dt-total-days"]], "polars.Series.dt.total_nanoseconds": [[1047, "polars-series-dt-total-nanoseconds"]], "polars.Series.floor": [[1070, "polars-series-floor"]], "polars.Series.dt.truncate": [[1049, "polars-series-dt-truncate"]], "polars.Series.implode": [[1078, "polars-series-implode"]], "polars.Series.interpolate": [[1080, "polars-series-interpolate"]], "polars.Series.inner_dtype": [[1079, "polars-series-inner-dtype"]], "polars.Series.exp": [[1062, "polars-series-exp"]], "polars.Series.dt.timestamp": [[1040, "polars-series-dt-timestamp"]], "polars.Series.gather": [[1071, "polars-series-gather"]], "polars.Series.dtype": [[1054, "polars-series-dtype"]], "polars.Series.gather_every": [[1072, "polars-series-gather-every"]], "polars.Series.dt.total_seconds": [[1048, "polars-series-dt-total-seconds"]], "polars.Series.has_validity": [[1074, "polars-series-has-validity"]], "polars.Series.fill_nan": [[1066, "polars-series-fill-nan"]], "polars.Series.dt.second": [[1036, "polars-series-dt-second"]], "polars.Series.dt.to_string": [[1041, "polars-series-dt-to-string"]], "polars.Series.dt.quarter": [[1033, "polars-series-dt-quarter"]], "polars.Series.ewm_var": [[1061, "polars-series-ewm-var"]], "polars.Series.dt.time": [[1039, "polars-series-dt-time"]], "polars.Series.dt.offset_by": [[1031, "polars-series-dt-offset-by"]], "polars.Series.dt.total_minutes": [[1046, "polars-series-dt-total-minutes"]], "polars.Series.hash": [[1075, "polars-series-hash"]], "polars.Series.dt.weekday": [[1051, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1052, "polars-series-dt-with-time-unit"]], "polars.Series.ewm_mean": [[1058, "polars-series-ewm-mean"]], "polars.Series.ewm_mean_by": [[1059, "polars-series-ewm-mean-by"]], "polars.Series.filter": [[1068, "polars-series-filter"]], "polars.Series.is_boolean": [[1082, "polars-series-is-boolean"]], "polars.Series.extend_constant": [[1065, "polars-series-extend-constant"]], "polars.Series.dt.total_microseconds": [[1044, "polars-series-dt-total-microseconds"]], "polars.Series.hist": [[1077, "polars-series-hist"]], "polars.Series.dt.total_milliseconds": [[1045, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.month_end": [[1027, "polars-series-dt-month-end"]], "polars.Series.cummin": [[989, "polars-series-cummin"]], "polars.Series.dt.hours": [[1012, "polars-series-dt-hours"]], "polars.Series.dt.mean": [[1016, "polars-series-dt-mean"]], "polars.Series.clear": [[976, "polars-series-clear"]], "polars.Series.dt.max": [[1015, "polars-series-dt-max"]], "polars.Series.cos": [[981, "polars-series-cos"]], "polars.Series.dt.cast_time_unit": [[1001, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.days": [[1008, "polars-series-dt-days"]], "polars.Series.dt.is_leap_year": [[1013, "polars-series-dt-is-leap-year"]], "polars.Series.dt.microseconds": [[1019, "polars-series-dt-microseconds"]], "polars.Series.cumsum": [[991, "polars-series-cumsum"]], "polars.Series.dt.base_utc_offset": [[1000, "polars-series-dt-base-utc-offset"]], "polars.Series.drop_nulls": [[998, "polars-series-drop-nulls"]], "polars.Series.dt.datetime": [[1006, "polars-series-dt-datetime"]], "polars.Series.dt.microsecond": [[1018, "polars-series-dt-microsecond"]], "polars.Series.cumulative_eval": [[992, "polars-series-cumulative-eval"]], "polars.Series.dt.century": [[1002, "polars-series-dt-century"]], "polars.Series.dt.minutes": [[1025, "polars-series-dt-minutes"]], "polars.Series.clip_min": [[979, "polars-series-clip-min"]], "polars.Series.describe": [[994, "polars-series-describe"]], "polars.Series.dt.millisecond": [[1021, "polars-series-dt-millisecond"]], "polars.Series.cat.set_ordering": [[970, "polars-series-cat-set-ordering"]], "polars.Series.clip_max": [[978, "polars-series-clip-max"]], "polars.Series.dt.median": [[1017, "polars-series-dt-median"]], "polars.Series.dt.hour": [[1011, "polars-series-dt-hour"]], "polars.Series.cummax": [[988, "polars-series-cummax"]], "polars.Series.cum_sum": [[987, "polars-series-cum-sum"]], "polars.Series.diff": [[995, "polars-series-diff"]], "polars.Series.dt.date": [[1005, "polars-series-dt-date"]], "polars.Series.chunk_lengths": [[975, "polars-series-chunk-lengths"]], "polars.Series.dt.convert_time_zone": [[1004, "polars-series-dt-convert-time-zone"]], "polars.Series.clone": [[980, "polars-series-clone"]], "polars.Series.cbrt": [[973, "polars-series-cbrt"]], "polars.Series.clip": [[977, "polars-series-clip"]], "polars.Series.dot": [[996, "polars-series-dot"]], "polars.Series.cum_min": [[985, "polars-series-cum-min"]], "polars.Series.ceil": [[974, "polars-series-ceil"]], "polars.Series.dt.min": [[1023, "polars-series-dt-min"]], "polars.Series.cum_prod": [[986, "polars-series-cum-prod"]], "polars.Series.dt.minute": [[1024, "polars-series-dt-minute"]], "polars.Series.cut": [[993, "polars-series-cut"]], "polars.Series.dt.day": [[1007, "polars-series-dt-day"]], "polars.Series.dt.iso_year": [[1014, "polars-series-dt-iso-year"]], "polars.Series.dt.combine": [[1003, "polars-series-dt-combine"]], "polars.Series.drop_nans": [[997, "polars-series-drop-nans"]], "polars.Series.dt.epoch": [[1010, "polars-series-dt-epoch"]], "polars.Series.cat.to_local": [[971, "polars-series-cat-to-local"]], "polars.Series.cot": [[983, "polars-series-cot"]], "polars.Series.cosh": [[982, "polars-series-cosh"]], "polars.Series.cum_max": [[984, "polars-series-cum-max"]], "polars.Series.dt.millennium": [[1020, "polars-series-dt-millennium"]], "polars.Series.cumprod": [[990, "polars-series-cumprod"]], "polars.Series.cat.is_local": [[969, "polars-series-cat-is-local"]], "polars.Series.dt.dst_offset": [[1009, "polars-series-dt-dst-offset"]], "polars.Series.cat.uses_lexical_ordering": [[972, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.dt.milliseconds": [[1022, "polars-series-dt-milliseconds"]], "polars.Series.dt.add_business_days": [[999, "polars-series-dt-add-business-days"]], "polars.LazyFrame.with_columns_seq": [[889, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.with_columns": [[888, "polars-lazyframe-with-columns"]], "polars.LazyFrame.median": [[856, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[857, "polars-lazyframe-melt"]], "polars.LazyFrame.unique": [[883, "polars-lazyframe-unique"]], "polars.LazyFrame.with_row_count": [[891, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.mean": [[855, "polars-lazyframe-mean"]], "polars.LazyFrame.rolling": [[866, "polars-lazyframe-rolling"]], "polars.LazyFrame.schema": [[867, "polars-lazyframe-schema"]], "polars.LazyFrame.std": [[878, "polars-lazyframe-std"]], "polars.LazyFrame.tail": [[880, "polars-lazyframe-tail"]], "polars.LazyFrame.update": [[885, "polars-lazyframe-update"]], "polars.LazyFrame.width": [[887, "polars-lazyframe-width"]], "polars.LazyFrame.with_context": [[890, "polars-lazyframe-with-context"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[907, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.profile": [[862, "polars-lazyframe-profile"]], "polars.LazyFrame.unnest": [[884, "polars-lazyframe-unnest"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[894, "polars-lazyframe-group-by-lazygroupby-all"]], "Attributes": [[910, "attributes"], [1301, "attributes"], [301, "attributes"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[893, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.take_every": [[881, "polars-lazyframe-take-every"]], "polars.LazyFrame.quantile": [[863, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[864, "polars-lazyframe-rename"]], "polars.LazyFrame.slice": [[875, "polars-lazyframe-slice"]], "Descriptive": [[911, "descriptive"], [1306, "descriptive"], [303, "descriptive"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[903, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[896, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.show_graph": [[874, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sort": [[876, "polars-lazyframe-sort"]], "polars.LazyFrame.set_sorted": [[871, "polars-lazyframe-set-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[899, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[898, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.pipe": [[861, "polars-lazyframe-pipe"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[900, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.LazyFrame.top_k": [[882, "polars-lazyframe-top-k"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[902, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[901, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[909, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.reverse": [[865, "polars-lazyframe-reverse"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[904, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[895, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.select": [[868, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[872, "polars-lazyframe-shift"]], "polars.LazyFrame.sum": [[879, "polars-lazyframe-sum"]], "polars.LazyFrame.var": [[886, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[906, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.shift_and_fill": [[873, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[908, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[897, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[905, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.merge_sorted": [[858, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.sql": [[877, "polars-lazyframe-sql"]], "polars.LazyFrame.min": [[859, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[860, "polars-lazyframe-null-count"]], "polars.LazyFrame.serialize": [[870, "polars-lazyframe-serialize"]], "polars.LazyFrame.with_row_index": [[892, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.select_seq": [[869, "polars-lazyframe-select-seq"]], "Columns / names": [[797, "columns-names"]], "polars.map_batches": [[763, "polars-map-batches"]], "polars.mean": [[767, "polars-mean"]], "polars.tail": [[785, "polars-tail"]], "polars.exclude": [[749, "polars-exclude"]], "Array": [[792, "array"], [1300, "array"]], "polars.max_horizontal": [[766, "polars-max-horizontal"]], "polars.struct": [[782, "polars-struct"]], "polars.max": [[765, "polars-max"]], "polars.reduce": [[775, "polars-reduce"]], "polars.duration": [[747, "polars-duration"]], "polars.head": [[755, "polars-head"]], "polars.groups": [[754, "polars-groups"]], "polars.min": [[770, "polars-min"]], "polars.format": [[752, "polars-format"]], "polars.int_ranges": [[758, "polars-int-ranges"]], "polars.col": [[796, "polars-col"]], "polars.map": [[762, "polars-map"]], "polars.element": [[748, "polars-element"]], "polars.fold": [[751, "polars-fold"]], "polars.sql_expr": [[780, "polars-sql-expr"]], "polars.repeat": [[776, "polars-repeat"]], "polars.from_epoch": [[753, "polars-from-epoch"]], "polars.sum_horizontal": [[784, "polars-sum-horizontal"]], "polars.mean_horizontal": [[768, "polars-mean-horizontal"]], "polars.datetime_range": [[745, "polars-datetime-range"]], "Binary": [[793, "binary"], [1302, "binary"], [806, "binary"]], "polars.select": [[779, "polars-select"]], "polars.date_range": [[742, "polars-date-range"]], "polars.map_groups": [[764, "polars-map-groups"]], "Categories": [[795, "categories"], [1304, "categories"]], "polars.ones": [[773, "polars-ones"]], "polars.date_ranges": [[743, "polars-date-ranges"]], "polars.sum": [[783, "polars-sum"]], "polars.std": [[781, "polars-std"]], "polars.when": [[790, "polars-when"]], "polars.datetime_ranges": [[746, "polars-datetime-ranges"]], "polars.len": [[760, "polars-len"]], "polars.rolling_corr": [[777, "polars-rolling-corr"]], "polars.time": [[786, "polars-time"]], "polars.time_ranges": [[788, "polars-time-ranges"]], "polars.last": [[759, "polars-last"]], "polars.time_range": [[787, "polars-time-range"]], "polars.lit": [[761, "polars-lit"]], "polars.var": [[789, "polars-var"]], "polars.min_horizontal": [[771, "polars-min-horizontal"]], "Boolean": [[794, "boolean"], [1303, "boolean"]], "polars.zeros": [[791, "polars-zeros"]], "polars.median": [[769, "polars-median"]], "polars.implode": [[756, "polars-implode"]], "polars.int_range": [[757, "polars-int-range"]], "polars.datetime": [[744, "polars-datetime"]], "polars.date": [[741, "polars-date"]], "polars.rolling_cov": [[778, "polars-rolling-cov"]], "polars.first": [[750, "polars-first"]], "polars.quantile": [[774, "polars-quantile"]], "polars.n_unique": [[772, "polars-n-unique"]], "polars.Series.str.to_lowercase": [[1267, "polars-series-str-to-lowercase"]], "polars.Series.str.to_time": [[1268, "polars-series-str-to-time"]], "polars.Series.sum": [[1278, "polars-series-sum"]], "polars.Series.struct.rename_fields": [[1275, "polars-series-struct-rename-fields"]], "Export": [[1307, "export"], [304, "export"]], "polars.Series.str.to_date": [[1263, "polars-series-str-to-date"]], "polars.Series.str.to_uppercase": [[1270, "polars-series-str-to-uppercase"]], "polars.Series.str.to_datetime": [[1264, "polars-series-str-to-datetime"]], "polars.Series.tanh": [[1283, "polars-series-tanh"]], "polars.Series.to_list": [[1288, "polars-series-to-list"]], "Computation": [[1305, "computation"], [798, "computation"], [302, "computation"]], "polars.Series.struct.schema": [[1276, "polars-series-struct-schema"]], "polars.Series.upper_bound": [[1295, "polars-series-upper-bound"]], "polars.Series.str.tail": [[1262, "polars-series-str-tail"]], "polars.Series.struct.unnest": [[1277, "polars-series-struct-unnest"]], "polars.Series.str.strip_suffix": [[1260, "polars-series-str-strip-suffix"]], "polars.Series.str.strip_chars_start": [[1258, "polars-series-str-strip-chars-start"]], "polars.Series.to_dummies": [[1285, "polars-series-to-dummies"]], "polars.Series.str.to_titlecase": [[1269, "polars-series-str-to-titlecase"]], "polars.Series.str.to_decimal": [[1265, "polars-series-str-to-decimal"]], "polars.Series.str.strip_chars": [[1256, "polars-series-str-strip-chars"]], "polars.Series.to_pandas": [[1290, "polars-series-to-pandas"]], "polars.Series.str.strptime": [[1261, "polars-series-str-strptime"]], "polars.Series.str.zfill": [[1271, "polars-series-str-zfill"]], "polars.Series.take": [[1280, "polars-series-take"]], "polars.Series.str.to_integer": [[1266, "polars-series-str-to-integer"]], "polars.Series.struct.json_encode": [[1274, "polars-series-struct-json-encode"]], "polars.Series.zip_with": [[1299, "polars-series-zip-with"]], "polars.Series.to_arrow": [[1284, "polars-series-to-arrow"]], "polars.Series.tail": [[1279, "polars-series-tail"]], "polars.Series.str.strip": [[1255, "polars-series-str-strip"]], "polars.Series.tan": [[1282, "polars-series-tan"]], "polars.Series.to_physical": [[1291, "polars-series-to-physical"]], "List": [[1309, "list"], [801, "list"]], "Series": [[1308, "series"]], "polars.Series.to_numpy": [[1289, "polars-series-to-numpy"]], "polars.Series.struct.field": [[1272, "polars-series-struct-field"]], "polars.Series.str.strip_chars_end": [[1257, "polars-series-str-strip-chars-end"]], "polars.Series.str.starts_with": [[1254, "polars-series-str-starts-with"]], "polars.Series.unique": [[1293, "polars-series-unique"]], "polars.Series.var": [[1297, "polars-series-var"]], "polars.Series.unique_counts": [[1294, "polars-series-unique-counts"]], "polars.Series.top_k": [[1292, "polars-series-top-k"]], "polars.Series.view": [[1298, "polars-series-view"]], "polars.Series.to_frame": [[1286, "polars-series-to-frame"]], "polars.Series.value_counts": [[1296, "polars-series-value-counts"]], "polars.Series.to_init_repr": [[1287, "polars-series-to-init-repr"]], "polars.Series.struct.fields": [[1273, "polars-series-struct-fields"]], "Miscellaneous": [[1310, "miscellaneous"], [914, "miscellaneous"], [811, "miscellaneous"], [803, "miscellaneous"], [307, "miscellaneous"]], "polars.Series.take_every": [[1281, "polars-series-take-every"]], "polars.Series.str.strip_prefix": [[1259, "polars-series-str-strip-prefix"]], "polars.Expr.where": [[712, "polars-expr-where"]], "polars.apply": [[718, "polars-apply"]], "polars.Expr.take": [[699, "polars-expr-take"]], "polars.business_day_count": [[725, "polars-business-day-count"]], "polars.Expr.sub": [[695, "polars-expr-sub"]], "polars.Expr.str.to_titlecase": [[689, "polars-expr-str-to-titlecase"]], "polars.cumreduce": [[738, "polars-cumreduce"]], "polars.any_horizontal": [[717, "polars-any-horizontal"]], "polars.Expr.var": [[711, "polars-expr-var"]], "polars.Expr.upper_bound": [[709, "polars-expr-upper-bound"]], "polars.arg_sort_by": [[723, "polars-arg-sort-by"]], "polars.Expr.str.to_integer": [[686, "polars-expr-str-to-integer"]], "polars.Expr.unique": [[707, "polars-expr-unique"]], "polars.corr": [[729, "polars-corr"]], "polars.cov": [[731, "polars-cov"]], "polars.arange": [[720, "polars-arange"]], "polars.cum_count": [[732, "polars-cum-count"]], "polars.approx_n_unique": [[719, "polars-approx-n-unique"]], "polars.cum_sum_horizontal": [[736, "polars-cum-sum-horizontal"]], "polars.arctan2": [[721, "polars-arctan2"]], "polars.count": [[730, "polars-count"]], "polars.Expr.tanh": [[702, "polars-expr-tanh"]], "polars.cumsum_horizontal": [[740, "polars-cumsum-horizontal"]], "polars.Expr.tail": [[698, "polars-expr-tail"]], "polars.Expr.to_physical": [[703, "polars-expr-to-physical"]], "polars.arg_where": [[724, "polars-arg-where"]], "polars.Expr.take_every": [[700, "polars-expr-take-every"]], "polars.Expr.unique_counts": [[708, "polars-expr-unique-counts"]], "polars.Expr.str.to_time": [[688, "polars-expr-str-to-time"]], "polars.arctan2d": [[722, "polars-arctan2d"]], "polars.Expr.tan": [[701, "polars-expr-tan"]], "polars.all": [[714, "polars-all"]], "polars.Expr.xor": [[713, "polars-expr-xor"]], "polars.Expr.sum": [[697, "polars-expr-sum"]], "polars.Expr.str.zfill": [[691, "polars-expr-str-zfill"]], "polars.any": [[716, "polars-any"]], "polars.cum_reduce": [[734, "polars-cum-reduce"]], "polars.concat_list": [[727, "polars-concat-list"]], "polars.Expr.top_k_by": [[705, "polars-expr-top-k-by"]], "polars.Expr.struct.rename_fields": [[694, "polars-expr-struct-rename-fields"]], "polars.Expr.str.to_uppercase": [[690, "polars-expr-str-to-uppercase"]], "polars.cumsum": [[739, "polars-cumsum"]], "polars.Expr.str.to_lowercase": [[687, "polars-expr-str-to-lowercase"]], "polars.Expr.str.to_decimal": [[685, "polars-expr-str-to-decimal"]], "polars.Expr.top_k": [[704, "polars-expr-top-k"]], "polars.coalesce": [[726, "polars-coalesce"]], "polars.concat_str": [[728, "polars-concat-str"]], "polars.Expr.struct.field": [[692, "polars-expr-struct-field"]], "polars.Expr.suffix": [[696, "polars-expr-suffix"]], "polars.Expr.truediv": [[706, "polars-expr-truediv"]], "polars.Expr.value_counts": [[710, "polars-expr-value-counts"]], "polars.Expr.str.to_datetime": [[684, "polars-expr-str-to-datetime"]], "polars.all_horizontal": [[715, "polars-all-horizontal"]], "polars.cum_fold": [[733, "polars-cum-fold"]], "polars.cumfold": [[737, "polars-cumfold"]], "polars.Expr.struct.json_encode": [[693, "polars-expr-struct-json-encode"]], "polars.cum_sum": [[735, "polars-cum-sum"]], "polars.Series.arr.var": [[960, "polars-series-arr-var"]], "polars.Series.arcsin": [[928, "polars-series-arcsin"]], "polars.Series.arr.explode": [[943, "polars-series-arr-explode"]], "LazyFrame": [[913, "lazyframe"]], "polars.Series.arr.to_struct": [[958, "polars-series-arr-to-struct"]], "polars.Series.bin.ends_with": [[964, "polars-series-bin-ends-with"]], "polars.Series.arr.std": [[955, "polars-series-arr-std"]], "polars.Series.arg_max": [[932, "polars-series-arg-max"]], "polars.Series.arr.sort": [[954, "polars-series-arr-sort"]], "polars.Series.arg_sort": [[934, "polars-series-arg-sort"]], "polars.Series.bin.encode": [[963, "polars-series-bin-encode"]], "polars.Series.arr.arg_max": [[939, "polars-series-arr-arg-max"]], "polars.Series.arr.min": [[950, "polars-series-arr-min"]], "polars.Series.arr.max": [[948, "polars-series-arr-max"]], "polars.Series.arg_true": [[935, "polars-series-arg-true"]], "Selectors": [[918, "selectors"]], "Importing": [[918, "importing"]], "Set operations": [[918, "set-operations"]], "Functions": [[918, "functions"], [799, "functions"], [811, "functions"]], "polars.Series.any": [[923, "polars-series-any"]], "polars.Series.arcsinh": [[929, "polars-series-arcsinh"]], "polars.Series.bin.decode": [[962, "polars-series-bin-decode"]], "polars.Series.arr.arg_min": [[940, "polars-series-arr-arg-min"]], "polars.Series.bottom_k": [[966, "polars-series-bottom-k"]], "Metadata": [[916, "metadata"]], "Plugins": [[917, "plugins"]], "polars.Series.arr.last": [[947, "polars-series-arr-last"]], "polars.Series.arctan": [[930, "polars-series-arctan"]], "polars.Series.alias": [[921, "polars-series-alias"]], "GroupBy": [[912, "groupby"], [305, "groupby"]], "polars.Series.all": [[922, "polars-series-all"]], "polars.Series.arr.get": [[945, "polars-series-arr-get"]], "polars.Series.arr.sum": [[956, "polars-series-arr-sum"]], "polars.Series.arr.all": [[937, "polars-series-arr-all"]], "polars.Series.append": [[924, "polars-series-append"]], "polars.Series.arr.contains": [[941, "polars-series-arr-contains"]], "Read/write logical plan": [[914, "read-write-logical-plan"]], "polars.Series.arccosh": [[927, "polars-series-arccosh"]], "polars.Series.arg_min": [[933, "polars-series-arg-min"]], "polars.Series.abs": [[920, "polars-series-abs"]], "polars.Series.arr.median": [[949, "polars-series-arr-median"]], "polars.Series.arr.to_list": [[957, "polars-series-arr-to-list"]], "polars.Series.bin.starts_with": [[965, "polars-series-bin-starts-with"]], "polars.Series.arccos": [[926, "polars-series-arccos"]], "polars.Series.arr.first": [[944, "polars-series-arr-first"]], "polars.Series.apply": [[925, "polars-series-apply"]], "polars.Series.arr.join": [[946, "polars-series-arr-join"]], "polars.Series.arr.count_matches": [[942, "polars-series-arr-count-matches"]], "polars.Series.arr.n_unique": [[951, "polars-series-arr-n-unique"]], "polars.Series.arr.unique": [[959, "polars-series-arr-unique"]], "polars.Series.arctanh": [[931, "polars-series-arctanh"]], "polars.Series.cast": [[967, "polars-series-cast"]], "polars.Series.arr.reverse": [[952, "polars-series-arr-reverse"]], "polars.Series.cat.get_categories": [[968, "polars-series-cat-get-categories"]], "polars.Series.arr.any": [[938, "polars-series-arr-any"]], "polars.Series.bin.contains": [[961, "polars-series-bin-contains"]], "polars.Series.arg_unique": [[936, "polars-series-arg-unique"]], "polars.Series.arr.shift": [[953, "polars-series-arr-shift"]], "polars.Expr.std": [[637, "polars-expr-std"]], "polars.Expr.str.len_chars": [[656, "polars-expr-str-len-chars"]], "polars.Expr.shuffle": [[628, "polars-expr-shuffle"]], "polars.Expr.str.n_chars": [[660, "polars-expr-str-n-chars"]], "polars.Expr.str.extract_groups": [[649, "polars-expr-str-extract-groups"]], "polars.Expr.str.lengths": [[657, "polars-expr-str-lengths"]], "polars.Expr.sinh": [[631, "polars-expr-sinh"]], "polars.Expr.str.replace_all": [[665, "polars-expr-str-replace-all"]], "polars.Expr.str.replace_many": [[666, "polars-expr-str-replace-many"]], "polars.Expr.str.pad_end": [[661, "polars-expr-str-pad-end"]], "polars.Expr.str.pad_start": [[662, "polars-expr-str-pad-start"]], "polars.Expr.str.ends_with": [[645, "polars-expr-str-ends-with"]], "polars.Expr.sqrt": [[636, "polars-expr-sqrt"]], "polars.Expr.sign": [[629, "polars-expr-sign"]], "polars.Expr.str.find": [[650, "polars-expr-str-find"]], "polars.Expr.str.split_exact": [[672, "polars-expr-str-split-exact"]], "polars.Expr.str.count_match": [[641, "polars-expr-str-count-match"]], "polars.Expr.str.len_bytes": [[655, "polars-expr-str-len-bytes"]], "polars.Expr.str.strip_chars_end": [[677, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_suffix": [[680, "polars-expr-str-strip-suffix"]], "polars.Expr.sin": [[630, "polars-expr-sin"]], "polars.Expr.sort_by": [[635, "polars-expr-sort-by"]], "polars.Expr.sort": [[634, "polars-expr-sort"]], "polars.Expr.str.lstrip": [[659, "polars-expr-str-lstrip"]], "polars.Expr.str.json_path_match": [[654, "polars-expr-str-json-path-match"]], "polars.Expr.str.count_matches": [[642, "polars-expr-str-count-matches"]], "polars.Expr.str.ljust": [[658, "polars-expr-str-ljust"]], "polars.Expr.str.reverse": [[667, "polars-expr-str-reverse"]], "polars.Expr.shrink_dtype": [[627, "polars-expr-shrink-dtype"]], "polars.Expr.str.slice": [[670, "polars-expr-str-slice"]], "polars.Expr.str.strip": [[675, "polars-expr-str-strip"]], "polars.Expr.str.to_date": [[683, "polars-expr-str-to-date"]], "polars.Expr.str.json_decode": [[652, "polars-expr-str-json-decode"]], "polars.Expr.str.explode": [[646, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[647, "polars-expr-str-extract"]], "polars.Expr.str.split": [[671, "polars-expr-str-split"]], "polars.Expr.str.strip_chars": [[676, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip_prefix": [[679, "polars-expr-str-strip-prefix"]], "polars.Expr.str.strip_chars_start": [[678, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strptime": [[681, "polars-expr-str-strptime"]], "polars.Expr.str.head": [[651, "polars-expr-str-head"]], "polars.Expr.str.starts_with": [[674, "polars-expr-str-starts-with"]], "polars.Expr.str.encode": [[644, "polars-expr-str-encode"]], "polars.Expr.str.json_extract": [[653, "polars-expr-str-json-extract"]], "polars.Expr.str.replace": [[664, "polars-expr-str-replace"]], "polars.Expr.str.contains": [[639, "polars-expr-str-contains"]], "polars.Expr.slice": [[633, "polars-expr-slice"]], "polars.Expr.str.rstrip": [[669, "polars-expr-str-rstrip"]], "polars.Expr.str.contains_any": [[640, "polars-expr-str-contains-any"]], "polars.Expr.str.decode": [[643, "polars-expr-str-decode"]], "polars.Expr.str.parse_int": [[663, "polars-expr-str-parse-int"]], "polars.Expr.str.splitn": [[673, "polars-expr-str-splitn"]], "polars.Expr.str.rjust": [[668, "polars-expr-str-rjust"]], "polars.Expr.str.tail": [[682, "polars-expr-str-tail"]], "polars.Expr.str.extract_all": [[648, "polars-expr-str-extract-all"]], "polars.Expr.skew": [[632, "polars-expr-skew"]], "polars.Expr.str.concat": [[638, "polars-expr-str-concat"]], "polars.Expr.list.head": [[515, "polars-expr-list-head"]], "polars.Expr.list.join": [[516, "polars-expr-list-join"]], "polars.Expr.list.min": [[523, "polars-expr-list-min"]], "polars.Expr.list.slice": [[532, "polars-expr-list-slice"]], "polars.Expr.list.mean": [[521, "polars-expr-list-mean"]], "polars.Expr.list.sample": [[526, "polars-expr-list-sample"]], "polars.Expr.map_batches": [[549, "polars-expr-map-batches"]], "polars.Expr.meta.ne": [[558, "polars-expr-meta-ne"]], "polars.Expr.mean": [[553, "polars-expr-mean"]], "polars.Expr.list.sum": [[535, "polars-expr-list-sum"]], "polars.Expr.median": [[554, "polars-expr-median"]], "polars.Expr.list.set_union": [[530, "polars-expr-list-set-union"]], "polars.Expr.list.n_unique": [[524, "polars-expr-list-n-unique"]], "polars.Expr.list.tail": [[536, "polars-expr-list-tail"]], "polars.Expr.map_dict": [[550, "polars-expr-map-dict"]], "polars.Expr.log1p": [[544, "polars-expr-log1p"]], "polars.Expr.list.max": [[520, "polars-expr-list-max"]], "polars.Expr.list.shift": [[531, "polars-expr-list-shift"]], "polars.Expr.meta.is_regex_projection": [[557, "polars-expr-meta-is-regex-projection"]], "polars.Expr.min": [[566, "polars-expr-min"]], "polars.Expr.map_alias": [[548, "polars-expr-map-alias"]], "polars.Expr.list.std": [[534, "polars-expr-list-std"]], "polars.Expr.list.last": [[517, "polars-expr-list-last"]], "polars.Expr.list.reverse": [[525, "polars-expr-list-reverse"]], "polars.Expr.lt": [[546, "polars-expr-lt"]], "polars.Expr.map": [[547, "polars-expr-map"]], "polars.Expr.list.gather_every": [[513, "polars-expr-list-gather-every"]], "polars.Expr.log": [[542, "polars-expr-log"]], "polars.Expr.map_elements": [[551, "polars-expr-map-elements"]], "polars.Expr.meta.tree_format": [[563, "polars-expr-meta-tree-format"]], "polars.Expr.mode": [[568, "polars-expr-mode"]], "polars.Expr.list.lengths": [[519, "polars-expr-list-lengths"]], "polars.Expr.meta.pop": [[560, "polars-expr-meta-pop"]], "polars.Expr.meta.serialize": [[562, "polars-expr-meta-serialize"]], "polars.Expr.list.sort": [[533, "polars-expr-list-sort"]], "polars.Expr.meta.write_json": [[565, "polars-expr-meta-write-json"]], "polars.Expr.list.var": [[541, "polars-expr-list-var"]], "polars.Expr.list.to_array": [[538, "polars-expr-list-to-array"]], "polars.Expr.list.len": [[518, "polars-expr-list-len"]], "polars.Expr.list.set_intersection": [[528, "polars-expr-list-set-intersection"]], "polars.Expr.list.get": [[514, "polars-expr-list-get"]], "polars.Expr.meta.output_name": [[559, "polars-expr-meta-output-name"]], "polars.Expr.list.set_difference": [[527, "polars-expr-list-set-difference"]], "polars.Expr.max": [[552, "polars-expr-max"]], "polars.Expr.meta.undo_aliases": [[564, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.unique": [[540, "polars-expr-list-unique"]], "polars.Expr.lower_bound": [[545, "polars-expr-lower-bound"]], "polars.Expr.meta.eq": [[555, "polars-expr-meta-eq"]], "polars.Expr.log10": [[543, "polars-expr-log10"]], "polars.Expr.meta.has_multiple_outputs": [[556, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.mul": [[569, "polars-expr-mul"]], "polars.Expr.list.set_symmetric_difference": [[529, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.take": [[537, "polars-expr-list-take"]], "polars.Expr.mod": [[567, "polars-expr-mod"]], "polars.Expr.meta.root_names": [[561, "polars-expr-meta-root-names"]], "polars.Expr.list.median": [[522, "polars-expr-list-median"]], "polars.Expr.list.to_struct": [[539, "polars-expr-list-to-struct"]], "polars.Expr.rolling_var": [[619, "polars-expr-rolling-var"]], "polars.Expr.name.suffix_fields": [[577, "polars-expr-name-suffix-fields"]], "polars.Expr.neg": [[584, "polars-expr-neg"]], "polars.Expr.rolling": [[608, "polars-expr-rolling"]], "polars.Expr.nan_min": [[581, "polars-expr-nan-min"]], "polars.Expr.rolling_std": [[617, "polars-expr-rolling-std"]], "polars.Expr.radians": [[598, "polars-expr-radians"]], "polars.Expr.name.to_uppercase": [[579, "polars-expr-name-to-uppercase"]], "polars.Expr.rolling_skew": [[616, "polars-expr-rolling-skew"]], "polars.Expr.round_sig_figs": [[621, "polars-expr-round-sig-figs"]], "polars.Expr.peak_min": [[591, "polars-expr-peak-min"]], "polars.Expr.shift": [[625, "polars-expr-shift"]], "polars.Expr.qcut": [[596, "polars-expr-qcut"]], "polars.Expr.nan_max": [[580, "polars-expr-nan-max"]], "polars.Expr.replace": [[603, "polars-expr-replace"]], "polars.Expr.shift_and_fill": [[626, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_quantile": [[615, "polars-expr-rolling-quantile"]], "polars.Expr.prefix": [[594, "polars-expr-prefix"]], "polars.Expr.over": [[588, "polars-expr-over"]], "polars.Expr.rolling_sum": [[618, "polars-expr-rolling-sum"]], "polars.Expr.reshape": [[604, "polars-expr-reshape"]], "polars.Expr.name.to_lowercase": [[578, "polars-expr-name-to-lowercase"]], "polars.Expr.pipe": [[592, "polars-expr-pipe"]], "polars.Expr.search_sorted": [[623, "polars-expr-search-sorted"]], "polars.Expr.pow": [[593, "polars-expr-pow"]], "polars.Expr.rle_id": [[607, "polars-expr-rle-id"]], "polars.Expr.pct_change": [[589, "polars-expr-pct-change"]], "polars.Expr.name.map_fields": [[573, "polars-expr-name-map-fields"]], "polars.Expr.n_unique": [[570, "polars-expr-n-unique"]], "polars.Expr.product": [[595, "polars-expr-product"]], "polars.Expr.rolling_max": [[611, "polars-expr-rolling-max"]], "polars.Expr.rolling_min": [[614, "polars-expr-rolling-min"]], "polars.Expr.name.keep": [[571, "polars-expr-name-keep"]], "polars.Expr.rank": [[599, "polars-expr-rank"]], "polars.Expr.rle": [[606, "polars-expr-rle"]], "polars.Expr.ne_missing": [[583, "polars-expr-ne-missing"]], "polars.Expr.rolling_median": [[613, "polars-expr-rolling-median"]], "polars.Expr.peak_max": [[590, "polars-expr-peak-max"]], "polars.Expr.name.prefix": [[574, "polars-expr-name-prefix"]], "polars.Expr.name.suffix": [[576, "polars-expr-name-suffix"]], "polars.Expr.reverse": [[605, "polars-expr-reverse"]], "polars.Expr.set_sorted": [[624, "polars-expr-set-sorted"]], "polars.Expr.not_": [[585, "polars-expr-not"]], "polars.Expr.rolling_map": [[610, "polars-expr-rolling-map"]], "polars.Expr.rolling_mean": [[612, "polars-expr-rolling-mean"]], "polars.Expr.sample": [[622, "polars-expr-sample"]], "polars.Expr.ne": [[582, "polars-expr-ne"]], "polars.Expr.null_count": [[586, "polars-expr-null-count"]], "polars.Expr.rolling_apply": [[609, "polars-expr-rolling-apply"]], "polars.Expr.reinterpret": [[601, "polars-expr-reinterpret"]], "polars.Expr.name.map": [[572, "polars-expr-name-map"]], "polars.Expr.name.prefix_fields": [[575, "polars-expr-name-prefix-fields"]], "polars.Expr.round": [[620, "polars-expr-round"]], "polars.Expr.repeat_by": [[602, "polars-expr-repeat-by"]], "polars.Expr.rechunk": [[600, "polars-expr-rechunk"]], "polars.Expr.or_": [[587, "polars-expr-or"]], "polars.Expr.quantile": [[597, "polars-expr-quantile"]], "polars.Expr.flatten": [[462, "polars-expr-flatten"]], "polars.Expr.keep_name": [[493, "polars-expr-keep-name"]], "polars.Expr.is_infinite": [[484, "polars-expr-is-infinite"]], "polars.Expr.is_unique": [[492, "polars-expr-is-unique"]], "polars.Expr.get": [[470, "polars-expr-get"]], "polars.Expr.kurtosis": [[494, "polars-expr-kurtosis"]], "polars.Expr.le": [[496, "polars-expr-le"]], "polars.Expr.explode": [[456, "polars-expr-explode"]], "polars.Expr.fill_nan": [[458, "polars-expr-fill-nan"]], "polars.Expr.gather_every": [[468, "polars-expr-gather-every"]], "polars.Expr.hash": [[472, "polars-expr-hash"]], "polars.Expr.len": [[497, "polars-expr-len"]], "polars.Expr.is_last_distinct": [[486, "polars-expr-is-last-distinct"]], "polars.Expr.list.count_match": [[505, "polars-expr-list-count-match"]], "polars.Expr.fill_null": [[459, "polars-expr-fill-null"]], "polars.Expr.list.arg_min": [[502, "polars-expr-list-arg-min"]], "polars.Expr.is_between": [[478, "polars-expr-is-between"]], "polars.Expr.interpolate": [[477, "polars-expr-interpolate"]], "polars.Expr.forward_fill": [[465, "polars-expr-forward-fill"]], "polars.Expr.gather": [[467, "polars-expr-gather"]], "polars.Expr.is_not_nan": [[489, "polars-expr-is-not-nan"]], "polars.Expr.list.contains": [[504, "polars-expr-list-contains"]], "polars.Expr.is_nan": [[487, "polars-expr-is-nan"]], "polars.Expr.is_finite": [[480, "polars-expr-is-finite"]], "polars.Expr.filter": [[460, "polars-expr-filter"]], "polars.Expr.last": [[495, "polars-expr-last"]], "polars.Expr.limit": [[498, "polars-expr-limit"]], "polars.Expr.is_in": [[483, "polars-expr-is-in"]], "polars.Expr.list.arg_max": [[501, "polars-expr-list-arg-max"]], "polars.Expr.gt": [[471, "polars-expr-gt"]], "polars.Expr.inspect": [[476, "polars-expr-inspect"]], "polars.Expr.list.count_matches": [[506, "polars-expr-list-count-matches"]], "polars.Expr.head": [[473, "polars-expr-head"]], "polars.Expr.floordiv": [[464, "polars-expr-floordiv"]], "polars.Expr.list.explode": [[510, "polars-expr-list-explode"]], "polars.Expr.list.all": [[499, "polars-expr-list-all"]], "polars.Expr.list.any": [[500, "polars-expr-list-any"]], "polars.Expr.is_last": [[485, "polars-expr-is-last"]], "polars.Expr.hist": [[474, "polars-expr-hist"]], "polars.Expr.is_first_distinct": [[482, "polars-expr-is-first-distinct"]], "polars.Expr.extend_constant": [[457, "polars-expr-extend-constant"]], "polars.Expr.implode": [[475, "polars-expr-implode"]], "polars.Expr.first": [[461, "polars-expr-first"]], "polars.Expr.list.drop_nulls": [[508, "polars-expr-list-drop-nulls"]], "polars.Expr.is_duplicated": [[479, "polars-expr-is-duplicated"]], "polars.Expr.is_first": [[481, "polars-expr-is-first"]], "polars.Expr.is_not": [[488, "polars-expr-is-not"]], "polars.Expr.is_not_null": [[490, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[491, "polars-expr-is-null"]], "polars.Expr.list.diff": [[507, "polars-expr-list-diff"]], "polars.Expr.list.eval": [[509, "polars-expr-list-eval"]], "polars.Expr.from_json": [[466, "polars-expr-from-json"]], "polars.Expr.list.concat": [[503, "polars-expr-list-concat"]], "polars.Expr.list.gather": [[512, "polars-expr-list-gather"]], "polars.Expr.floor": [[463, "polars-expr-floor"]], "polars.Expr.ge": [[469, "polars-expr-ge"]], "polars.Expr.list.first": [[511, "polars-expr-list-first"]], "polars.Expr.dt.dst_offset": [[406, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.date": [[402, "polars-expr-dt-date"]], "polars.Expr.dt.time": [[432, "polars-expr-dt-time"]], "polars.Expr.dt.replace_time_zone": [[427, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.datetime": [[403, "polars-expr-dt-datetime"]], "polars.Expr.dt.nanosecond": [[422, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.day": [[404, "polars-expr-dt-day"]], "polars.Expr.dt.quarter": [[426, "polars-expr-dt-quarter"]], "polars.Expr.dt.round": [[428, "polars-expr-dt-round"]], "polars.Expr.dt.total_days": [[435, "polars-expr-dt-total-days"]], "polars.Expr.dt.weekday": [[444, "polars-expr-dt-weekday"]], "polars.Expr.dt.total_seconds": [[441, "polars-expr-dt-total-seconds"]], "polars.Expr.exp": [[455, "polars-expr-exp"]], "polars.Expr.dt.month_start": [[421, "polars-expr-dt-month-start"]], "polars.Expr.dt.millisecond": [[415, "polars-expr-dt-millisecond"]], "polars.Expr.dt.second": [[429, "polars-expr-dt-second"]], "polars.Expr.dt.minute": [[417, "polars-expr-dt-minute"]], "polars.Expr.ewm_mean_by": [[451, "polars-expr-ewm-mean-by"]], "polars.Expr.exclude": [[454, "polars-expr-exclude"]], "polars.Expr.entropy": [[447, "polars-expr-entropy"]], "polars.Expr.dt.month_end": [[420, "polars-expr-dt-month-end"]], "polars.Expr.dt.month": [[419, "polars-expr-dt-month"]], "polars.Expr.dt.milliseconds": [[416, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.seconds": [[430, "polars-expr-dt-seconds"]], "polars.Expr.dt.to_string": [[434, "polars-expr-dt-to-string"]], "polars.Expr.dt.ordinal_day": [[425, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.nanoseconds": [[423, "polars-expr-dt-nanoseconds"]], "polars.Expr.eq_missing": [[449, "polars-expr-eq-missing"]], "polars.Expr.ewm_std": [[452, "polars-expr-ewm-std"]], "polars.Expr.dt.combine": [[400, "polars-expr-dt-combine"]], "polars.Expr.dt.microsecond": [[412, "polars-expr-dt-microsecond"]], "polars.Expr.dt.total_hours": [[436, "polars-expr-dt-total-hours"]], "polars.Expr.dt.days": [[405, "polars-expr-dt-days"]], "polars.Expr.dt.with_time_unit": [[445, "polars-expr-dt-with-time-unit"]], "polars.Expr.ewm_mean": [[450, "polars-expr-ewm-mean"]], "polars.Expr.ewm_var": [[453, "polars-expr-ewm-var"]], "polars.Expr.dt.total_milliseconds": [[438, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.truncate": [[442, "polars-expr-dt-truncate"]], "polars.Expr.dt.timestamp": [[433, "polars-expr-dt-timestamp"]], "polars.Expr.dt.total_microseconds": [[437, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.century": [[399, "polars-expr-dt-century"]], "polars.Expr.dt.is_leap_year": [[410, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.hour": [[408, "polars-expr-dt-hour"]], "polars.Expr.dt.millennium": [[414, "polars-expr-dt-millennium"]], "polars.Expr.dt.convert_time_zone": [[401, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.microseconds": [[413, "polars-expr-dt-microseconds"]], "polars.Expr.dt.total_minutes": [[439, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.offset_by": [[424, "polars-expr-dt-offset-by"]], "polars.Expr.dt.epoch": [[407, "polars-expr-dt-epoch"]], "polars.Expr.dt.minutes": [[418, "polars-expr-dt-minutes"]], "polars.Expr.eq": [[448, "polars-expr-eq"]], "polars.Expr.dt.total_nanoseconds": [[440, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.hours": [[409, "polars-expr-dt-hours"]], "polars.Expr.dt.iso_year": [[411, "polars-expr-dt-iso-year"]], "polars.Expr.dt.year": [[446, "polars-expr-dt-year"]], "polars.Expr.dt.strftime": [[431, "polars-expr-dt-strftime"]], "polars.Expr.dt.week": [[443, "polars-expr-dt-week"]], "polars.Expr.arr.to_list": [[354, "polars-expr-arr-to-list"]], "polars.Expr.cat.get_categories": [[367, "polars-expr-cat-get-categories"]], "polars.Expr.clip_max": [[372, "polars-expr-clip-max"]], "polars.Expr.bottom_k_by": [[365, "polars-expr-bottom-k-by"]], "polars.Expr.deserialize": [[391, "polars-expr-deserialize"]], "polars.Expr.bin.starts_with": [[363, "polars-expr-bin-starts-with"]], "polars.Expr.cum_min": [[380, "polars-expr-cum-min"]], "polars.Expr.cumcount": [[383, "polars-expr-cumcount"]], "polars.Expr.cum_sum": [[382, "polars-expr-cum-sum"]], "polars.Expr.cut": [[389, "polars-expr-cut"]], "polars.Expr.arr.get": [[342, "polars-expr-arr-get"]], "polars.Expr.cos": [[374, "polars-expr-cos"]], "polars.Expr.cum_count": [[378, "polars-expr-cum-count"]], "polars.Expr.drop_nulls": [[395, "polars-expr-drop-nulls"]], "polars.Expr.arr.min": [[347, "polars-expr-arr-min"]], "polars.Expr.dt.base_utc_offset": [[397, "polars-expr-dt-base-utc-offset"]], "polars.Expr.cumsum": [[387, "polars-expr-cumsum"]], "polars.Expr.degrees": [[390, "polars-expr-degrees"]], "polars.Expr.dot": [[393, "polars-expr-dot"]], "polars.Expr.cot": [[376, "polars-expr-cot"]], "polars.Expr.arr.shift": [[350, "polars-expr-arr-shift"]], "polars.Expr.dt.add_business_days": [[396, "polars-expr-dt-add-business-days"]], "polars.Expr.arr.sort": [[351, "polars-expr-arr-sort"]], "polars.Expr.arr.join": [[343, "polars-expr-arr-join"]], "polars.Expr.arr.sum": [[353, "polars-expr-arr-sum"]], "polars.Expr.cast": [[366, "polars-expr-cast"]], "polars.Expr.arr.to_struct": [[355, "polars-expr-arr-to-struct"]], "polars.Expr.cat.set_ordering": [[368, "polars-expr-cat-set-ordering"]], "polars.Expr.diff": [[392, "polars-expr-diff"]], "polars.Expr.count": [[377, "polars-expr-count"]], "polars.Expr.arr.median": [[346, "polars-expr-arr-median"]], "polars.Expr.backward_fill": [[358, "polars-expr-backward-fill"]], "polars.Expr.bin.encode": [[361, "polars-expr-bin-encode"]], "polars.Expr.arr.reverse": [[349, "polars-expr-arr-reverse"]], "polars.Expr.arr.var": [[357, "polars-expr-arr-var"]], "polars.Expr.cum_prod": [[381, "polars-expr-cum-prod"]], "polars.Expr.bin.decode": [[360, "polars-expr-bin-decode"]], "polars.Expr.arr.max": [[345, "polars-expr-arr-max"]], "polars.Expr.clip": [[371, "polars-expr-clip"]], "polars.Expr.cbrt": [[369, "polars-expr-cbrt"]], "polars.Expr.cummax": [[384, "polars-expr-cummax"]], "polars.Expr.cumulative_eval": [[388, "polars-expr-cumulative-eval"]], "polars.Expr.arr.std": [[352, "polars-expr-arr-std"]], "polars.Expr.drop_nans": [[394, "polars-expr-drop-nans"]], "polars.Expr.dt.cast_time_unit": [[398, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cumprod": [[386, "polars-expr-cumprod"]], "polars.Expr.cosh": [[375, "polars-expr-cosh"]], "polars.Expr.arr.unique": [[356, "polars-expr-arr-unique"]], "polars.Expr.ceil": [[370, "polars-expr-ceil"]], "polars.Expr.clip_min": [[373, "polars-expr-clip-min"]], "polars.Expr.bin.ends_with": [[362, "polars-expr-bin-ends-with"]], "polars.Expr.cummin": [[385, "polars-expr-cummin"]], "polars.Expr.bottom_k": [[364, "polars-expr-bottom-k"]], "polars.Expr.arr.n_unique": [[348, "polars-expr-arr-n-unique"]], "polars.Expr.bin.contains": [[359, "polars-expr-bin-contains"]], "polars.Expr.arr.last": [[344, "polars-expr-arr-last"]], "polars.Expr.cum_max": [[379, "polars-expr-cum-max"]], "polars.DataFrame.product": [[230, "polars-dataframe-product"]], "polars.DataFrame.unique": [[271, "polars-dataframe-unique"]], "polars.DataFrame.to_torch": [[268, "polars-dataframe-to-torch"]], "polars.DataFrame.to_series": [[266, "polars-dataframe-to-series"]], "polars.DataFrame.replace_at_idx": [[235, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_struct": [[267, "polars-dataframe-to-struct"]], "polars.DataFrame.to_arrow": [[259, "polars-dataframe-to-arrow"]], "polars.DataFrame.width": [[278, "polars-dataframe-width"]], "polars.DataFrame.transpose": [[270, "polars-dataframe-transpose"]], "polars.DataFrame.slice": [[251, "polars-dataframe-slice"]], "polars.DataFrame.rows": [[240, "polars-dataframe-rows"]], "polars.DataFrame.sort": [[252, "polars-dataframe-sort"]], "polars.DataFrame.with_row_index": [[282, "polars-dataframe-with-row-index"]], "polars.DataFrame.with_row_count": [[281, "polars-dataframe-with-row-count"]], "polars.DataFrame.rechunk": [[232, "polars-dataframe-rechunk"]], "polars.DataFrame.quantile": [[231, "polars-dataframe-quantile"]], "polars.DataFrame.rename": [[233, "polars-dataframe-rename"]], "polars.DataFrame.replace": [[234, "polars-dataframe-replace"]], "polars.DataFrame.schema": [[243, "polars-dataframe-schema"]], "polars.DataFrame.vstack": [[277, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.__iter__": [[283, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.agg": [[284, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.select_seq": [[245, "polars-dataframe-select-seq"]], "polars.DataFrame.replace_column": [[236, "polars-dataframe-replace-column"]], "polars.DataFrame.row": [[239, "polars-dataframe-row"]], "polars.DataFrame.rolling": [[238, "polars-dataframe-rolling"]], "polars.DataFrame.to_dummies": [[262, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_dicts": [[261, "polars-dataframe-to-dicts"]], "polars.DataFrame.rows_by_key": [[241, "polars-dataframe-rows-by-key"]], "polars.DataFrame.unstack": [[273, "polars-dataframe-unstack"]], "polars.DataFrame.pipe": [[228, "polars-dataframe-pipe"]], "polars.DataFrame.select": [[244, "polars-dataframe-select"]], "polars.DataFrame.std": [[254, "polars-dataframe-std"]], "polars.DataFrame.with_columns_seq": [[280, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.shift": [[248, "polars-dataframe-shift"]], "polars.DataFrame.shift_and_fill": [[249, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.to_pandas": [[265, "polars-dataframe-to-pandas"]], "polars.DataFrame.unnest": [[272, "polars-dataframe-unnest"]], "polars.DataFrame.sum_horizontal": [[256, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_dict": [[260, "polars-dataframe-to-dict"]], "polars.DataFrame.sql": [[253, "polars-dataframe-sql"]], "polars.DataFrame.to_init_repr": [[263, "polars-dataframe-to-init-repr"]], "polars.DataFrame.pivot": [[229, "polars-dataframe-pivot"]], "polars.DataFrame.shape": [[247, "polars-dataframe-shape"]], "polars.DataFrame.reverse": [[237, "polars-dataframe-reverse"]], "polars.DataFrame.sum": [[255, "polars-dataframe-sum"]], "polars.DataFrame.to_numpy": [[264, "polars-dataframe-to-numpy"]], "polars.DataFrame.upsample": [[275, "polars-dataframe-upsample"]], "polars.DataFrame.take_every": [[258, "polars-dataframe-take-every"]], "polars.DataFrame.tail": [[257, "polars-dataframe-tail"]], "polars.DataFrame.sample": [[242, "polars-dataframe-sample"]], "polars.DataFrame.set_sorted": [[246, "polars-dataframe-set-sorted"]], "polars.DataFrame.with_columns": [[279, "polars-dataframe-with-columns"]], "polars.DataFrame.update": [[274, "polars-dataframe-update"]], "polars.DataFrame.var": [[276, "polars-dataframe-var"]], "polars.DataFrame.top_k": [[269, "polars-dataframe-top-k"]], "polars.DataFrame.shrink_to_fit": [[250, "polars-dataframe-shrink-to-fit"]], "polars.LazyFrame.group_by": [[838, "polars-lazyframe-group-by"]], "polars.LazyFrame.groupby_rolling": [[843, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.join_asof": [[848, "polars-lazyframe-join-asof"]], "polars.LazyFrame.max": [[854, "polars-lazyframe-max"]], "Meta": [[802, "meta"]], "polars.LazyFrame.map_batches": [[853, "polars-lazyframe-map-batches"]], "Python API reference": [[812, "python-api-reference"]], "polars.LazyFrame.clear": [[819, "polars-lazyframe-clear"]], "polars.LazyFrame.interpolate": [[846, "polars-lazyframe-interpolate"]], "polars.LazyFrame.cache": [[817, "polars-lazyframe-cache"]], "polars.LazyFrame.describe": [[825, "polars-lazyframe-describe"]], "polars.LazyFrame.first": [[836, "polars-lazyframe-first"]], "polars.LazyFrame.explain": [[830, "polars-lazyframe-explain"]], "polars.LazyFrame.collect": [[821, "polars-lazyframe-collect"]], "Window": [[810, "window"]], "Expressions": [[800, "expressions"]], "polars.LazyFrame.explode": [[831, "polars-lazyframe-explode"]], "polars.LazyFrame.cast": [[818, "polars-lazyframe-cast"]], "polars.LazyFrame.drop": [[827, "polars-lazyframe-drop"]], "Conversion": [[811, "conversion"]], "Parallelization": [[811, "parallelization"]], "Random": [[811, "random"]], "StringCache": [[811, "stringcache"]], "polars.LazyFrame.approx_n_unique": [[815, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.fill_nan": [[833, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.collect_async": [[822, "polars-lazyframe-collect-async"]], "polars.LazyFrame.clone": [[820, "polars-lazyframe-clone"]], "polars.LazyFrame.groupby": [[841, "polars-lazyframe-groupby"]], "polars.LazyFrame.deserialize": [[826, "polars-lazyframe-deserialize"]], "polars.LazyFrame.count": [[824, "polars-lazyframe-count"]], "polars.LazyFrame.group_by_rolling": [[840, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.limit": [[851, "polars-lazyframe-limit"]], "polars.LazyFrame.drop_nulls": [[828, "polars-lazyframe-drop-nulls"]], "Input/output": [[813, "input-output"]], "Avro": [[813, "avro"]], "Clipboard": [[813, "clipboard"]], "CSV": [[813, "csv"]], "Database": [[813, "database"]], "Delta Lake": [[813, "delta-lake"]], "Excel / ODS": [[813, "excel-ods"]], "Feather / IPC": [[813, "feather-ipc"]], "Iceberg": [[813, "iceberg"]], "JSON": [[813, "json"]], "Parquet": [[813, "parquet"]], "PyArrow Datasets": [[813, "pyarrow-datasets"]], "polars.LazyFrame.fill_null": [[834, "polars-lazyframe-fill-null"]], "polars.LazyFrame.head": [[844, "polars-lazyframe-head"]], "polars.LazyFrame.join": [[847, "polars-lazyframe-join"]], "polars.LazyFrame.bottom_k": [[816, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.filter": [[835, "polars-lazyframe-filter"]], "polars.LazyFrame.last": [[849, "polars-lazyframe-last"]], "Operators": [[806, "operators"]], "Conjunction": [[806, "conjunction"]], "Comparison": [[806, "comparison"]], "Numeric": [[806, "numeric"], [310, "numeric"]], "polars.LazyFrame.dtypes": [[829, "polars-lazyframe-dtypes"]], "polars.LazyFrame.fetch": [[832, "polars-lazyframe-fetch"]], "polars.LazyFrame.map": [[852, "polars-lazyframe-map"]], "polars.LazyFrame.group_by_dynamic": [[839, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.inspect": [[845, "polars-lazyframe-inspect"]], "Name": [[805, "name"]], "polars.LazyFrame.gather_every": [[837, "polars-lazyframe-gather-every"]], "polars.LazyFrame.columns": [[823, "polars-lazyframe-columns"]], "polars.LazyFrame.lazy": [[850, "polars-lazyframe-lazy"]], "polars.LazyFrame.groupby_dynamic": [[842, "polars-lazyframe-groupby-dynamic"]], "polars.Expr.apply": [[321, "polars-expr-apply"]], "polars.Expr.arccos": [[323, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.head": [[289, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arr.all": [[334, "polars-expr-arr-all"]], "polars.Expr.and_": [[318, "polars-expr-and"]], "polars.Expr.arg_max": [[329, "polars-expr-arg-max"]], "polars.Expr.arr.first": [[341, "polars-expr-arr-first"]], "DataFrame": [[306, "dataframe"]], "polars.Expr.alias": [[316, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.apply": [[286, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.sum": [[299, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.all": [[285, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.abs": [[313, "polars-expr-abs"]], "Data types": [[310, "data-types"]], "DataType": [[310, "datatype"]], "Nested": [[310, "nested"]], "Other": [[310, "other"]], "polars.Expr.agg_groups": [[315, "polars-expr-agg-groups"]], "polars.Expr.arccosh": [[324, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.first": [[288, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.arr.contains": [[338, "polars-expr-arr-contains"]], "polars.Expr.arcsinh": [[326, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.median": [[295, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.map_groups": [[292, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.arg_unique": [[333, "polars-expr-arg-unique"]], "polars.Expr.add": [[314, "polars-expr-add"]], "polars.Expr.arctan": [[327, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.min": [[296, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.any": [[319, "polars-expr-any"]], "polars.Expr.approx_n_unique": [[322, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.len": [[291, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.max": [[293, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.last": [[290, "polars-dataframe-group-by-groupby-last"]], "Exceptions": [[311, "exceptions"]], "polars.dataframe.group_by.GroupBy.count": [[287, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.all": [[317, "polars-expr-all"]], "polars.Expr.arg_true": [[332, "polars-expr-arg-true"]], "polars.Expr.arg_sort": [[331, "polars-expr-arg-sort"]], "polars.Expr.arctanh": [[328, "polars-expr-arctanh"]], "polars.Expr.append": [[320, "polars-expr-append"]], "polars.Expr.arcsin": [[325, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.quantile": [[298, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.mean": [[294, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.arr.explode": [[340, "polars-expr-arr-explode"]], "polars.Expr.arr.count_matches": [[339, "polars-expr-arr-count-matches"]], "polars.Expr.arr.any": [[335, "polars-expr-arr-any"]], "polars.Expr.arg_min": [[330, "polars-expr-arg-min"]], "polars.Expr.arr.arg_min": [[337, "polars-expr-arr-arg-min"]], "polars.dataframe.group_by.GroupBy.tail": [[300, "polars-dataframe-group-by-groupby-tail"]], "polars.dataframe.group_by.GroupBy.n_unique": [[297, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arr.arg_max": [[336, "polars-expr-arr-arg-max"]]}, "indexentries": {"activate_decimals() (polars.config class method)": [[2, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[3, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[4, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[7, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[9, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[10, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[31, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[32, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[33, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[34, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[35, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[36, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[37, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[39, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[40, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[41, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[42, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_parquet"]], "execute() (polars.sqlcontext method)": [[47, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[48, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[49, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[50, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[51, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[52, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[53, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[53, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[59, "polars.build_info"]], "collect_all() (in module polars)": [[60, "polars.collect_all"]], "collect_all_async() (in module polars)": [[61, "polars.collect_all_async"]], "concat() (in module polars)": [[62, "polars.concat"]], "array (class in polars.datatypes)": [[63, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[63, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[64, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[64, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[65, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[65, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[66, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[66, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[67, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[67, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[68, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[68, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[69, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[69, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[70, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[70, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[71, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[71, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[72, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[72, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[73, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[73, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[74, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[74, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[75, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[75, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[76, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[76, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[77, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[77, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[78, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[78, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[79, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[79, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[80, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[80, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[81, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[81, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[82, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[82, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[83, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[83, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[84, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[84, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[85, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[85, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[86, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[86, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[87, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[87, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[88, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[88, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[89, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[89, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[90, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[91, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[92, "polars.enable_string_cache"]], "arrowerror": [[93, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[94, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[95, "polars.exceptions.ComputeError"]], "duplicateerror": [[96, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[97, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[98, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[99, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[100, "polars.exceptions.PolarsError"]], "polarspanicerror": [[101, "polars.exceptions.PolarsPanicError"]], "rowserror": [[102, "polars.exceptions.RowsError"]], "schemaerror": [[103, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[104, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[105, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[106, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[107, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[108, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[109, "polars.from_dataframe"]], "from_dict() (in module polars)": [[110, "polars.from_dict"]], "from_dicts() (in module polars)": [[111, "polars.from_dicts"]], "from_numpy() (in module polars)": [[112, "polars.from_numpy"]], "from_pandas() (in module polars)": [[113, "polars.from_pandas"]], "from_records() (in module polars)": [[114, "polars.from_records"]], "from_repr() (in module polars)": [[115, "polars.from_repr"]], "get_index_type() (in module polars)": [[116, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[117, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[118, "polars.read_avro"]], "read_clipboard() (in module polars)": [[119, "polars.read_clipboard"]], "read_csv() (in module polars)": [[120, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[121, "polars.read_csv_batched"]], "read_database() (in module polars)": [[122, "polars.read_database"]], "read_database_uri() (in module polars)": [[123, "polars.read_database_uri"]], "read_delta() (in module polars)": [[124, "polars.read_delta"]], "read_excel() (in module polars)": [[125, "polars.read_excel"]], "read_ipc() (in module polars)": [[126, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[127, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[128, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[129, "polars.read_json"]], "read_ndjson() (in module polars)": [[130, "polars.read_ndjson"]], "read_ods() (in module polars)": [[131, "polars.read_ods"]], "read_parquet() (in module polars)": [[132, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[133, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[134, "polars.scan_csv"]], "scan_delta() (in module polars)": [[135, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[136, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[137, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[138, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[139, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[140, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[141, "polars.set_random_seed"]], "show_versions() (in module polars)": [[142, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[143, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[145, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[146, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[147, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[147, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[152, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[153, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[154, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[155, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[156, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[159, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[160, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[161, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[162, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[163, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[164, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[165, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[166, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[167, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[168, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[169, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[170, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[171, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[172, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[173, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[174, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[175, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[176, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[177, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[178, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[179, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[180, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[181, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[182, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[183, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[184, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[185, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[186, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[187, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[188, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[189, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[190, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[191, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[192, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[193, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[194, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[195, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[196, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[197, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[198, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[199, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[200, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[201, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[202, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[203, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[204, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[205, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[206, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[207, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[208, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[209, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[210, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[211, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[212, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[213, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[214, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[215, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[216, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[217, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[218, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[219, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[220, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[221, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[222, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[223, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[224, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[225, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[226, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[227, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[228, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[229, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[230, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[231, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[232, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[233, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[234, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[235, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[236, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[237, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[238, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[239, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[240, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[241, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[242, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[243, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[244, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[245, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[246, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[247, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[248, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[249, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[250, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[251, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[252, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[253, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[254, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[255, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[256, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[257, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[258, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[259, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[260, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[261, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[262, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[263, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[264, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[265, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[266, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[267, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[268, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[269, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[270, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[271, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[272, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[273, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[274, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[275, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[276, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[277, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[278, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[279, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[280, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[281, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[282, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[313, "polars.Expr.abs"]], "add() (polars.expr method)": [[314, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[315, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[316, "polars.Expr.alias"]], "all() (polars.expr method)": [[317, "polars.Expr.all"]], "and_() (polars.expr method)": [[318, "polars.Expr.and_"]], "any() (polars.expr method)": [[319, "polars.Expr.any"]], "append() (polars.expr method)": [[320, "polars.Expr.append"]], "apply() (polars.expr method)": [[321, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[322, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[323, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[324, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[325, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[326, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[327, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[328, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[329, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[330, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[331, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[332, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[333, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[334, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[335, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[336, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[337, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[338, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[339, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[340, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[341, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[342, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[343, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[344, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[345, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[346, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[347, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[348, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[349, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[350, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[351, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[352, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[353, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[354, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[355, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[356, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[357, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[358, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[359, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[360, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[361, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[362, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[363, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[364, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[365, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[366, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[367, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[368, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[369, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[370, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[371, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[372, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[373, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[374, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[375, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[376, "polars.Expr.cot"]], "count() (polars.expr method)": [[377, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[378, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[379, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[380, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[381, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[382, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[383, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[384, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[385, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[386, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[387, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[388, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[389, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[390, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[391, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[392, "polars.Expr.diff"]], "dot() (polars.expr method)": [[393, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[394, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[395, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[396, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[397, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[398, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[399, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[400, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[401, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[402, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[403, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[404, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[405, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[406, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[407, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[408, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[409, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[410, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[411, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[412, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[413, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[414, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[415, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[416, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[417, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[418, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[419, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[420, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[421, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[422, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[423, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[424, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[425, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[426, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[427, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[428, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[429, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[430, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[431, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[432, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[433, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[434, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[435, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[436, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[437, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[438, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[439, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[442, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[443, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[444, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[445, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[446, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[447, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[448, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[449, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[450, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[451, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[452, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[453, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[454, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[455, "polars.Expr.exp"]], "explode() (polars.expr method)": [[456, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[457, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[458, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[459, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[460, "polars.Expr.filter"]], "first() (polars.expr method)": [[461, "polars.Expr.first"]], "flatten() (polars.expr method)": [[462, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[463, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[464, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[465, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[466, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[467, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[468, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[469, "polars.Expr.ge"]], "get() (polars.expr method)": [[470, "polars.Expr.get"]], "gt() (polars.expr method)": [[471, "polars.Expr.gt"]], "hash() (polars.expr method)": [[472, "polars.Expr.hash"]], "head() (polars.expr method)": [[473, "polars.Expr.head"]], "hist() (polars.expr method)": [[474, "polars.Expr.hist"]], "implode() (polars.expr method)": [[475, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[476, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[477, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[478, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[479, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[480, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[481, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[482, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[483, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[484, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[485, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[486, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[487, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[488, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[489, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[490, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[491, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[492, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[493, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[494, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[495, "polars.Expr.last"]], "le() (polars.expr method)": [[496, "polars.Expr.le"]], "len() (polars.expr method)": [[497, "polars.Expr.len"]], "limit() (polars.expr method)": [[498, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[499, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[500, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[501, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[502, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[503, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[504, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[505, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[506, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[507, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[508, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[509, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[510, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[511, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[512, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[513, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[514, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[515, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[516, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[517, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[518, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[519, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[520, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[521, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[522, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[523, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[524, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[525, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[526, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[527, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[528, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[529, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[530, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[531, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[532, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[533, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[534, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[535, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[536, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[537, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[538, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[539, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[540, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[541, "polars.Expr.list.var"]], "log() (polars.expr method)": [[542, "polars.Expr.log"]], "log10() (polars.expr method)": [[543, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[544, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[545, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[546, "polars.Expr.lt"]], "map() (polars.expr method)": [[547, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[548, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[549, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[550, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[551, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[552, "polars.Expr.max"]], "mean() (polars.expr method)": [[553, "polars.Expr.mean"]], "median() (polars.expr method)": [[554, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[555, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[556, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[557, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[558, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[559, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[560, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[561, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[562, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[563, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[564, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[565, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[566, "polars.Expr.min"]], "mod() (polars.expr method)": [[567, "polars.Expr.mod"]], "mode() (polars.expr method)": [[568, "polars.Expr.mode"]], "mul() (polars.expr method)": [[569, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[570, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[571, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[572, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[573, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[574, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[575, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[576, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[577, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[578, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[579, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[580, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[581, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[582, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[583, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[584, "polars.Expr.neg"]], "not_() (polars.expr method)": [[585, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[586, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[587, "polars.Expr.or_"]], "over() (polars.expr method)": [[588, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[589, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[590, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[591, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[592, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[593, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[594, "polars.Expr.prefix"]], "product() (polars.expr method)": [[595, "polars.Expr.product"]], "qcut() (polars.expr method)": [[596, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[597, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[598, "polars.Expr.radians"]], "rank() (polars.expr method)": [[599, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[600, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[601, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[602, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[603, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[604, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[605, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[606, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[607, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[608, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[609, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[610, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[611, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[612, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[613, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[614, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[615, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[616, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[617, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[618, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[619, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[620, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[621, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[622, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[623, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[624, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[625, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[626, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[627, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[628, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[629, "polars.Expr.sign"]], "sin() (polars.expr method)": [[630, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[631, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[632, "polars.Expr.skew"]], "slice() (polars.expr method)": [[633, "polars.Expr.slice"]], "sort() (polars.expr method)": [[634, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[635, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[636, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[637, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[638, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[639, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[640, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[641, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[642, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[643, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[644, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[645, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[646, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[647, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[648, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[649, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[650, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[651, "polars.Expr.str.head"]], "json_decode() (polars.expr.str method)": [[652, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[653, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[654, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[655, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[656, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[657, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[658, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[659, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[660, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[661, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[662, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[663, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[664, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[665, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[666, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[667, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[668, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[669, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[670, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[671, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[672, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[673, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[674, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[675, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[676, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[677, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[678, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[679, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[680, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[681, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[682, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[683, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[684, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[685, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[686, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[687, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[688, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[689, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[690, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[691, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[692, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[693, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[694, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[695, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[696, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[697, "polars.Expr.sum"]], "tail() (polars.expr method)": [[698, "polars.Expr.tail"]], "take() (polars.expr method)": [[699, "polars.Expr.take"]], "take_every() (polars.expr method)": [[700, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[701, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[702, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[703, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[704, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[705, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[706, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[707, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[708, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[709, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[710, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[711, "polars.Expr.var"]], "where() (polars.expr method)": [[712, "polars.Expr.where"]], "xor() (polars.expr method)": [[713, "polars.Expr.xor"]], "all() (in module polars)": [[714, "polars.all"]], "all_horizontal() (in module polars)": [[715, "polars.all_horizontal"]], "any() (in module polars)": [[716, "polars.any"]], "any_horizontal() (in module polars)": [[717, "polars.any_horizontal"]], "apply() (in module polars)": [[718, "polars.apply"]], "approx_n_unique() (in module polars)": [[719, "polars.approx_n_unique"]], "arange() (in module polars)": [[720, "polars.arange"]], "arctan2() (in module polars)": [[721, "polars.arctan2"]], "arctan2d() (in module polars)": [[722, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[723, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[724, "polars.arg_where"]], "business_day_count() (in module polars)": [[725, "polars.business_day_count"]], "coalesce() (in module polars)": [[726, "polars.coalesce"]], "concat_list() (in module polars)": [[727, "polars.concat_list"]], "concat_str() (in module polars)": [[728, "polars.concat_str"]], "corr() (in module polars)": [[729, "polars.corr"]], "count() (in module polars)": [[730, "polars.count"]], "cov() (in module polars)": [[731, "polars.cov"]], "cum_count() (in module polars)": [[732, "polars.cum_count"]], "cum_fold() (in module polars)": [[733, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[734, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[735, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[736, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[737, "polars.cumfold"]], "cumreduce() (in module polars)": [[738, "polars.cumreduce"]], "cumsum() (in module polars)": [[739, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[740, "polars.cumsum_horizontal"]], "date() (in module polars)": [[741, "polars.date"]], "date_range() (in module polars)": [[742, "polars.date_range"]], "date_ranges() (in module polars)": [[743, "polars.date_ranges"]], "datetime() (in module polars)": [[744, "polars.datetime"]], "datetime_range() (in module polars)": [[745, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[746, "polars.datetime_ranges"]], "duration() (in module polars)": [[747, "polars.duration"]], "element() (in module polars)": [[748, "polars.element"]], "exclude() (in module polars)": [[749, "polars.exclude"]], "first() (in module polars)": [[750, "polars.first"]], "fold() (in module polars)": [[751, "polars.fold"]], "format() (in module polars)": [[752, "polars.format"]], "from_epoch() (in module polars)": [[753, "polars.from_epoch"]], "groups() (in module polars)": [[754, "polars.groups"]], "head() (in module polars)": [[755, "polars.head"]], "implode() (in module polars)": [[756, "polars.implode"]], "int_range() (in module polars)": [[757, "polars.int_range"]], "int_ranges() (in module polars)": [[758, "polars.int_ranges"]], "last() (in module polars)": [[759, "polars.last"]], "len() (in module polars)": [[760, "polars.len"]], "lit() (in module polars)": [[761, "polars.lit"]], "map() (in module polars)": [[762, "polars.map"]], "map_batches() (in module polars)": [[763, "polars.map_batches"]], "map_groups() (in module polars)": [[764, "polars.map_groups"]], "max() (in module polars)": [[765, "polars.max"]], "max_horizontal() (in module polars)": [[766, "polars.max_horizontal"]], "mean() (in module polars)": [[767, "polars.mean"]], "mean_horizontal() (in module polars)": [[768, "polars.mean_horizontal"]], "median() (in module polars)": [[769, "polars.median"]], "min() (in module polars)": [[770, "polars.min"]], "min_horizontal() (in module polars)": [[771, "polars.min_horizontal"]], "n_unique() (in module polars)": [[772, "polars.n_unique"]], "ones() (in module polars)": [[773, "polars.ones"]], "quantile() (in module polars)": [[774, "polars.quantile"]], "reduce() (in module polars)": [[775, "polars.reduce"]], "repeat() (in module polars)": [[776, "polars.repeat"]], "rolling_corr() (in module polars)": [[777, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[778, "polars.rolling_cov"]], "select() (in module polars)": [[779, "polars.select"]], "sql_expr() (in module polars)": [[780, "polars.sql_expr"]], "std() (in module polars)": [[781, "polars.std"]], "struct() (in module polars)": [[782, "polars.struct"]], "sum() (in module polars)": [[783, "polars.sum"]], "sum_horizontal() (in module polars)": [[784, "polars.sum_horizontal"]], "tail() (in module polars)": [[785, "polars.tail"]], "time() (in module polars)": [[786, "polars.time"]], "time_range() (in module polars)": [[787, "polars.time_range"]], "time_ranges() (in module polars)": [[788, "polars.time_ranges"]], "var() (in module polars)": [[789, "polars.var"]], "when() (in module polars)": [[790, "polars.when"]], "zeros() (in module polars)": [[791, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[815, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[816, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[817, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[818, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[819, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[820, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[821, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[822, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[823, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[824, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[825, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[826, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[827, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[828, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[829, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[830, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[831, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[832, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[833, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[834, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[835, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[836, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[837, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[838, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[839, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[840, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[841, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[842, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[843, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[844, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[845, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[846, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[847, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[848, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[849, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[850, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[851, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[852, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[853, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[854, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[855, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[856, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[857, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[858, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[859, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[860, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[861, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[862, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[863, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[864, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[865, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[866, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[867, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[868, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[869, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[870, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[871, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[872, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[873, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[874, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[875, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[876, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[877, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[878, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[879, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[880, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[881, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[882, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[883, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[884, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[885, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[886, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[887, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[888, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[889, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[890, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[891, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[892, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[893, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[894, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[895, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[896, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[897, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[898, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[899, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[901, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[902, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[903, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[905, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[917, "module-polars.plugins"], [918, "module-polars.selectors"]], "polars.plugins": [[917, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[917, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[918, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[918, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[918, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[918, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[918, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[918, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[918, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[918, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[918, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[918, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[918, "polars.selectors.first"]], "float() (in module polars.selectors)": [[918, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[918, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[918, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[918, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[918, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[918, "polars.selectors.numeric"]], "polars.selectors": [[918, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[918, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[918, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[918, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[918, "polars.selectors.time"]], "abs() (polars.series method)": [[920, "polars.Series.abs"]], "alias() (polars.series method)": [[921, "polars.Series.alias"]], "all() (polars.series method)": [[922, "polars.Series.all"]], "any() (polars.series method)": [[923, "polars.Series.any"]], "append() (polars.series method)": [[924, "polars.Series.append"]], "apply() (polars.series method)": [[925, "polars.Series.apply"]], "arccos() (polars.series method)": [[926, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[927, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[928, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[929, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[930, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[931, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[932, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[933, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[934, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[935, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[936, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[937, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[938, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[939, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[940, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[941, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[942, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[943, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[944, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[945, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[946, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[947, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[948, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[949, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[950, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[951, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[952, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[953, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[954, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[955, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[956, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[957, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[958, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[959, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[960, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[961, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[962, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[963, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[964, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[965, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[966, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[967, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[968, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[969, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[970, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[971, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[972, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[973, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[974, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[975, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[976, "polars.Series.clear"]], "clip() (polars.series method)": [[977, "polars.Series.clip"]], "clip_max() (polars.series method)": [[978, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[979, "polars.Series.clip_min"]], "clone() (polars.series method)": [[980, "polars.Series.clone"]], "cos() (polars.series method)": [[981, "polars.Series.cos"]], "cosh() (polars.series method)": [[982, "polars.Series.cosh"]], "cot() (polars.series method)": [[983, "polars.Series.cot"]], "cum_max() (polars.series method)": [[984, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[985, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[986, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[987, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[988, "polars.Series.cummax"]], "cummin() (polars.series method)": [[989, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[990, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[991, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[992, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[993, "polars.Series.cut"]], "describe() (polars.series method)": [[994, "polars.Series.describe"]], "diff() (polars.series method)": [[995, "polars.Series.diff"]], "dot() (polars.series method)": [[996, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[997, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[998, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[999, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[1000, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[1001, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[1002, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[1003, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[1004, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[1005, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[1006, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[1007, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[1008, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[1009, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[1010, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[1011, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[1012, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[1013, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[1014, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[1015, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[1016, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[1017, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[1018, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[1019, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[1020, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[1021, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[1022, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[1023, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[1024, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[1025, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[1026, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[1027, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[1028, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[1029, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1030, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1031, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1032, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1033, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1034, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1035, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1036, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1037, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1038, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1039, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1040, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1041, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1042, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1043, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1044, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1045, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1046, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1047, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1048, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1049, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1050, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1051, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1052, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1053, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1054, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1055, "polars.Series.entropy"]], "equals() (polars.series method)": [[1056, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1057, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1058, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1059, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1060, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1061, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1062, "polars.Series.exp"]], "explode() (polars.series method)": [[1063, "polars.Series.explode"]], "extend() (polars.series method)": [[1064, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1065, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1066, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1067, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1068, "polars.Series.filter"]], "flags (polars.series attribute)": [[1069, "polars.Series.flags"]], "floor() (polars.series method)": [[1070, "polars.Series.floor"]], "gather() (polars.series method)": [[1071, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1072, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1073, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1074, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1075, "polars.Series.hash"]], "head() (polars.series method)": [[1076, "polars.Series.head"]], "hist() (polars.series method)": [[1077, "polars.Series.hist"]], "implode() (polars.series method)": [[1078, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1079, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1080, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1081, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1082, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1083, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1084, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1085, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1086, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1087, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1088, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1089, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1090, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1091, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1092, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1093, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1094, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1095, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1096, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1097, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1098, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1099, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1100, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1101, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1102, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1103, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1104, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1105, "polars.Series.len"]], "limit() (polars.series method)": [[1106, "polars.Series.limit"]], "all() (polars.series.list method)": [[1107, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1108, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1109, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1110, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1111, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1112, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1113, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1114, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1115, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1116, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1117, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1118, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1119, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1120, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1121, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1122, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1123, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1124, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1125, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1126, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1127, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1128, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1129, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1130, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1131, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1132, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1133, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1134, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1135, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1136, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1137, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1138, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1139, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1140, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1141, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1142, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1143, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1144, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1145, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1146, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1147, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1148, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1149, "polars.Series.list.var"]], "log() (polars.series method)": [[1150, "polars.Series.log"]], "log10() (polars.series method)": [[1151, "polars.Series.log10"]], "log1p() (polars.series method)": [[1152, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1153, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1154, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1155, "polars.Series.map_elements"]], "max() (polars.series method)": [[1156, "polars.Series.max"]], "mean() (polars.series method)": [[1157, "polars.Series.mean"]], "median() (polars.series method)": [[1158, "polars.Series.median"]], "min() (polars.series method)": [[1159, "polars.Series.min"]], "mode() (polars.series method)": [[1160, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1161, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1162, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1163, "polars.Series.name"]], "nan_max() (polars.series method)": [[1164, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1165, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1166, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1167, "polars.Series.not_"]], "null_count() (polars.series method)": [[1168, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1169, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1170, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1171, "polars.Series.peak_min"]], "product() (polars.series method)": [[1172, "polars.Series.product"]], "qcut() (polars.series method)": [[1173, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1174, "polars.Series.quantile"]], "rank() (polars.series method)": [[1175, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1176, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1177, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1178, "polars.Series.rename"]], "replace() (polars.series method)": [[1179, "polars.Series.replace"]], "reshape() (polars.series method)": [[1180, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1181, "polars.Series.reverse"]], "rle() (polars.series method)": [[1182, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1183, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1184, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1185, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1186, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1187, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1188, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1189, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1190, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1191, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1192, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1193, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1194, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1195, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1196, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1197, "polars.Series.sample"]], "scatter() (polars.series method)": [[1198, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1199, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1200, "polars.Series.series_equal"]], "set() (polars.series method)": [[1201, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1202, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1203, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1204, "polars.Series.shape"]], "shift() (polars.series method)": [[1205, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1206, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1207, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1208, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1209, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1210, "polars.Series.sign"]], "sin() (polars.series method)": [[1211, "polars.Series.sin"]], "sinh() (polars.series method)": [[1212, "polars.Series.sinh"]], "skew() (polars.series method)": [[1213, "polars.Series.skew"]], "slice() (polars.series method)": [[1214, "polars.Series.slice"]], "sort() (polars.series method)": [[1215, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1216, "polars.Series.sqrt"]], "std() (polars.series method)": [[1217, "polars.Series.std"]], "concat() (polars.series.str method)": [[1218, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1219, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1220, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1221, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1222, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1223, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1224, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1225, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1226, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1227, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1228, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1229, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1230, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1231, "polars.Series.str.head"]], "json_decode() (polars.series.str method)": [[1232, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1233, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1234, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1235, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1236, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1237, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1238, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1239, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1240, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1241, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1242, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1243, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1244, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1245, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1246, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1247, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1248, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1249, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1250, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1251, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1252, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1253, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1254, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1255, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1256, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1257, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1258, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1259, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1260, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1261, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1262, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1263, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1264, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1265, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1266, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1267, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1268, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1269, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1270, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1271, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1272, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1273, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1274, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1275, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1276, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1277, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1278, "polars.Series.sum"]], "tail() (polars.series method)": [[1279, "polars.Series.tail"]], "take() (polars.series method)": [[1280, "polars.Series.take"]], "take_every() (polars.series method)": [[1281, "polars.Series.take_every"]], "tan() (polars.series method)": [[1282, "polars.Series.tan"]], "tanh() (polars.series method)": [[1283, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1284, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1285, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1286, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1287, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1288, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1289, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1290, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1291, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1292, "polars.Series.top_k"]], "unique() (polars.series method)": [[1293, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1294, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1295, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1296, "polars.Series.value_counts"]], "var() (polars.series method)": [[1297, "polars.Series.var"]], "view() (polars.series method)": [[1298, "polars.Series.view"]], "zip_with() (polars.series method)": [[1299, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1316, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1316, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1316, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1316, "polars.SQLContext.__init__"]]}})